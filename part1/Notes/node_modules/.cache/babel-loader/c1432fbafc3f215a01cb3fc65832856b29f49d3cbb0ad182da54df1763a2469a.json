{"ast":null,"code":"'use strict';\n\nconst BaseManager = require('./BaseManager');\nconst {\n  Presence\n} = require('../structures/Presence');\n\n/**\n * Manages API methods for Presences and holds their cache.\n * @extends {BaseManager}\n */\nclass PresenceManager extends BaseManager {\n  constructor(client, iterable) {\n    super(client, iterable, Presence);\n  }\n\n  /**\n   * The cache of Presences\n   * @type {Collection<Snowflake, Presence>}\n   * @name PresenceManager#cache\n   */\n\n  add(data, cache) {\n    const existing = this.cache.get(data.user.id);\n    return existing ? existing.patch(data) : super.add(data, cache, {\n      id: data.user.id\n    });\n  }\n\n  /**\n   * Data that can be resolved to a Presence object. This can be:\n   * * A Presence\n   * * A UserResolvable\n   * * A Snowflake\n   * @typedef {Presence|UserResolvable|Snowflake} PresenceResolvable\n   */\n\n  /**\n   * Resolves a PresenceResolvable to a Presence object.\n   * @param {PresenceResolvable} presence The presence resolvable to resolve\n   * @returns {?Presence}\n   */\n  resolve(presence) {\n    const presenceResolvable = super.resolve(presence);\n    if (presenceResolvable) return presenceResolvable;\n    const UserResolvable = this.client.users.resolveID(presence);\n    return super.resolve(UserResolvable) || null;\n  }\n\n  /**\n   * Resolves a PresenceResolvable to a Presence ID string.\n   * @param {PresenceResolvable} presence The presence resolvable to resolve\n   * @returns {?Snowflake}\n   */\n  resolveID(presence) {\n    const presenceResolvable = super.resolveID(presence);\n    if (presenceResolvable) return presenceResolvable;\n    const userResolvable = this.client.users.resolveID(presence);\n    return this.cache.has(userResolvable) ? userResolvable : null;\n  }\n}\nmodule.exports = PresenceManager;","map":{"version":3,"names":["BaseManager","require","Presence","PresenceManager","constructor","client","iterable","add","data","cache","existing","get","user","id","patch","resolve","presence","presenceResolvable","UserResolvable","users","resolveID","userResolvable","has","module","exports"],"sources":["/Users/jessegill/node_modules/discord.js/src/managers/PresenceManager.js"],"sourcesContent":["'use strict';\n\nconst BaseManager = require('./BaseManager');\nconst { Presence } = require('../structures/Presence');\n\n/**\n * Manages API methods for Presences and holds their cache.\n * @extends {BaseManager}\n */\nclass PresenceManager extends BaseManager {\n  constructor(client, iterable) {\n    super(client, iterable, Presence);\n  }\n\n  /**\n   * The cache of Presences\n   * @type {Collection<Snowflake, Presence>}\n   * @name PresenceManager#cache\n   */\n\n  add(data, cache) {\n    const existing = this.cache.get(data.user.id);\n    return existing ? existing.patch(data) : super.add(data, cache, { id: data.user.id });\n  }\n\n  /**\n   * Data that can be resolved to a Presence object. This can be:\n   * * A Presence\n   * * A UserResolvable\n   * * A Snowflake\n   * @typedef {Presence|UserResolvable|Snowflake} PresenceResolvable\n   */\n\n  /**\n   * Resolves a PresenceResolvable to a Presence object.\n   * @param {PresenceResolvable} presence The presence resolvable to resolve\n   * @returns {?Presence}\n   */\n  resolve(presence) {\n    const presenceResolvable = super.resolve(presence);\n    if (presenceResolvable) return presenceResolvable;\n    const UserResolvable = this.client.users.resolveID(presence);\n    return super.resolve(UserResolvable) || null;\n  }\n\n  /**\n   * Resolves a PresenceResolvable to a Presence ID string.\n   * @param {PresenceResolvable} presence The presence resolvable to resolve\n   * @returns {?Snowflake}\n   */\n  resolveID(presence) {\n    const presenceResolvable = super.resolveID(presence);\n    if (presenceResolvable) return presenceResolvable;\n    const userResolvable = this.client.users.resolveID(presence);\n    return this.cache.has(userResolvable) ? userResolvable : null;\n  }\n}\n\nmodule.exports = PresenceManager;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,WAAW,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC5C,MAAM;EAAEC;AAAS,CAAC,GAAGD,OAAO,CAAC,wBAAwB,CAAC;;AAEtD;AACA;AACA;AACA;AACA,MAAME,eAAe,SAASH,WAAW,CAAC;EACxCI,WAAW,CAACC,MAAM,EAAEC,QAAQ,EAAE;IAC5B,KAAK,CAACD,MAAM,EAAEC,QAAQ,EAAEJ,QAAQ,CAAC;EACnC;;EAEA;AACF;AACA;AACA;AACA;;EAEEK,GAAG,CAACC,IAAI,EAAEC,KAAK,EAAE;IACf,MAAMC,QAAQ,GAAG,IAAI,CAACD,KAAK,CAACE,GAAG,CAACH,IAAI,CAACI,IAAI,CAACC,EAAE,CAAC;IAC7C,OAAOH,QAAQ,GAAGA,QAAQ,CAACI,KAAK,CAACN,IAAI,CAAC,GAAG,KAAK,CAACD,GAAG,CAACC,IAAI,EAAEC,KAAK,EAAE;MAAEI,EAAE,EAAEL,IAAI,CAACI,IAAI,CAACC;IAAG,CAAC,CAAC;EACvF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;EACEE,OAAO,CAACC,QAAQ,EAAE;IAChB,MAAMC,kBAAkB,GAAG,KAAK,CAACF,OAAO,CAACC,QAAQ,CAAC;IAClD,IAAIC,kBAAkB,EAAE,OAAOA,kBAAkB;IACjD,MAAMC,cAAc,GAAG,IAAI,CAACb,MAAM,CAACc,KAAK,CAACC,SAAS,CAACJ,QAAQ,CAAC;IAC5D,OAAO,KAAK,CAACD,OAAO,CAACG,cAAc,CAAC,IAAI,IAAI;EAC9C;;EAEA;AACF;AACA;AACA;AACA;EACEE,SAAS,CAACJ,QAAQ,EAAE;IAClB,MAAMC,kBAAkB,GAAG,KAAK,CAACG,SAAS,CAACJ,QAAQ,CAAC;IACpD,IAAIC,kBAAkB,EAAE,OAAOA,kBAAkB;IACjD,MAAMI,cAAc,GAAG,IAAI,CAAChB,MAAM,CAACc,KAAK,CAACC,SAAS,CAACJ,QAAQ,CAAC;IAC5D,OAAO,IAAI,CAACP,KAAK,CAACa,GAAG,CAACD,cAAc,CAAC,GAAGA,cAAc,GAAG,IAAI;EAC/D;AACF;AAEAE,MAAM,CAACC,OAAO,GAAGrB,eAAe"},"metadata":{},"sourceType":"script","externalDependencies":[]}