{"ast":null,"code":"'use strict';\n\nconst Package = exports.Package = require('../../package.json');\nconst {\n  Error,\n  RangeError\n} = require('../errors');\nconst browser = exports.browser = typeof window !== 'undefined';\n\n/**\n * Options for a client.\n * @typedef {Object} ClientOptions\n * @property {number|number[]|string} [shards] ID of the shard to run, or an array of shard IDs. If not specified,\n * the client will spawn {@link ClientOptions#shardCount} shards. If set to `auto`, it will fetch the\n * recommended amount of shards from Discord and spawn that amount\n * @property {number} [shardCount=1] The total amount of shards used by all processes of this bot\n * (e.g. recommended shard count, shard count of the ShardingManager)\n * @property {number} [messageCacheMaxSize=200] Maximum number of messages to cache per channel\n * (-1 or Infinity for unlimited - don't do this without message sweeping, otherwise memory usage will climb\n * indefinitely)\n * @property {number} [messageCacheLifetime=0] How long a message should stay in the cache until it is considered\n * sweepable (in seconds, 0 for forever)\n * @property {number} [messageSweepInterval=0] How frequently to remove messages from the cache that are older than\n * the message cache lifetime (in seconds, 0 for never)\n * @property {number} [messageEditHistoryMaxSize=-1] Maximum number of previous versions to hold for an edited message\n * (-1 or Infinity for unlimited - don't do this without sweeping, otherwise memory usage may climb indefinitely.)\n * @property {boolean} [fetchAllMembers=false] Whether to cache all guild members and users upon startup, as well as\n * upon joining a guild (should be avoided whenever possible)\n * @property {DisableMentionType} [disableMentions='none'] Default value for {@link MessageOptions#disableMentions}\n * @property {MessageMentionOptions} [allowedMentions] Default value for {@link MessageOptions#allowedMentions}\n * @property {PartialType[]} [partials] Structures allowed to be partial. This means events can be emitted even when\n * they're missing all the data for a particular structure. See the \"Partials\" topic listed in the sidebar for some\n * important usage information, as partials require you to put checks in place when handling data.\n * @property {number} [restWsBridgeTimeout=5000] Maximum time permitted between REST responses and their\n * corresponding websocket events\n * @property {number} [restTimeOffset=500] Extra time in milliseconds to wait before continuing to make REST\n * requests (higher values will reduce rate-limiting errors on bad connections)\n * @property {number} [restRequestTimeout=15000] Time to wait before cancelling a REST request, in milliseconds\n * @property {number} [restSweepInterval=60] How frequently to delete inactive request buckets, in seconds\n * (or 0 for never)\n * @property {number} [retryLimit=1] How many times to retry on 5XX errors (Infinity for indefinite amount of retries)\n * @property {PresenceData} [presence] Presence data to use upon login\n * @property {WebsocketOptions} [ws] Options for the WebSocket\n * @property {HTTPOptions} [http] HTTP options\n */\nexports.DefaultOptions = {\n  shardCount: 1,\n  messageCacheMaxSize: 200,\n  messageCacheLifetime: 0,\n  messageSweepInterval: 0,\n  messageEditHistoryMaxSize: -1,\n  fetchAllMembers: false,\n  disableMentions: 'none',\n  partials: [],\n  restWsBridgeTimeout: 5000,\n  restRequestTimeout: 15000,\n  retryLimit: 1,\n  restTimeOffset: 500,\n  restSweepInterval: 60,\n  presence: {},\n  /**\n   * WebSocket options (these are left as snake_case to match the API)\n   * @typedef {Object} WebsocketOptions\n   * @property {number} [large_threshold=50] Number of members in a guild after which offline users will no longer be\n   * sent in the initial guild member list, must be between 50 and 250\n   * @property {IntentsResolvable} [intents] Intents to enable for this connection\n   */\n  ws: {\n    large_threshold: 50,\n    compress: false,\n    properties: {\n      $os: browser ? 'browser' : process.platform,\n      $browser: 'discord.js',\n      $device: 'discord.js'\n    },\n    version: 6\n  },\n  /**\n   * HTTP options\n   * @typedef {Object} HTTPOptions\n   * @property {number} [version=7] API version to use\n   * @property {string} [api='https://discord.com/api'] Base url of the API\n   * @property {string} [cdn='https://cdn.discordapp.com'] Base url of the CDN\n   * @property {string} [invite='https://discord.gg'] Base url of invites\n   * @property {string} [template='https://discord.new'] Base url of templates\n   */\n  http: {\n    version: 7,\n    api: 'https://discord.com/api',\n    cdn: 'https://cdn.discordapp.com',\n    invite: 'https://discord.gg',\n    template: 'https://discord.new'\n  }\n};\nexports.UserAgent = browser ? null : `DiscordBot (${Package.homepage.split('#')[0]}, ${Package.version}) Node.js/${process.version}`;\nexports.WSCodes = {\n  1000: 'WS_CLOSE_REQUESTED',\n  4004: 'TOKEN_INVALID',\n  4010: 'SHARDING_INVALID',\n  4011: 'SHARDING_REQUIRED',\n  4013: 'INVALID_INTENTS',\n  4014: 'DISALLOWED_INTENTS'\n};\nconst AllowedImageFormats = ['webp', 'png', 'jpg', 'jpeg', 'gif'];\nconst AllowedImageSizes = Array.from({\n  length: 9\n}, (e, i) => 2 ** (i + 4));\nfunction makeImageUrl(root) {\n  let {\n    format = 'webp',\n    size\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (format && !AllowedImageFormats.includes(format)) throw new Error('IMAGE_FORMAT', format);\n  if (size && !AllowedImageSizes.includes(size)) throw new RangeError('IMAGE_SIZE', size);\n  return `${root}.${format}${size ? `?size=${size}` : ''}`;\n}\n/**\n * Options for Image URLs.\n * @typedef {Object} ImageURLOptions\n * @property {string} [format] One of `webp`, `png`, `jpg`, `jpeg`, `gif`. If no format is provided,\n * defaults to `webp`.\n * @property {boolean} [dynamic] If true, the format will dynamically change to `gif` for\n * animated avatars; the default is false.\n * @property {number} [size] One of `16`, `32`, `64`, `128`, `256`, `512`, `1024`, `2048`, `4096`\n */\n\nexports.Endpoints = {\n  CDN(root) {\n    return {\n      Emoji: function (emojiID) {\n        let format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'png';\n        return `${root}/emojis/${emojiID}.${format}`;\n      },\n      Asset: name => `${root}/assets/${name}`,\n      DefaultAvatar: discriminator => `${root}/embed/avatars/${discriminator}.png`,\n      Avatar: function (userID, hash) {\n        let format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'webp';\n        let size = arguments.length > 3 ? arguments[3] : undefined;\n        let dynamic = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n        if (dynamic) format = hash.startsWith('a_') ? 'gif' : format;\n        return makeImageUrl(`${root}/avatars/${userID}/${hash}`, {\n          format,\n          size\n        });\n      },\n      Banner: function (guildID, hash) {\n        let format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'webp';\n        let size = arguments.length > 3 ? arguments[3] : undefined;\n        return makeImageUrl(`${root}/banners/${guildID}/${hash}`, {\n          format,\n          size\n        });\n      },\n      Icon: function (guildID, hash) {\n        let format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'webp';\n        let size = arguments.length > 3 ? arguments[3] : undefined;\n        let dynamic = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n        if (dynamic) format = hash.startsWith('a_') ? 'gif' : format;\n        return makeImageUrl(`${root}/icons/${guildID}/${hash}`, {\n          format,\n          size\n        });\n      },\n      AppIcon: function (clientID, hash) {\n        let {\n          format = 'webp',\n          size\n        } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        return makeImageUrl(`${root}/app-icons/${clientID}/${hash}`, {\n          size,\n          format\n        });\n      },\n      AppAsset: function (clientID, hash) {\n        let {\n          format = 'webp',\n          size\n        } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        return makeImageUrl(`${root}/app-assets/${clientID}/${hash}`, {\n          size,\n          format\n        });\n      },\n      GDMIcon: function (channelID, hash) {\n        let format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'webp';\n        let size = arguments.length > 3 ? arguments[3] : undefined;\n        return makeImageUrl(`${root}/channel-icons/${channelID}/${hash}`, {\n          size,\n          format\n        });\n      },\n      Splash: function (guildID, hash) {\n        let format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'webp';\n        let size = arguments.length > 3 ? arguments[3] : undefined;\n        return makeImageUrl(`${root}/splashes/${guildID}/${hash}`, {\n          size,\n          format\n        });\n      },\n      DiscoverySplash: function (guildID, hash) {\n        let format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'webp';\n        let size = arguments.length > 3 ? arguments[3] : undefined;\n        return makeImageUrl(`${root}/discovery-splashes/${guildID}/${hash}`, {\n          size,\n          format\n        });\n      },\n      TeamIcon: function (teamID, hash) {\n        let {\n          format = 'webp',\n          size\n        } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        return makeImageUrl(`${root}/team-icons/${teamID}/${hash}`, {\n          size,\n          format\n        });\n      }\n    };\n  },\n  invite: (root, code) => `${root}/${code}`,\n  botGateway: '/gateway/bot'\n};\n\n/**\n * The current status of the client. Here are the available statuses:\n * * READY: 0\n * * CONNECTING: 1\n * * RECONNECTING: 2\n * * IDLE: 3\n * * NEARLY: 4\n * * DISCONNECTED: 5\n * * WAITING_FOR_GUILDS: 6\n * * IDENTIFYING: 7\n * * RESUMING: 8\n * @typedef {number} Status\n */\nexports.Status = {\n  READY: 0,\n  CONNECTING: 1,\n  RECONNECTING: 2,\n  IDLE: 3,\n  NEARLY: 4,\n  DISCONNECTED: 5,\n  WAITING_FOR_GUILDS: 6,\n  IDENTIFYING: 7,\n  RESUMING: 8\n};\n\n/**\n * The current status of a voice connection. Here are the available statuses:\n * * CONNECTED: 0\n * * CONNECTING: 1\n * * AUTHENTICATING: 2\n * * RECONNECTING: 3\n * * DISCONNECTED: 4\n * @typedef {number} VoiceStatus\n */\nexports.VoiceStatus = {\n  CONNECTED: 0,\n  CONNECTING: 1,\n  AUTHENTICATING: 2,\n  RECONNECTING: 3,\n  DISCONNECTED: 4\n};\nexports.OPCodes = {\n  DISPATCH: 0,\n  HEARTBEAT: 1,\n  IDENTIFY: 2,\n  STATUS_UPDATE: 3,\n  VOICE_STATE_UPDATE: 4,\n  VOICE_GUILD_PING: 5,\n  RESUME: 6,\n  RECONNECT: 7,\n  REQUEST_GUILD_MEMBERS: 8,\n  INVALID_SESSION: 9,\n  HELLO: 10,\n  HEARTBEAT_ACK: 11\n};\nexports.VoiceOPCodes = {\n  IDENTIFY: 0,\n  SELECT_PROTOCOL: 1,\n  READY: 2,\n  HEARTBEAT: 3,\n  SESSION_DESCRIPTION: 4,\n  SPEAKING: 5,\n  HELLO: 8,\n  CLIENT_CONNECT: 12,\n  CLIENT_DISCONNECT: 13\n};\nexports.Events = {\n  RATE_LIMIT: 'rateLimit',\n  CLIENT_READY: 'ready',\n  GUILD_CREATE: 'guildCreate',\n  GUILD_DELETE: 'guildDelete',\n  GUILD_UPDATE: 'guildUpdate',\n  GUILD_UNAVAILABLE: 'guildUnavailable',\n  GUILD_AVAILABLE: 'guildAvailable',\n  GUILD_MEMBER_ADD: 'guildMemberAdd',\n  GUILD_MEMBER_REMOVE: 'guildMemberRemove',\n  GUILD_MEMBER_UPDATE: 'guildMemberUpdate',\n  GUILD_MEMBER_AVAILABLE: 'guildMemberAvailable',\n  GUILD_MEMBER_SPEAKING: 'guildMemberSpeaking',\n  GUILD_MEMBERS_CHUNK: 'guildMembersChunk',\n  GUILD_INTEGRATIONS_UPDATE: 'guildIntegrationsUpdate',\n  GUILD_ROLE_CREATE: 'roleCreate',\n  GUILD_ROLE_DELETE: 'roleDelete',\n  INVITE_CREATE: 'inviteCreate',\n  INVITE_DELETE: 'inviteDelete',\n  GUILD_ROLE_UPDATE: 'roleUpdate',\n  GUILD_EMOJI_CREATE: 'emojiCreate',\n  GUILD_EMOJI_DELETE: 'emojiDelete',\n  GUILD_EMOJI_UPDATE: 'emojiUpdate',\n  GUILD_BAN_ADD: 'guildBanAdd',\n  GUILD_BAN_REMOVE: 'guildBanRemove',\n  CHANNEL_CREATE: 'channelCreate',\n  CHANNEL_DELETE: 'channelDelete',\n  CHANNEL_UPDATE: 'channelUpdate',\n  CHANNEL_PINS_UPDATE: 'channelPinsUpdate',\n  MESSAGE_CREATE: 'message',\n  MESSAGE_DELETE: 'messageDelete',\n  MESSAGE_UPDATE: 'messageUpdate',\n  MESSAGE_BULK_DELETE: 'messageDeleteBulk',\n  MESSAGE_REACTION_ADD: 'messageReactionAdd',\n  MESSAGE_REACTION_REMOVE: 'messageReactionRemove',\n  MESSAGE_REACTION_REMOVE_ALL: 'messageReactionRemoveAll',\n  MESSAGE_REACTION_REMOVE_EMOJI: 'messageReactionRemoveEmoji',\n  USER_UPDATE: 'userUpdate',\n  PRESENCE_UPDATE: 'presenceUpdate',\n  VOICE_SERVER_UPDATE: 'voiceServerUpdate',\n  VOICE_STATE_UPDATE: 'voiceStateUpdate',\n  VOICE_BROADCAST_SUBSCRIBE: 'subscribe',\n  VOICE_BROADCAST_UNSUBSCRIBE: 'unsubscribe',\n  TYPING_START: 'typingStart',\n  TYPING_STOP: 'typingStop',\n  WEBHOOKS_UPDATE: 'webhookUpdate',\n  ERROR: 'error',\n  WARN: 'warn',\n  DEBUG: 'debug',\n  SHARD_DISCONNECT: 'shardDisconnect',\n  SHARD_ERROR: 'shardError',\n  SHARD_RECONNECTING: 'shardReconnecting',\n  SHARD_READY: 'shardReady',\n  SHARD_RESUME: 'shardResume',\n  INVALIDATED: 'invalidated',\n  RAW: 'raw'\n};\nexports.ShardEvents = {\n  CLOSE: 'close',\n  DESTROYED: 'destroyed',\n  INVALID_SESSION: 'invalidSession',\n  READY: 'ready',\n  RESUMED: 'resumed',\n  ALL_READY: 'allReady'\n};\n\n/**\n * The type of Structure allowed to be a partial:\n * * USER\n * * CHANNEL (only affects DMChannels)\n * * GUILD_MEMBER\n * * MESSAGE\n * * REACTION\n * <warn>Partials require you to put checks in place when handling data, read the Partials topic listed in the\n * sidebar for more information.</warn>\n * @typedef {string} PartialType\n */\nexports.PartialTypes = keyMirror(['USER', 'CHANNEL', 'GUILD_MEMBER', 'MESSAGE', 'REACTION']);\n\n/**\n * The type of a websocket message event, e.g. `MESSAGE_CREATE`. Here are the available events:\n * * READY\n * * RESUMED\n * * GUILD_CREATE\n * * GUILD_DELETE\n * * GUILD_UPDATE\n * * INVITE_CREATE\n * * INVITE_DELETE\n * * GUILD_MEMBER_ADD\n * * GUILD_MEMBER_REMOVE\n * * GUILD_MEMBER_UPDATE\n * * GUILD_MEMBERS_CHUNK\n * * GUILD_INTEGRATIONS_UPDATE\n * * GUILD_ROLE_CREATE\n * * GUILD_ROLE_DELETE\n * * GUILD_ROLE_UPDATE\n * * GUILD_BAN_ADD\n * * GUILD_BAN_REMOVE\n * * GUILD_EMOJIS_UPDATE\n * * CHANNEL_CREATE\n * * CHANNEL_DELETE\n * * CHANNEL_UPDATE\n * * CHANNEL_PINS_UPDATE\n * * MESSAGE_CREATE\n * * MESSAGE_DELETE\n * * MESSAGE_UPDATE\n * * MESSAGE_DELETE_BULK\n * * MESSAGE_REACTION_ADD\n * * MESSAGE_REACTION_REMOVE\n * * MESSAGE_REACTION_REMOVE_ALL\n * * MESSAGE_REACTION_REMOVE_EMOJI\n * * USER_UPDATE\n * * PRESENCE_UPDATE\n * * TYPING_START\n * * VOICE_STATE_UPDATE\n * * VOICE_SERVER_UPDATE\n * * WEBHOOKS_UPDATE\n * @typedef {string} WSEventType\n */\nexports.WSEvents = keyMirror(['READY', 'RESUMED', 'GUILD_CREATE', 'GUILD_DELETE', 'GUILD_UPDATE', 'INVITE_CREATE', 'INVITE_DELETE', 'GUILD_MEMBER_ADD', 'GUILD_MEMBER_REMOVE', 'GUILD_MEMBER_UPDATE', 'GUILD_MEMBERS_CHUNK', 'GUILD_INTEGRATIONS_UPDATE', 'GUILD_ROLE_CREATE', 'GUILD_ROLE_DELETE', 'GUILD_ROLE_UPDATE', 'GUILD_BAN_ADD', 'GUILD_BAN_REMOVE', 'GUILD_EMOJIS_UPDATE', 'CHANNEL_CREATE', 'CHANNEL_DELETE', 'CHANNEL_UPDATE', 'CHANNEL_PINS_UPDATE', 'MESSAGE_CREATE', 'MESSAGE_DELETE', 'MESSAGE_UPDATE', 'MESSAGE_DELETE_BULK', 'MESSAGE_REACTION_ADD', 'MESSAGE_REACTION_REMOVE', 'MESSAGE_REACTION_REMOVE_ALL', 'MESSAGE_REACTION_REMOVE_EMOJI', 'USER_UPDATE', 'PRESENCE_UPDATE', 'TYPING_START', 'VOICE_STATE_UPDATE', 'VOICE_SERVER_UPDATE', 'WEBHOOKS_UPDATE']);\n\n/**\n * The type of a message, e.g. `DEFAULT`. Here are the available types:\n * * DEFAULT\n * * RECIPIENT_ADD\n * * RECIPIENT_REMOVE\n * * CALL\n * * CHANNEL_NAME_CHANGE\n * * CHANNEL_ICON_CHANGE\n * * PINS_ADD\n * * GUILD_MEMBER_JOIN\n * * USER_PREMIUM_GUILD_SUBSCRIPTION\n * * USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_1\n * * USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_2\n * * USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_3\n * * CHANNEL_FOLLOW_ADD\n * * GUILD_DISCOVERY_DISQUALIFIED\n * * GUILD_DISCOVERY_REQUALIFIED\n * @typedef {string} MessageType\n */\nexports.MessageTypes = ['DEFAULT', 'RECIPIENT_ADD', 'RECIPIENT_REMOVE', 'CALL', 'CHANNEL_NAME_CHANGE', 'CHANNEL_ICON_CHANGE', 'PINS_ADD', 'GUILD_MEMBER_JOIN', 'USER_PREMIUM_GUILD_SUBSCRIPTION', 'USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_1', 'USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_2', 'USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_3', 'CHANNEL_FOLLOW_ADD', null, 'GUILD_DISCOVERY_DISQUALIFIED', 'GUILD_DISCOVERY_REQUALIFIED'];\n\n/**\n * <info>Bots cannot set a `CUSTOM_STATUS`, it is only for custom statuses received from users</info>\n * The type of an activity of a users presence, e.g. `PLAYING`. Here are the available types:\n * * PLAYING\n * * STREAMING\n * * LISTENING\n * * WATCHING\n * * CUSTOM_STATUS\n * * COMPETING\n * @typedef {string} ActivityType\n */\nexports.ActivityTypes = ['PLAYING', 'STREAMING', 'LISTENING', 'WATCHING', 'CUSTOM_STATUS', 'COMPETING'];\nexports.ChannelTypes = {\n  TEXT: 0,\n  DM: 1,\n  VOICE: 2,\n  GROUP: 3,\n  CATEGORY: 4,\n  NEWS: 5,\n  STORE: 6\n};\nexports.ClientApplicationAssetTypes = {\n  SMALL: 1,\n  BIG: 2\n};\nexports.Colors = {\n  DEFAULT: 0x000000,\n  WHITE: 0xffffff,\n  AQUA: 0x1abc9c,\n  GREEN: 0x2ecc71,\n  BLUE: 0x3498db,\n  YELLOW: 0xffff00,\n  PURPLE: 0x9b59b6,\n  LUMINOUS_VIVID_PINK: 0xe91e63,\n  GOLD: 0xf1c40f,\n  ORANGE: 0xe67e22,\n  RED: 0xe74c3c,\n  GREY: 0x95a5a6,\n  NAVY: 0x34495e,\n  DARK_AQUA: 0x11806a,\n  DARK_GREEN: 0x1f8b4c,\n  DARK_BLUE: 0x206694,\n  DARK_PURPLE: 0x71368a,\n  DARK_VIVID_PINK: 0xad1457,\n  DARK_GOLD: 0xc27c0e,\n  DARK_ORANGE: 0xa84300,\n  DARK_RED: 0x992d22,\n  DARK_GREY: 0x979c9f,\n  DARKER_GREY: 0x7f8c8d,\n  LIGHT_GREY: 0xbcc0c0,\n  DARK_NAVY: 0x2c3e50,\n  BLURPLE: 0x7289da,\n  GREYPLE: 0x99aab5,\n  DARK_BUT_NOT_BLACK: 0x2c2f33,\n  NOT_QUITE_BLACK: 0x23272a\n};\n\n/**\n * The value set for the explicit content filter levels for a guild:\n * * DISABLED\n * * MEMBERS_WITHOUT_ROLES\n * * ALL_MEMBERS\n * @typedef {string} ExplicitContentFilterLevel\n */\nexports.ExplicitContentFilterLevels = ['DISABLED', 'MEMBERS_WITHOUT_ROLES', 'ALL_MEMBERS'];\n\n/**\n * The value set for the verification levels for a guild:\n * * NONE\n * * LOW\n * * MEDIUM\n * * HIGH\n * * VERY_HIGH\n * @typedef {string} VerificationLevel\n */\nexports.VerificationLevels = ['NONE', 'LOW', 'MEDIUM', 'HIGH', 'VERY_HIGH'];\n\n/**\n * An error encountered while performing an API request. Here are the potential errors:\n * * UNKNOWN_ACCOUNT\n * * UNKNOWN_APPLICATION\n * * UNKNOWN_CHANNEL\n * * UNKNOWN_GUILD\n * * UNKNOWN_INTEGRATION\n * * UNKNOWN_INVITE\n * * UNKNOWN_MEMBER\n * * UNKNOWN_MESSAGE\n * * UNKNOWN_OVERWRITE\n * * UNKNOWN_PROVIDER\n * * UNKNOWN_ROLE\n * * UNKNOWN_TOKEN\n * * UNKNOWN_USER\n * * UNKNOWN_EMOJI\n * * UNKNOWN_WEBHOOK\n * * UNKNOWN_BAN\n * * UNKNOWN_GUILD_TEMPLATE\n * * BOT_PROHIBITED_ENDPOINT\n * * BOT_ONLY_ENDPOINT\n * * CHANNEL_HIT_WRITE_RATELIMIT\n * * MAXIMUM_GUILDS\n * * MAXIMUM_FRIENDS\n * * MAXIMUM_PINS\n * * MAXIMUM_ROLES\n * * MAXIMUM_WEBHOOKS\n * * MAXIMUM_REACTIONS\n * * MAXIMUM_CHANNELS\n * * MAXIMUM_ATTACHMENTS\n * * MAXIMUM_INVITES\n * * GUILD_ALREADY_HAS_TEMPLATE\n * * UNAUTHORIZED\n * * ACCOUNT_VERIFICATION_REQUIRED\n * * REQUEST_ENTITY_TOO_LARGE\n * * FEATURE_TEMPORARILY_DISABLED\n * * USER_BANNED\n * * ALREADY_CROSSPOSTED\n * * MISSING_ACCESS\n * * INVALID_ACCOUNT_TYPE\n * * CANNOT_EXECUTE_ON_DM\n * * EMBED_DISABLED\n * * CANNOT_EDIT_MESSAGE_BY_OTHER\n * * CANNOT_SEND_EMPTY_MESSAGE\n * * CANNOT_MESSAGE_USER\n * * CANNOT_SEND_MESSAGES_IN_VOICE_CHANNEL\n * * CHANNEL_VERIFICATION_LEVEL_TOO_HIGH\n * * OAUTH2_APPLICATION_BOT_ABSENT\n * * MAXIMUM_OAUTH2_APPLICATIONS\n * * INVALID_OAUTH_STATE\n * * MISSING_PERMISSIONS\n * * INVALID_AUTHENTICATION_TOKEN\n * * NOTE_TOO_LONG\n * * INVALID_BULK_DELETE_QUANTITY\n * * CANNOT_PIN_MESSAGE_IN_OTHER_CHANNEL\n * * INVALID_OR_TAKEN_INVITE_CODE\n * * CANNOT_EXECUTE_ON_SYSTEM_MESSAGE\n * * INVALID_OAUTH_TOKEN\n * * BULK_DELETE_MESSAGE_TOO_OLD\n * * INVALID_FORM_BODY\n * * INVITE_ACCEPTED_TO_GUILD_NOT_CONTAINING_BOT\n * * INVALID_API_VERSION\n * * CANNOT_DELETE_COMMUNITY_REQUIRED_CHANNEL\n * * REACTION_BLOCKED\n * * RESOURCE_OVERLOADED\n * @typedef {string} APIError\n */\nexports.APIErrors = {\n  UNKNOWN_ACCOUNT: 10001,\n  UNKNOWN_APPLICATION: 10002,\n  UNKNOWN_CHANNEL: 10003,\n  UNKNOWN_GUILD: 10004,\n  UNKNOWN_INTEGRATION: 10005,\n  UNKNOWN_INVITE: 10006,\n  UNKNOWN_MEMBER: 10007,\n  UNKNOWN_MESSAGE: 10008,\n  UNKNOWN_OVERWRITE: 10009,\n  UNKNOWN_PROVIDER: 10010,\n  UNKNOWN_ROLE: 10011,\n  UNKNOWN_TOKEN: 10012,\n  UNKNOWN_USER: 10013,\n  UNKNOWN_EMOJI: 10014,\n  UNKNOWN_WEBHOOK: 10015,\n  UNKNOWN_BAN: 10026,\n  UNKNOWN_GUILD_TEMPLATE: 10057,\n  BOT_PROHIBITED_ENDPOINT: 20001,\n  BOT_ONLY_ENDPOINT: 20002,\n  CHANNEL_HIT_WRITE_RATELIMIT: 20028,\n  MAXIMUM_GUILDS: 30001,\n  MAXIMUM_FRIENDS: 30002,\n  MAXIMUM_PINS: 30003,\n  MAXIMUM_ROLES: 30005,\n  MAXIMUM_WEBHOOKS: 30007,\n  MAXIMUM_REACTIONS: 30010,\n  MAXIMUM_CHANNELS: 30013,\n  MAXIMUM_ATTACHMENTS: 30015,\n  MAXIMUM_INVITES: 30016,\n  GUILD_ALREADY_HAS_TEMPLATE: 30031,\n  UNAUTHORIZED: 40001,\n  ACCOUNT_VERIFICATION_REQUIRED: 40002,\n  REQUEST_ENTITY_TOO_LARGE: 40005,\n  FEATURE_TEMPORARILY_DISABLED: 40006,\n  USER_BANNED: 40007,\n  ALREADY_CROSSPOSTED: 40033,\n  MISSING_ACCESS: 50001,\n  INVALID_ACCOUNT_TYPE: 50002,\n  CANNOT_EXECUTE_ON_DM: 50003,\n  EMBED_DISABLED: 50004,\n  CANNOT_EDIT_MESSAGE_BY_OTHER: 50005,\n  CANNOT_SEND_EMPTY_MESSAGE: 50006,\n  CANNOT_MESSAGE_USER: 50007,\n  CANNOT_SEND_MESSAGES_IN_VOICE_CHANNEL: 50008,\n  CHANNEL_VERIFICATION_LEVEL_TOO_HIGH: 50009,\n  OAUTH2_APPLICATION_BOT_ABSENT: 50010,\n  MAXIMUM_OAUTH2_APPLICATIONS: 50011,\n  INVALID_OAUTH_STATE: 50012,\n  MISSING_PERMISSIONS: 50013,\n  INVALID_AUTHENTICATION_TOKEN: 50014,\n  NOTE_TOO_LONG: 50015,\n  INVALID_BULK_DELETE_QUANTITY: 50016,\n  CANNOT_PIN_MESSAGE_IN_OTHER_CHANNEL: 50019,\n  INVALID_OR_TAKEN_INVITE_CODE: 50020,\n  CANNOT_EXECUTE_ON_SYSTEM_MESSAGE: 50021,\n  INVALID_OAUTH_TOKEN: 50025,\n  BULK_DELETE_MESSAGE_TOO_OLD: 50034,\n  INVALID_FORM_BODY: 50035,\n  INVITE_ACCEPTED_TO_GUILD_NOT_CONTAINING_BOT: 50036,\n  INVALID_API_VERSION: 50041,\n  CANNOT_DELETE_COMMUNITY_REQUIRED_CHANNEL: 50074,\n  REACTION_BLOCKED: 90001,\n  RESOURCE_OVERLOADED: 130000\n};\n\n/**\n * The value set for a guild's default message notifications, e.g. `ALL`. Here are the available types:\n * * ALL\n * * MENTIONS\n * @typedef {string} DefaultMessageNotifications\n */\nexports.DefaultMessageNotifications = ['ALL', 'MENTIONS'];\n\n/**\n * The value set for a team members's membership state:\n * * INVITED\n * * ACCEPTED\n * @typedef {string} MembershipStates\n */\nexports.MembershipStates = [\n// They start at 1\nnull, 'INVITED', 'ACCEPTED'];\n\n/**\n * The value set for a webhook's type:\n * * Incoming\n * * Channel Follower\n * @typedef {string} WebhookTypes\n */\nexports.WebhookTypes = [\n// They start at 1\nnull, 'Incoming', 'Channel Follower'];\nfunction keyMirror(arr) {\n  let tmp = Object.create(null);\n  for (const value of arr) tmp[value] = value;\n  return tmp;\n}","map":{"version":3,"names":["Package","exports","require","Error","RangeError","browser","window","DefaultOptions","shardCount","messageCacheMaxSize","messageCacheLifetime","messageSweepInterval","messageEditHistoryMaxSize","fetchAllMembers","disableMentions","partials","restWsBridgeTimeout","restRequestTimeout","retryLimit","restTimeOffset","restSweepInterval","presence","ws","large_threshold","compress","properties","$os","process","platform","$browser","$device","version","http","api","cdn","invite","template","UserAgent","homepage","split","WSCodes","AllowedImageFormats","AllowedImageSizes","Array","from","length","e","i","makeImageUrl","root","format","size","includes","Endpoints","CDN","Emoji","emojiID","Asset","name","DefaultAvatar","discriminator","Avatar","userID","hash","dynamic","startsWith","Banner","guildID","Icon","AppIcon","clientID","AppAsset","GDMIcon","channelID","Splash","DiscoverySplash","TeamIcon","teamID","code","botGateway","Status","READY","CONNECTING","RECONNECTING","IDLE","NEARLY","DISCONNECTED","WAITING_FOR_GUILDS","IDENTIFYING","RESUMING","VoiceStatus","CONNECTED","AUTHENTICATING","OPCodes","DISPATCH","HEARTBEAT","IDENTIFY","STATUS_UPDATE","VOICE_STATE_UPDATE","VOICE_GUILD_PING","RESUME","RECONNECT","REQUEST_GUILD_MEMBERS","INVALID_SESSION","HELLO","HEARTBEAT_ACK","VoiceOPCodes","SELECT_PROTOCOL","SESSION_DESCRIPTION","SPEAKING","CLIENT_CONNECT","CLIENT_DISCONNECT","Events","RATE_LIMIT","CLIENT_READY","GUILD_CREATE","GUILD_DELETE","GUILD_UPDATE","GUILD_UNAVAILABLE","GUILD_AVAILABLE","GUILD_MEMBER_ADD","GUILD_MEMBER_REMOVE","GUILD_MEMBER_UPDATE","GUILD_MEMBER_AVAILABLE","GUILD_MEMBER_SPEAKING","GUILD_MEMBERS_CHUNK","GUILD_INTEGRATIONS_UPDATE","GUILD_ROLE_CREATE","GUILD_ROLE_DELETE","INVITE_CREATE","INVITE_DELETE","GUILD_ROLE_UPDATE","GUILD_EMOJI_CREATE","GUILD_EMOJI_DELETE","GUILD_EMOJI_UPDATE","GUILD_BAN_ADD","GUILD_BAN_REMOVE","CHANNEL_CREATE","CHANNEL_DELETE","CHANNEL_UPDATE","CHANNEL_PINS_UPDATE","MESSAGE_CREATE","MESSAGE_DELETE","MESSAGE_UPDATE","MESSAGE_BULK_DELETE","MESSAGE_REACTION_ADD","MESSAGE_REACTION_REMOVE","MESSAGE_REACTION_REMOVE_ALL","MESSAGE_REACTION_REMOVE_EMOJI","USER_UPDATE","PRESENCE_UPDATE","VOICE_SERVER_UPDATE","VOICE_BROADCAST_SUBSCRIBE","VOICE_BROADCAST_UNSUBSCRIBE","TYPING_START","TYPING_STOP","WEBHOOKS_UPDATE","ERROR","WARN","DEBUG","SHARD_DISCONNECT","SHARD_ERROR","SHARD_RECONNECTING","SHARD_READY","SHARD_RESUME","INVALIDATED","RAW","ShardEvents","CLOSE","DESTROYED","RESUMED","ALL_READY","PartialTypes","keyMirror","WSEvents","MessageTypes","ActivityTypes","ChannelTypes","TEXT","DM","VOICE","GROUP","CATEGORY","NEWS","STORE","ClientApplicationAssetTypes","SMALL","BIG","Colors","DEFAULT","WHITE","AQUA","GREEN","BLUE","YELLOW","PURPLE","LUMINOUS_VIVID_PINK","GOLD","ORANGE","RED","GREY","NAVY","DARK_AQUA","DARK_GREEN","DARK_BLUE","DARK_PURPLE","DARK_VIVID_PINK","DARK_GOLD","DARK_ORANGE","DARK_RED","DARK_GREY","DARKER_GREY","LIGHT_GREY","DARK_NAVY","BLURPLE","GREYPLE","DARK_BUT_NOT_BLACK","NOT_QUITE_BLACK","ExplicitContentFilterLevels","VerificationLevels","APIErrors","UNKNOWN_ACCOUNT","UNKNOWN_APPLICATION","UNKNOWN_CHANNEL","UNKNOWN_GUILD","UNKNOWN_INTEGRATION","UNKNOWN_INVITE","UNKNOWN_MEMBER","UNKNOWN_MESSAGE","UNKNOWN_OVERWRITE","UNKNOWN_PROVIDER","UNKNOWN_ROLE","UNKNOWN_TOKEN","UNKNOWN_USER","UNKNOWN_EMOJI","UNKNOWN_WEBHOOK","UNKNOWN_BAN","UNKNOWN_GUILD_TEMPLATE","BOT_PROHIBITED_ENDPOINT","BOT_ONLY_ENDPOINT","CHANNEL_HIT_WRITE_RATELIMIT","MAXIMUM_GUILDS","MAXIMUM_FRIENDS","MAXIMUM_PINS","MAXIMUM_ROLES","MAXIMUM_WEBHOOKS","MAXIMUM_REACTIONS","MAXIMUM_CHANNELS","MAXIMUM_ATTACHMENTS","MAXIMUM_INVITES","GUILD_ALREADY_HAS_TEMPLATE","UNAUTHORIZED","ACCOUNT_VERIFICATION_REQUIRED","REQUEST_ENTITY_TOO_LARGE","FEATURE_TEMPORARILY_DISABLED","USER_BANNED","ALREADY_CROSSPOSTED","MISSING_ACCESS","INVALID_ACCOUNT_TYPE","CANNOT_EXECUTE_ON_DM","EMBED_DISABLED","CANNOT_EDIT_MESSAGE_BY_OTHER","CANNOT_SEND_EMPTY_MESSAGE","CANNOT_MESSAGE_USER","CANNOT_SEND_MESSAGES_IN_VOICE_CHANNEL","CHANNEL_VERIFICATION_LEVEL_TOO_HIGH","OAUTH2_APPLICATION_BOT_ABSENT","MAXIMUM_OAUTH2_APPLICATIONS","INVALID_OAUTH_STATE","MISSING_PERMISSIONS","INVALID_AUTHENTICATION_TOKEN","NOTE_TOO_LONG","INVALID_BULK_DELETE_QUANTITY","CANNOT_PIN_MESSAGE_IN_OTHER_CHANNEL","INVALID_OR_TAKEN_INVITE_CODE","CANNOT_EXECUTE_ON_SYSTEM_MESSAGE","INVALID_OAUTH_TOKEN","BULK_DELETE_MESSAGE_TOO_OLD","INVALID_FORM_BODY","INVITE_ACCEPTED_TO_GUILD_NOT_CONTAINING_BOT","INVALID_API_VERSION","CANNOT_DELETE_COMMUNITY_REQUIRED_CHANNEL","REACTION_BLOCKED","RESOURCE_OVERLOADED","DefaultMessageNotifications","MembershipStates","WebhookTypes","arr","tmp","Object","create","value"],"sources":["/Users/jessegill/node_modules/discord.js/src/util/Constants.js"],"sourcesContent":["'use strict';\n\nconst Package = (exports.Package = require('../../package.json'));\nconst { Error, RangeError } = require('../errors');\nconst browser = (exports.browser = typeof window !== 'undefined');\n\n/**\n * Options for a client.\n * @typedef {Object} ClientOptions\n * @property {number|number[]|string} [shards] ID of the shard to run, or an array of shard IDs. If not specified,\n * the client will spawn {@link ClientOptions#shardCount} shards. If set to `auto`, it will fetch the\n * recommended amount of shards from Discord and spawn that amount\n * @property {number} [shardCount=1] The total amount of shards used by all processes of this bot\n * (e.g. recommended shard count, shard count of the ShardingManager)\n * @property {number} [messageCacheMaxSize=200] Maximum number of messages to cache per channel\n * (-1 or Infinity for unlimited - don't do this without message sweeping, otherwise memory usage will climb\n * indefinitely)\n * @property {number} [messageCacheLifetime=0] How long a message should stay in the cache until it is considered\n * sweepable (in seconds, 0 for forever)\n * @property {number} [messageSweepInterval=0] How frequently to remove messages from the cache that are older than\n * the message cache lifetime (in seconds, 0 for never)\n * @property {number} [messageEditHistoryMaxSize=-1] Maximum number of previous versions to hold for an edited message\n * (-1 or Infinity for unlimited - don't do this without sweeping, otherwise memory usage may climb indefinitely.)\n * @property {boolean} [fetchAllMembers=false] Whether to cache all guild members and users upon startup, as well as\n * upon joining a guild (should be avoided whenever possible)\n * @property {DisableMentionType} [disableMentions='none'] Default value for {@link MessageOptions#disableMentions}\n * @property {MessageMentionOptions} [allowedMentions] Default value for {@link MessageOptions#allowedMentions}\n * @property {PartialType[]} [partials] Structures allowed to be partial. This means events can be emitted even when\n * they're missing all the data for a particular structure. See the \"Partials\" topic listed in the sidebar for some\n * important usage information, as partials require you to put checks in place when handling data.\n * @property {number} [restWsBridgeTimeout=5000] Maximum time permitted between REST responses and their\n * corresponding websocket events\n * @property {number} [restTimeOffset=500] Extra time in milliseconds to wait before continuing to make REST\n * requests (higher values will reduce rate-limiting errors on bad connections)\n * @property {number} [restRequestTimeout=15000] Time to wait before cancelling a REST request, in milliseconds\n * @property {number} [restSweepInterval=60] How frequently to delete inactive request buckets, in seconds\n * (or 0 for never)\n * @property {number} [retryLimit=1] How many times to retry on 5XX errors (Infinity for indefinite amount of retries)\n * @property {PresenceData} [presence] Presence data to use upon login\n * @property {WebsocketOptions} [ws] Options for the WebSocket\n * @property {HTTPOptions} [http] HTTP options\n */\nexports.DefaultOptions = {\n  shardCount: 1,\n  messageCacheMaxSize: 200,\n  messageCacheLifetime: 0,\n  messageSweepInterval: 0,\n  messageEditHistoryMaxSize: -1,\n  fetchAllMembers: false,\n  disableMentions: 'none',\n  partials: [],\n  restWsBridgeTimeout: 5000,\n  restRequestTimeout: 15000,\n  retryLimit: 1,\n  restTimeOffset: 500,\n  restSweepInterval: 60,\n  presence: {},\n\n  /**\n   * WebSocket options (these are left as snake_case to match the API)\n   * @typedef {Object} WebsocketOptions\n   * @property {number} [large_threshold=50] Number of members in a guild after which offline users will no longer be\n   * sent in the initial guild member list, must be between 50 and 250\n   * @property {IntentsResolvable} [intents] Intents to enable for this connection\n   */\n  ws: {\n    large_threshold: 50,\n    compress: false,\n    properties: {\n      $os: browser ? 'browser' : process.platform,\n      $browser: 'discord.js',\n      $device: 'discord.js',\n    },\n    version: 6,\n  },\n\n  /**\n   * HTTP options\n   * @typedef {Object} HTTPOptions\n   * @property {number} [version=7] API version to use\n   * @property {string} [api='https://discord.com/api'] Base url of the API\n   * @property {string} [cdn='https://cdn.discordapp.com'] Base url of the CDN\n   * @property {string} [invite='https://discord.gg'] Base url of invites\n   * @property {string} [template='https://discord.new'] Base url of templates\n   */\n  http: {\n    version: 7,\n    api: 'https://discord.com/api',\n    cdn: 'https://cdn.discordapp.com',\n    invite: 'https://discord.gg',\n    template: 'https://discord.new',\n  },\n};\n\nexports.UserAgent = browser\n  ? null\n  : `DiscordBot (${Package.homepage.split('#')[0]}, ${Package.version}) Node.js/${process.version}`;\n\nexports.WSCodes = {\n  1000: 'WS_CLOSE_REQUESTED',\n  4004: 'TOKEN_INVALID',\n  4010: 'SHARDING_INVALID',\n  4011: 'SHARDING_REQUIRED',\n  4013: 'INVALID_INTENTS',\n  4014: 'DISALLOWED_INTENTS',\n};\n\nconst AllowedImageFormats = ['webp', 'png', 'jpg', 'jpeg', 'gif'];\n\nconst AllowedImageSizes = Array.from({ length: 9 }, (e, i) => 2 ** (i + 4));\n\nfunction makeImageUrl(root, { format = 'webp', size } = {}) {\n  if (format && !AllowedImageFormats.includes(format)) throw new Error('IMAGE_FORMAT', format);\n  if (size && !AllowedImageSizes.includes(size)) throw new RangeError('IMAGE_SIZE', size);\n  return `${root}.${format}${size ? `?size=${size}` : ''}`;\n}\n/**\n * Options for Image URLs.\n * @typedef {Object} ImageURLOptions\n * @property {string} [format] One of `webp`, `png`, `jpg`, `jpeg`, `gif`. If no format is provided,\n * defaults to `webp`.\n * @property {boolean} [dynamic] If true, the format will dynamically change to `gif` for\n * animated avatars; the default is false.\n * @property {number} [size] One of `16`, `32`, `64`, `128`, `256`, `512`, `1024`, `2048`, `4096`\n */\n\nexports.Endpoints = {\n  CDN(root) {\n    return {\n      Emoji: (emojiID, format = 'png') => `${root}/emojis/${emojiID}.${format}`,\n      Asset: name => `${root}/assets/${name}`,\n      DefaultAvatar: discriminator => `${root}/embed/avatars/${discriminator}.png`,\n      Avatar: (userID, hash, format = 'webp', size, dynamic = false) => {\n        if (dynamic) format = hash.startsWith('a_') ? 'gif' : format;\n        return makeImageUrl(`${root}/avatars/${userID}/${hash}`, { format, size });\n      },\n      Banner: (guildID, hash, format = 'webp', size) =>\n        makeImageUrl(`${root}/banners/${guildID}/${hash}`, { format, size }),\n      Icon: (guildID, hash, format = 'webp', size, dynamic = false) => {\n        if (dynamic) format = hash.startsWith('a_') ? 'gif' : format;\n        return makeImageUrl(`${root}/icons/${guildID}/${hash}`, { format, size });\n      },\n      AppIcon: (clientID, hash, { format = 'webp', size } = {}) =>\n        makeImageUrl(`${root}/app-icons/${clientID}/${hash}`, { size, format }),\n      AppAsset: (clientID, hash, { format = 'webp', size } = {}) =>\n        makeImageUrl(`${root}/app-assets/${clientID}/${hash}`, { size, format }),\n      GDMIcon: (channelID, hash, format = 'webp', size) =>\n        makeImageUrl(`${root}/channel-icons/${channelID}/${hash}`, { size, format }),\n      Splash: (guildID, hash, format = 'webp', size) =>\n        makeImageUrl(`${root}/splashes/${guildID}/${hash}`, { size, format }),\n      DiscoverySplash: (guildID, hash, format = 'webp', size) =>\n        makeImageUrl(`${root}/discovery-splashes/${guildID}/${hash}`, { size, format }),\n      TeamIcon: (teamID, hash, { format = 'webp', size } = {}) =>\n        makeImageUrl(`${root}/team-icons/${teamID}/${hash}`, { size, format }),\n    };\n  },\n  invite: (root, code) => `${root}/${code}`,\n  botGateway: '/gateway/bot',\n};\n\n/**\n * The current status of the client. Here are the available statuses:\n * * READY: 0\n * * CONNECTING: 1\n * * RECONNECTING: 2\n * * IDLE: 3\n * * NEARLY: 4\n * * DISCONNECTED: 5\n * * WAITING_FOR_GUILDS: 6\n * * IDENTIFYING: 7\n * * RESUMING: 8\n * @typedef {number} Status\n */\nexports.Status = {\n  READY: 0,\n  CONNECTING: 1,\n  RECONNECTING: 2,\n  IDLE: 3,\n  NEARLY: 4,\n  DISCONNECTED: 5,\n  WAITING_FOR_GUILDS: 6,\n  IDENTIFYING: 7,\n  RESUMING: 8,\n};\n\n/**\n * The current status of a voice connection. Here are the available statuses:\n * * CONNECTED: 0\n * * CONNECTING: 1\n * * AUTHENTICATING: 2\n * * RECONNECTING: 3\n * * DISCONNECTED: 4\n * @typedef {number} VoiceStatus\n */\nexports.VoiceStatus = {\n  CONNECTED: 0,\n  CONNECTING: 1,\n  AUTHENTICATING: 2,\n  RECONNECTING: 3,\n  DISCONNECTED: 4,\n};\n\nexports.OPCodes = {\n  DISPATCH: 0,\n  HEARTBEAT: 1,\n  IDENTIFY: 2,\n  STATUS_UPDATE: 3,\n  VOICE_STATE_UPDATE: 4,\n  VOICE_GUILD_PING: 5,\n  RESUME: 6,\n  RECONNECT: 7,\n  REQUEST_GUILD_MEMBERS: 8,\n  INVALID_SESSION: 9,\n  HELLO: 10,\n  HEARTBEAT_ACK: 11,\n};\n\nexports.VoiceOPCodes = {\n  IDENTIFY: 0,\n  SELECT_PROTOCOL: 1,\n  READY: 2,\n  HEARTBEAT: 3,\n  SESSION_DESCRIPTION: 4,\n  SPEAKING: 5,\n  HELLO: 8,\n  CLIENT_CONNECT: 12,\n  CLIENT_DISCONNECT: 13,\n};\n\nexports.Events = {\n  RATE_LIMIT: 'rateLimit',\n  CLIENT_READY: 'ready',\n  GUILD_CREATE: 'guildCreate',\n  GUILD_DELETE: 'guildDelete',\n  GUILD_UPDATE: 'guildUpdate',\n  GUILD_UNAVAILABLE: 'guildUnavailable',\n  GUILD_AVAILABLE: 'guildAvailable',\n  GUILD_MEMBER_ADD: 'guildMemberAdd',\n  GUILD_MEMBER_REMOVE: 'guildMemberRemove',\n  GUILD_MEMBER_UPDATE: 'guildMemberUpdate',\n  GUILD_MEMBER_AVAILABLE: 'guildMemberAvailable',\n  GUILD_MEMBER_SPEAKING: 'guildMemberSpeaking',\n  GUILD_MEMBERS_CHUNK: 'guildMembersChunk',\n  GUILD_INTEGRATIONS_UPDATE: 'guildIntegrationsUpdate',\n  GUILD_ROLE_CREATE: 'roleCreate',\n  GUILD_ROLE_DELETE: 'roleDelete',\n  INVITE_CREATE: 'inviteCreate',\n  INVITE_DELETE: 'inviteDelete',\n  GUILD_ROLE_UPDATE: 'roleUpdate',\n  GUILD_EMOJI_CREATE: 'emojiCreate',\n  GUILD_EMOJI_DELETE: 'emojiDelete',\n  GUILD_EMOJI_UPDATE: 'emojiUpdate',\n  GUILD_BAN_ADD: 'guildBanAdd',\n  GUILD_BAN_REMOVE: 'guildBanRemove',\n  CHANNEL_CREATE: 'channelCreate',\n  CHANNEL_DELETE: 'channelDelete',\n  CHANNEL_UPDATE: 'channelUpdate',\n  CHANNEL_PINS_UPDATE: 'channelPinsUpdate',\n  MESSAGE_CREATE: 'message',\n  MESSAGE_DELETE: 'messageDelete',\n  MESSAGE_UPDATE: 'messageUpdate',\n  MESSAGE_BULK_DELETE: 'messageDeleteBulk',\n  MESSAGE_REACTION_ADD: 'messageReactionAdd',\n  MESSAGE_REACTION_REMOVE: 'messageReactionRemove',\n  MESSAGE_REACTION_REMOVE_ALL: 'messageReactionRemoveAll',\n  MESSAGE_REACTION_REMOVE_EMOJI: 'messageReactionRemoveEmoji',\n  USER_UPDATE: 'userUpdate',\n  PRESENCE_UPDATE: 'presenceUpdate',\n  VOICE_SERVER_UPDATE: 'voiceServerUpdate',\n  VOICE_STATE_UPDATE: 'voiceStateUpdate',\n  VOICE_BROADCAST_SUBSCRIBE: 'subscribe',\n  VOICE_BROADCAST_UNSUBSCRIBE: 'unsubscribe',\n  TYPING_START: 'typingStart',\n  TYPING_STOP: 'typingStop',\n  WEBHOOKS_UPDATE: 'webhookUpdate',\n  ERROR: 'error',\n  WARN: 'warn',\n  DEBUG: 'debug',\n  SHARD_DISCONNECT: 'shardDisconnect',\n  SHARD_ERROR: 'shardError',\n  SHARD_RECONNECTING: 'shardReconnecting',\n  SHARD_READY: 'shardReady',\n  SHARD_RESUME: 'shardResume',\n  INVALIDATED: 'invalidated',\n  RAW: 'raw',\n};\n\nexports.ShardEvents = {\n  CLOSE: 'close',\n  DESTROYED: 'destroyed',\n  INVALID_SESSION: 'invalidSession',\n  READY: 'ready',\n  RESUMED: 'resumed',\n  ALL_READY: 'allReady',\n};\n\n/**\n * The type of Structure allowed to be a partial:\n * * USER\n * * CHANNEL (only affects DMChannels)\n * * GUILD_MEMBER\n * * MESSAGE\n * * REACTION\n * <warn>Partials require you to put checks in place when handling data, read the Partials topic listed in the\n * sidebar for more information.</warn>\n * @typedef {string} PartialType\n */\nexports.PartialTypes = keyMirror(['USER', 'CHANNEL', 'GUILD_MEMBER', 'MESSAGE', 'REACTION']);\n\n/**\n * The type of a websocket message event, e.g. `MESSAGE_CREATE`. Here are the available events:\n * * READY\n * * RESUMED\n * * GUILD_CREATE\n * * GUILD_DELETE\n * * GUILD_UPDATE\n * * INVITE_CREATE\n * * INVITE_DELETE\n * * GUILD_MEMBER_ADD\n * * GUILD_MEMBER_REMOVE\n * * GUILD_MEMBER_UPDATE\n * * GUILD_MEMBERS_CHUNK\n * * GUILD_INTEGRATIONS_UPDATE\n * * GUILD_ROLE_CREATE\n * * GUILD_ROLE_DELETE\n * * GUILD_ROLE_UPDATE\n * * GUILD_BAN_ADD\n * * GUILD_BAN_REMOVE\n * * GUILD_EMOJIS_UPDATE\n * * CHANNEL_CREATE\n * * CHANNEL_DELETE\n * * CHANNEL_UPDATE\n * * CHANNEL_PINS_UPDATE\n * * MESSAGE_CREATE\n * * MESSAGE_DELETE\n * * MESSAGE_UPDATE\n * * MESSAGE_DELETE_BULK\n * * MESSAGE_REACTION_ADD\n * * MESSAGE_REACTION_REMOVE\n * * MESSAGE_REACTION_REMOVE_ALL\n * * MESSAGE_REACTION_REMOVE_EMOJI\n * * USER_UPDATE\n * * PRESENCE_UPDATE\n * * TYPING_START\n * * VOICE_STATE_UPDATE\n * * VOICE_SERVER_UPDATE\n * * WEBHOOKS_UPDATE\n * @typedef {string} WSEventType\n */\nexports.WSEvents = keyMirror([\n  'READY',\n  'RESUMED',\n  'GUILD_CREATE',\n  'GUILD_DELETE',\n  'GUILD_UPDATE',\n  'INVITE_CREATE',\n  'INVITE_DELETE',\n  'GUILD_MEMBER_ADD',\n  'GUILD_MEMBER_REMOVE',\n  'GUILD_MEMBER_UPDATE',\n  'GUILD_MEMBERS_CHUNK',\n  'GUILD_INTEGRATIONS_UPDATE',\n  'GUILD_ROLE_CREATE',\n  'GUILD_ROLE_DELETE',\n  'GUILD_ROLE_UPDATE',\n  'GUILD_BAN_ADD',\n  'GUILD_BAN_REMOVE',\n  'GUILD_EMOJIS_UPDATE',\n  'CHANNEL_CREATE',\n  'CHANNEL_DELETE',\n  'CHANNEL_UPDATE',\n  'CHANNEL_PINS_UPDATE',\n  'MESSAGE_CREATE',\n  'MESSAGE_DELETE',\n  'MESSAGE_UPDATE',\n  'MESSAGE_DELETE_BULK',\n  'MESSAGE_REACTION_ADD',\n  'MESSAGE_REACTION_REMOVE',\n  'MESSAGE_REACTION_REMOVE_ALL',\n  'MESSAGE_REACTION_REMOVE_EMOJI',\n  'USER_UPDATE',\n  'PRESENCE_UPDATE',\n  'TYPING_START',\n  'VOICE_STATE_UPDATE',\n  'VOICE_SERVER_UPDATE',\n  'WEBHOOKS_UPDATE',\n]);\n\n/**\n * The type of a message, e.g. `DEFAULT`. Here are the available types:\n * * DEFAULT\n * * RECIPIENT_ADD\n * * RECIPIENT_REMOVE\n * * CALL\n * * CHANNEL_NAME_CHANGE\n * * CHANNEL_ICON_CHANGE\n * * PINS_ADD\n * * GUILD_MEMBER_JOIN\n * * USER_PREMIUM_GUILD_SUBSCRIPTION\n * * USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_1\n * * USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_2\n * * USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_3\n * * CHANNEL_FOLLOW_ADD\n * * GUILD_DISCOVERY_DISQUALIFIED\n * * GUILD_DISCOVERY_REQUALIFIED\n * @typedef {string} MessageType\n */\nexports.MessageTypes = [\n  'DEFAULT',\n  'RECIPIENT_ADD',\n  'RECIPIENT_REMOVE',\n  'CALL',\n  'CHANNEL_NAME_CHANGE',\n  'CHANNEL_ICON_CHANGE',\n  'PINS_ADD',\n  'GUILD_MEMBER_JOIN',\n  'USER_PREMIUM_GUILD_SUBSCRIPTION',\n  'USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_1',\n  'USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_2',\n  'USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_3',\n  'CHANNEL_FOLLOW_ADD',\n  null,\n  'GUILD_DISCOVERY_DISQUALIFIED',\n  'GUILD_DISCOVERY_REQUALIFIED',\n];\n\n/**\n * <info>Bots cannot set a `CUSTOM_STATUS`, it is only for custom statuses received from users</info>\n * The type of an activity of a users presence, e.g. `PLAYING`. Here are the available types:\n * * PLAYING\n * * STREAMING\n * * LISTENING\n * * WATCHING\n * * CUSTOM_STATUS\n * * COMPETING\n * @typedef {string} ActivityType\n */\nexports.ActivityTypes = ['PLAYING', 'STREAMING', 'LISTENING', 'WATCHING', 'CUSTOM_STATUS', 'COMPETING'];\n\nexports.ChannelTypes = {\n  TEXT: 0,\n  DM: 1,\n  VOICE: 2,\n  GROUP: 3,\n  CATEGORY: 4,\n  NEWS: 5,\n  STORE: 6,\n};\n\nexports.ClientApplicationAssetTypes = {\n  SMALL: 1,\n  BIG: 2,\n};\n\nexports.Colors = {\n  DEFAULT: 0x000000,\n  WHITE: 0xffffff,\n  AQUA: 0x1abc9c,\n  GREEN: 0x2ecc71,\n  BLUE: 0x3498db,\n  YELLOW: 0xffff00,\n  PURPLE: 0x9b59b6,\n  LUMINOUS_VIVID_PINK: 0xe91e63,\n  GOLD: 0xf1c40f,\n  ORANGE: 0xe67e22,\n  RED: 0xe74c3c,\n  GREY: 0x95a5a6,\n  NAVY: 0x34495e,\n  DARK_AQUA: 0x11806a,\n  DARK_GREEN: 0x1f8b4c,\n  DARK_BLUE: 0x206694,\n  DARK_PURPLE: 0x71368a,\n  DARK_VIVID_PINK: 0xad1457,\n  DARK_GOLD: 0xc27c0e,\n  DARK_ORANGE: 0xa84300,\n  DARK_RED: 0x992d22,\n  DARK_GREY: 0x979c9f,\n  DARKER_GREY: 0x7f8c8d,\n  LIGHT_GREY: 0xbcc0c0,\n  DARK_NAVY: 0x2c3e50,\n  BLURPLE: 0x7289da,\n  GREYPLE: 0x99aab5,\n  DARK_BUT_NOT_BLACK: 0x2c2f33,\n  NOT_QUITE_BLACK: 0x23272a,\n};\n\n/**\n * The value set for the explicit content filter levels for a guild:\n * * DISABLED\n * * MEMBERS_WITHOUT_ROLES\n * * ALL_MEMBERS\n * @typedef {string} ExplicitContentFilterLevel\n */\nexports.ExplicitContentFilterLevels = ['DISABLED', 'MEMBERS_WITHOUT_ROLES', 'ALL_MEMBERS'];\n\n/**\n * The value set for the verification levels for a guild:\n * * NONE\n * * LOW\n * * MEDIUM\n * * HIGH\n * * VERY_HIGH\n * @typedef {string} VerificationLevel\n */\nexports.VerificationLevels = ['NONE', 'LOW', 'MEDIUM', 'HIGH', 'VERY_HIGH'];\n\n/**\n * An error encountered while performing an API request. Here are the potential errors:\n * * UNKNOWN_ACCOUNT\n * * UNKNOWN_APPLICATION\n * * UNKNOWN_CHANNEL\n * * UNKNOWN_GUILD\n * * UNKNOWN_INTEGRATION\n * * UNKNOWN_INVITE\n * * UNKNOWN_MEMBER\n * * UNKNOWN_MESSAGE\n * * UNKNOWN_OVERWRITE\n * * UNKNOWN_PROVIDER\n * * UNKNOWN_ROLE\n * * UNKNOWN_TOKEN\n * * UNKNOWN_USER\n * * UNKNOWN_EMOJI\n * * UNKNOWN_WEBHOOK\n * * UNKNOWN_BAN\n * * UNKNOWN_GUILD_TEMPLATE\n * * BOT_PROHIBITED_ENDPOINT\n * * BOT_ONLY_ENDPOINT\n * * CHANNEL_HIT_WRITE_RATELIMIT\n * * MAXIMUM_GUILDS\n * * MAXIMUM_FRIENDS\n * * MAXIMUM_PINS\n * * MAXIMUM_ROLES\n * * MAXIMUM_WEBHOOKS\n * * MAXIMUM_REACTIONS\n * * MAXIMUM_CHANNELS\n * * MAXIMUM_ATTACHMENTS\n * * MAXIMUM_INVITES\n * * GUILD_ALREADY_HAS_TEMPLATE\n * * UNAUTHORIZED\n * * ACCOUNT_VERIFICATION_REQUIRED\n * * REQUEST_ENTITY_TOO_LARGE\n * * FEATURE_TEMPORARILY_DISABLED\n * * USER_BANNED\n * * ALREADY_CROSSPOSTED\n * * MISSING_ACCESS\n * * INVALID_ACCOUNT_TYPE\n * * CANNOT_EXECUTE_ON_DM\n * * EMBED_DISABLED\n * * CANNOT_EDIT_MESSAGE_BY_OTHER\n * * CANNOT_SEND_EMPTY_MESSAGE\n * * CANNOT_MESSAGE_USER\n * * CANNOT_SEND_MESSAGES_IN_VOICE_CHANNEL\n * * CHANNEL_VERIFICATION_LEVEL_TOO_HIGH\n * * OAUTH2_APPLICATION_BOT_ABSENT\n * * MAXIMUM_OAUTH2_APPLICATIONS\n * * INVALID_OAUTH_STATE\n * * MISSING_PERMISSIONS\n * * INVALID_AUTHENTICATION_TOKEN\n * * NOTE_TOO_LONG\n * * INVALID_BULK_DELETE_QUANTITY\n * * CANNOT_PIN_MESSAGE_IN_OTHER_CHANNEL\n * * INVALID_OR_TAKEN_INVITE_CODE\n * * CANNOT_EXECUTE_ON_SYSTEM_MESSAGE\n * * INVALID_OAUTH_TOKEN\n * * BULK_DELETE_MESSAGE_TOO_OLD\n * * INVALID_FORM_BODY\n * * INVITE_ACCEPTED_TO_GUILD_NOT_CONTAINING_BOT\n * * INVALID_API_VERSION\n * * CANNOT_DELETE_COMMUNITY_REQUIRED_CHANNEL\n * * REACTION_BLOCKED\n * * RESOURCE_OVERLOADED\n * @typedef {string} APIError\n */\nexports.APIErrors = {\n  UNKNOWN_ACCOUNT: 10001,\n  UNKNOWN_APPLICATION: 10002,\n  UNKNOWN_CHANNEL: 10003,\n  UNKNOWN_GUILD: 10004,\n  UNKNOWN_INTEGRATION: 10005,\n  UNKNOWN_INVITE: 10006,\n  UNKNOWN_MEMBER: 10007,\n  UNKNOWN_MESSAGE: 10008,\n  UNKNOWN_OVERWRITE: 10009,\n  UNKNOWN_PROVIDER: 10010,\n  UNKNOWN_ROLE: 10011,\n  UNKNOWN_TOKEN: 10012,\n  UNKNOWN_USER: 10013,\n  UNKNOWN_EMOJI: 10014,\n  UNKNOWN_WEBHOOK: 10015,\n  UNKNOWN_BAN: 10026,\n  UNKNOWN_GUILD_TEMPLATE: 10057,\n  BOT_PROHIBITED_ENDPOINT: 20001,\n  BOT_ONLY_ENDPOINT: 20002,\n  CHANNEL_HIT_WRITE_RATELIMIT: 20028,\n  MAXIMUM_GUILDS: 30001,\n  MAXIMUM_FRIENDS: 30002,\n  MAXIMUM_PINS: 30003,\n  MAXIMUM_ROLES: 30005,\n  MAXIMUM_WEBHOOKS: 30007,\n  MAXIMUM_REACTIONS: 30010,\n  MAXIMUM_CHANNELS: 30013,\n  MAXIMUM_ATTACHMENTS: 30015,\n  MAXIMUM_INVITES: 30016,\n  GUILD_ALREADY_HAS_TEMPLATE: 30031,\n  UNAUTHORIZED: 40001,\n  ACCOUNT_VERIFICATION_REQUIRED: 40002,\n  REQUEST_ENTITY_TOO_LARGE: 40005,\n  FEATURE_TEMPORARILY_DISABLED: 40006,\n  USER_BANNED: 40007,\n  ALREADY_CROSSPOSTED: 40033,\n  MISSING_ACCESS: 50001,\n  INVALID_ACCOUNT_TYPE: 50002,\n  CANNOT_EXECUTE_ON_DM: 50003,\n  EMBED_DISABLED: 50004,\n  CANNOT_EDIT_MESSAGE_BY_OTHER: 50005,\n  CANNOT_SEND_EMPTY_MESSAGE: 50006,\n  CANNOT_MESSAGE_USER: 50007,\n  CANNOT_SEND_MESSAGES_IN_VOICE_CHANNEL: 50008,\n  CHANNEL_VERIFICATION_LEVEL_TOO_HIGH: 50009,\n  OAUTH2_APPLICATION_BOT_ABSENT: 50010,\n  MAXIMUM_OAUTH2_APPLICATIONS: 50011,\n  INVALID_OAUTH_STATE: 50012,\n  MISSING_PERMISSIONS: 50013,\n  INVALID_AUTHENTICATION_TOKEN: 50014,\n  NOTE_TOO_LONG: 50015,\n  INVALID_BULK_DELETE_QUANTITY: 50016,\n  CANNOT_PIN_MESSAGE_IN_OTHER_CHANNEL: 50019,\n  INVALID_OR_TAKEN_INVITE_CODE: 50020,\n  CANNOT_EXECUTE_ON_SYSTEM_MESSAGE: 50021,\n  INVALID_OAUTH_TOKEN: 50025,\n  BULK_DELETE_MESSAGE_TOO_OLD: 50034,\n  INVALID_FORM_BODY: 50035,\n  INVITE_ACCEPTED_TO_GUILD_NOT_CONTAINING_BOT: 50036,\n  INVALID_API_VERSION: 50041,\n  CANNOT_DELETE_COMMUNITY_REQUIRED_CHANNEL: 50074,\n  REACTION_BLOCKED: 90001,\n  RESOURCE_OVERLOADED: 130000,\n};\n\n/**\n * The value set for a guild's default message notifications, e.g. `ALL`. Here are the available types:\n * * ALL\n * * MENTIONS\n * @typedef {string} DefaultMessageNotifications\n */\nexports.DefaultMessageNotifications = ['ALL', 'MENTIONS'];\n\n/**\n * The value set for a team members's membership state:\n * * INVITED\n * * ACCEPTED\n * @typedef {string} MembershipStates\n */\nexports.MembershipStates = [\n  // They start at 1\n  null,\n  'INVITED',\n  'ACCEPTED',\n];\n\n/**\n * The value set for a webhook's type:\n * * Incoming\n * * Channel Follower\n * @typedef {string} WebhookTypes\n */\nexports.WebhookTypes = [\n  // They start at 1\n  null,\n  'Incoming',\n  'Channel Follower',\n];\n\nfunction keyMirror(arr) {\n  let tmp = Object.create(null);\n  for (const value of arr) tmp[value] = value;\n  return tmp;\n}\n"],"mappings":"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AS,EAAE,cAAc,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;;AAE5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA5K,OAAO,CAAC6K,QAAQ,GAAGD,SAAS,CAAC,CAC3B,OAAO,EACP,SAAS,EACT,cAAc,EACd,cAAc,EACd,cAAc,EACd,eAAe,EACf,eAAe,EACf,kBAAkB,EAClB,qBAAqB,EACrB,qBAAqB,EACrB,qBAAqB,EACrB,2BAA2B,EAC3B,mBAAmB,EACnB,mBAAmB,EACnB,mBAAmB,EACnB,eAAe,EACf,kBAAkB,EAClB,qBAAqB,EACrB,gBAAgB,EAChB,gBAAgB,EAChB,gBAAgB,EAChB,qBAAqB,EACrB,gBAAgB,EAChB,gBAAgB,EAChB,gBAAgB,EAChB,qBAAqB,EACrB,sBAAsB,EACtB,yBAAyB,EACzB,6BAA6B,EAC7B,+BAA+B,EAC/B,aAAa,EACb,iBAAiB,EACjB,cAAc,EACd,oBAAoB,EACpB,qBAAqB,EACrB,iBAAiB,CAClB,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA5K,OAAO,CAAC8K,YAAY,GAAG,CACrB,SAAS,EACT,eAAe,EACf,kBAAkB,EAClB,MAAM,EACN,qBAAqB,EACrB,qBAAqB,EACrB,UAAU,EACV,mBAAmB,EACnB,iCAAiC,EACjC,wCAAwC,EACxC,wCAAwC,EACxC,wCAAwC,EACxC,oBAAoB,EACpB,IAAI,EACJ,8BAA8B,EAC9B,6BAA6B,CAC9B;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA9K,OAAO,CAAC+K,aAAa,GAAG,CAAC,SAAS,EAAE,WAAW,EAAE,WAAW,EAAE,UAAU,EAAE,eAAe,EAAE,WA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"},"metadata":{},"sourceType":"script","externalDependencies":[]}