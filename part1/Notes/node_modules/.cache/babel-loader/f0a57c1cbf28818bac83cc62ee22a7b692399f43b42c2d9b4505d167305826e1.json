{"ast":null,"code":"'use strict';\n\nconst Base = require('./Base');\nconst GuildPreviewEmoji = require('./GuildPreviewEmoji');\nconst Collection = require('../util/Collection');\n\n/**\n * Represents the data about the guild any bot can preview, connected to the specified guild.\n * @extends {Base}\n */\nclass GuildPreview extends Base {\n  constructor(client, data) {\n    super(client);\n    if (!data) return;\n    this._patch(data);\n  }\n\n  /**\n   * Builds the guild with the provided data.\n   * @param {*} data The raw data of the guild\n   * @private\n   */\n  _patch(data) {\n    /**\n     * The id of this guild\n     * @type {string}\n     */\n    this.id = data.id;\n\n    /**\n     * The name of this guild\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The icon of this guild\n     * @type {?string}\n     */\n    this.icon = data.icon;\n\n    /**\n     * The splash icon of this guild\n     * @type {?string}\n     */\n    this.splash = data.splash;\n\n    /**\n     * The discovery splash icon of this guild\n     * @type {?string}\n     */\n    this.discoverySplash = data.discovery_splash;\n\n    /**\n     * An array of enabled guild features\n     * @type {Features[]}\n     */\n    this.features = data.features;\n\n    /**\n     * The approximate count of members in this guild\n     * @type {number}\n     */\n    this.approximateMemberCount = data.approximate_member_count;\n\n    /**\n     * The approximate count of online members in this guild\n     * @type {number}\n     */\n    this.approximatePresenceCount = data.approximate_presence_count;\n\n    /**\n     * The description for this guild\n     * @type {?string}\n     */\n    this.description = data.description || null;\n    if (!this.emojis) {\n      /**\n       * Collection of emojis belonging to this guild\n       * @type {Collection<Snowflake, GuildPreviewEmoji>}\n       */\n      this.emojis = new Collection();\n    } else {\n      this.emojis.clear();\n    }\n    for (const emoji of data.emojis) {\n      this.emojis.set(emoji.id, new GuildPreviewEmoji(this.client, emoji, this));\n    }\n  }\n\n  /**\n   * The URL to this guild's splash.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  splashURL() {\n    let {\n      format,\n      size\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.splash) return null;\n    return this.client.rest.cdn.Splash(this.id, this.splash, format, size);\n  }\n\n  /**\n   * The URL to this guild's discovery splash.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  discoverySplashURL() {\n    let {\n      format,\n      size\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.discoverySplash) return null;\n    return this.client.rest.cdn.DiscoverySplash(this.id, this.discoverySplash, format, size);\n  }\n\n  /**\n   * The URL to this guild's icon.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  iconURL() {\n    let {\n      format,\n      size,\n      dynamic\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.icon) return null;\n    return this.client.rest.cdn.Icon(this.id, this.icon, format, size, dynamic);\n  }\n\n  /**\n   * Fetches this guild.\n   * @returns {Promise<GuildPreview>}\n   */\n  fetch() {\n    return this.client.api.guilds(this.id).preview.get().then(data => {\n      this._patch(data);\n      return this;\n    });\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the guild's name instead of the Guild object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from My Guild!\n   * console.log(`Hello from ${previewGuild}!`);\n   */\n  toString() {\n    return this.name;\n  }\n  toJSON() {\n    const json = super.toJSON();\n    json.iconURL = this.iconURL();\n    json.splashURL = this.splashURL();\n    return json;\n  }\n}\nmodule.exports = GuildPreview;","map":{"version":3,"names":["Base","require","GuildPreviewEmoji","Collection","GuildPreview","constructor","client","data","_patch","id","name","icon","splash","discoverySplash","discovery_splash","features","approximateMemberCount","approximate_member_count","approximatePresenceCount","approximate_presence_count","description","emojis","clear","emoji","set","splashURL","format","size","rest","cdn","Splash","discoverySplashURL","DiscoverySplash","iconURL","dynamic","Icon","fetch","api","guilds","preview","get","then","toString","toJSON","json","module","exports"],"sources":["/Users/jessegill/node_modules/discord.js/src/structures/GuildPreview.js"],"sourcesContent":["'use strict';\n\nconst Base = require('./Base');\nconst GuildPreviewEmoji = require('./GuildPreviewEmoji');\nconst Collection = require('../util/Collection');\n\n/**\n * Represents the data about the guild any bot can preview, connected to the specified guild.\n * @extends {Base}\n */\nclass GuildPreview extends Base {\n  constructor(client, data) {\n    super(client);\n\n    if (!data) return;\n\n    this._patch(data);\n  }\n\n  /**\n   * Builds the guild with the provided data.\n   * @param {*} data The raw data of the guild\n   * @private\n   */\n  _patch(data) {\n    /**\n     * The id of this guild\n     * @type {string}\n     */\n    this.id = data.id;\n\n    /**\n     * The name of this guild\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The icon of this guild\n     * @type {?string}\n     */\n    this.icon = data.icon;\n\n    /**\n     * The splash icon of this guild\n     * @type {?string}\n     */\n    this.splash = data.splash;\n\n    /**\n     * The discovery splash icon of this guild\n     * @type {?string}\n     */\n    this.discoverySplash = data.discovery_splash;\n\n    /**\n     * An array of enabled guild features\n     * @type {Features[]}\n     */\n    this.features = data.features;\n\n    /**\n     * The approximate count of members in this guild\n     * @type {number}\n     */\n    this.approximateMemberCount = data.approximate_member_count;\n\n    /**\n     * The approximate count of online members in this guild\n     * @type {number}\n     */\n    this.approximatePresenceCount = data.approximate_presence_count;\n\n    /**\n     * The description for this guild\n     * @type {?string}\n     */\n    this.description = data.description || null;\n\n    if (!this.emojis) {\n      /**\n       * Collection of emojis belonging to this guild\n       * @type {Collection<Snowflake, GuildPreviewEmoji>}\n       */\n      this.emojis = new Collection();\n    } else {\n      this.emojis.clear();\n    }\n    for (const emoji of data.emojis) {\n      this.emojis.set(emoji.id, new GuildPreviewEmoji(this.client, emoji, this));\n    }\n  }\n\n  /**\n   * The URL to this guild's splash.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  splashURL({ format, size } = {}) {\n    if (!this.splash) return null;\n    return this.client.rest.cdn.Splash(this.id, this.splash, format, size);\n  }\n\n  /**\n   * The URL to this guild's discovery splash.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  discoverySplashURL({ format, size } = {}) {\n    if (!this.discoverySplash) return null;\n    return this.client.rest.cdn.DiscoverySplash(this.id, this.discoverySplash, format, size);\n  }\n\n  /**\n   * The URL to this guild's icon.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  iconURL({ format, size, dynamic } = {}) {\n    if (!this.icon) return null;\n    return this.client.rest.cdn.Icon(this.id, this.icon, format, size, dynamic);\n  }\n\n  /**\n   * Fetches this guild.\n   * @returns {Promise<GuildPreview>}\n   */\n  fetch() {\n    return this.client.api\n      .guilds(this.id)\n      .preview.get()\n      .then(data => {\n        this._patch(data);\n        return this;\n      });\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the guild's name instead of the Guild object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from My Guild!\n   * console.log(`Hello from ${previewGuild}!`);\n   */\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    const json = super.toJSON();\n    json.iconURL = this.iconURL();\n    json.splashURL = this.splashURL();\n    return json;\n  }\n}\n\nmodule.exports = GuildPreview;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}