{"ast":null,"code":"'use strict';\n\nconst {\n  deprecate\n} = require('util');\nconst Base = require('./Base');\nconst GuildAuditLogs = require('./GuildAuditLogs');\nconst GuildPreview = require('./GuildPreview');\nconst GuildTemplate = require('./GuildTemplate');\nconst Integration = require('./Integration');\nconst Invite = require('./Invite');\nconst VoiceRegion = require('./VoiceRegion');\nconst Webhook = require('./Webhook');\nconst {\n  Error,\n  TypeError\n} = require('../errors');\nconst GuildChannelManager = require('../managers/GuildChannelManager');\nconst GuildEmojiManager = require('../managers/GuildEmojiManager');\nconst GuildMemberManager = require('../managers/GuildMemberManager');\nconst PresenceManager = require('../managers/PresenceManager');\nconst RoleManager = require('../managers/RoleManager');\nconst VoiceStateManager = require('../managers/VoiceStateManager');\nconst Collection = require('../util/Collection');\nconst {\n  browser,\n  ChannelTypes,\n  DefaultMessageNotifications,\n  PartialTypes,\n  VerificationLevels,\n  ExplicitContentFilterLevels\n} = require('../util/Constants');\nconst DataResolver = require('../util/DataResolver');\nconst Snowflake = require('../util/Snowflake');\nconst SystemChannelFlags = require('../util/SystemChannelFlags');\nconst Util = require('../util/Util');\n\n/**\n * Represents a guild (or a server) on Discord.\n * <info>It's recommended to see if a guild is available before performing operations or reading data from it. You can\n * check this with `guild.available`.</info>\n * @extends {Base}\n */\nclass Guild extends Base {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {Object} data The data for the guild\n   */\n  constructor(client, data) {\n    super(client);\n\n    /**\n     * A manager of the members belonging to this guild\n     * @type {GuildMemberManager}\n     */\n    this.members = new GuildMemberManager(this);\n\n    /**\n     * A manager of the channels belonging to this guild\n     * @type {GuildChannelManager}\n     */\n    this.channels = new GuildChannelManager(this);\n\n    /**\n     * A manager of the roles belonging to this guild\n     * @type {RoleManager}\n     */\n    this.roles = new RoleManager(this);\n\n    /**\n     * A manager of the presences belonging to this guild\n     * @type {PresenceManager}\n     */\n    this.presences = new PresenceManager(this.client);\n\n    /**\n     * A manager of the voice states of this guild\n     * @type {VoiceStateManager}\n     */\n    this.voiceStates = new VoiceStateManager(this);\n\n    /**\n     * Whether the bot has been removed from the guild\n     * @type {boolean}\n     */\n    this.deleted = false;\n    if (!data) return;\n    if (data.unavailable) {\n      /**\n       * Whether the guild is available to access. If it is not available, it indicates a server outage\n       * @type {boolean}\n       */\n      this.available = false;\n\n      /**\n       * The Unique ID of the guild, useful for comparisons\n       * @type {Snowflake}\n       */\n      this.id = data.id;\n    } else {\n      this._patch(data);\n      if (!data.channels) this.available = false;\n    }\n\n    /**\n     * The id of the shard this Guild belongs to.\n     * @type {number}\n     */\n    this.shardID = data.shardID;\n  }\n\n  /**\n   * The Shard this Guild belongs to.\n   * @type {WebSocketShard}\n   * @readonly\n   */\n  get shard() {\n    return this.client.ws.shards.get(this.shardID);\n  }\n\n  /**\n   * Sets up the guild.\n   * @param {*} data The raw data of the guild\n   * @private\n   */\n  _patch(data) {\n    /**\n     * The name of the guild\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The hash of the guild icon\n     * @type {?string}\n     */\n    this.icon = data.icon;\n\n    /**\n     * The hash of the guild invite splash image\n     * @type {?string}\n     */\n    this.splash = data.splash;\n\n    /**\n     * The hash of the guild discovery splash image\n     * @type {?string}\n     */\n    this.discoverySplash = data.discovery_splash;\n\n    /**\n     * The region the guild is located in\n     * @type {string}\n     */\n    this.region = data.region;\n\n    /**\n     * The full amount of members in this guild\n     * @type {number}\n     */\n    this.memberCount = data.member_count || this.memberCount;\n\n    /**\n     * Whether the guild is \"large\" (has more than large_threshold members, 50 by default)\n     * @type {boolean}\n     */\n    this.large = Boolean('large' in data ? data.large : this.large);\n\n    /**\n     * An array of enabled guild features, here are the possible values:\n     * * ANIMATED_ICON\n     * * BANNER\n     * * COMMERCE\n     * * COMMUNITY\n     * * DISCOVERABLE\n     * * FEATURABLE\n     * * INVITE_SPLASH\n     * * NEWS\n     * * PARTNERED\n     * * RELAY_ENABLED\n     * * VANITY_URL\n     * * VERIFIED\n     * * VIP_REGIONS\n     * * WELCOME_SCREEN_ENABLED\n     * @typedef {string} Features\n     */\n\n    /**\n     * An array of guild features partnered guilds have enabled\n     * @type {Features[]}\n     */\n    this.features = data.features;\n\n    /**\n     * The ID of the application that created this guild (if applicable)\n     * @type {?Snowflake}\n     */\n    this.applicationID = data.application_id;\n\n    /**\n     * The time in seconds before a user is counted as \"away from keyboard\"\n     * @type {?number}\n     */\n    this.afkTimeout = data.afk_timeout;\n\n    /**\n     * The ID of the voice channel where AFK members are moved\n     * @type {?Snowflake}\n     */\n    this.afkChannelID = data.afk_channel_id;\n\n    /**\n     * The ID of the system channel\n     * @type {?Snowflake}\n     */\n    this.systemChannelID = data.system_channel_id;\n\n    /**\n     * Whether embedded images are enabled on this guild\n     * @type {boolean}\n     * @deprecated\n     */\n    this.embedEnabled = data.embed_enabled;\n\n    /**\n     * The type of premium tier:\n     * * 0: NONE\n     * * 1: TIER_1\n     * * 2: TIER_2\n     * * 3: TIER_3\n     * @typedef {number} PremiumTier\n     */\n\n    /**\n     * The premium tier on this guild\n     * @type {PremiumTier}\n     */\n    this.premiumTier = data.premium_tier;\n    if (typeof data.premium_subscription_count !== 'undefined') {\n      /**\n       * The total number of boosts for this server\n       * @type {?number}\n       */\n      this.premiumSubscriptionCount = data.premium_subscription_count;\n    }\n    if (typeof data.widget_enabled !== 'undefined') {\n      /**\n       * Whether widget images are enabled on this guild\n       * @type {?boolean}\n       */\n      this.widgetEnabled = data.widget_enabled;\n    }\n    if (typeof data.widget_channel_id !== 'undefined') {\n      /**\n       * The widget channel ID, if enabled\n       * @type {?string}\n       */\n      this.widgetChannelID = data.widget_channel_id;\n    }\n    if (typeof data.embed_channel_id !== 'undefined') {\n      /**\n       * The embed channel ID, if enabled\n       * @type {?string}\n       * @deprecated\n       */\n      this.embedChannelID = data.embed_channel_id;\n    }\n\n    /**\n     * The verification level of the guild\n     * @type {VerificationLevel}\n     */\n    this.verificationLevel = VerificationLevels[data.verification_level];\n\n    /**\n     * The explicit content filter level of the guild\n     * @type {ExplicitContentFilterLevel}\n     */\n    this.explicitContentFilter = ExplicitContentFilterLevels[data.explicit_content_filter];\n\n    /**\n     * The required MFA level for the guild\n     * @type {number}\n     */\n    this.mfaLevel = data.mfa_level;\n\n    /**\n     * The timestamp the client user joined the guild at\n     * @type {number}\n     */\n    this.joinedTimestamp = data.joined_at ? new Date(data.joined_at).getTime() : this.joinedTimestamp;\n\n    /**\n     * The value set for the guild's default message notifications\n     * @type {DefaultMessageNotifications|number}\n     */\n    this.defaultMessageNotifications = DefaultMessageNotifications[data.default_message_notifications] || data.default_message_notifications;\n\n    /**\n     * The value set for the guild's system channel flags\n     * @type {Readonly<SystemChannelFlags>}\n     */\n    this.systemChannelFlags = new SystemChannelFlags(data.system_channel_flags).freeze();\n    if (typeof data.max_members !== 'undefined') {\n      /**\n       * The maximum amount of members the guild can have\n       * @type {?number}\n       */\n      this.maximumMembers = data.max_members;\n    } else if (typeof this.maximumMembers === 'undefined') {\n      this.maximumMembers = null;\n    }\n    if (typeof data.max_presences !== 'undefined') {\n      /**\n       * The maximum amount of presences the guild can have\n       * <info>You will need to fetch the guild using {@link Guild#fetch} if you want to receive this parameter</info>\n       * @type {?number}\n       */\n      this.maximumPresences = data.max_presences || 25000;\n    } else if (typeof this.maximumPresences === 'undefined') {\n      this.maximumPresences = null;\n    }\n    if (typeof data.approximate_member_count !== 'undefined') {\n      /**\n       * The approximate amount of members the guild has\n       * <info>You will need to fetch the guild using {@link Guild#fetch} if you want to receive this parameter</info>\n       * @type {?number}\n       */\n      this.approximateMemberCount = data.approximate_member_count;\n    } else if (typeof this.approximateMemberCount === 'undefined') {\n      this.approximateMemberCount = null;\n    }\n    if (typeof data.approximate_presence_count !== 'undefined') {\n      /**\n       * The approximate amount of presences the guild has\n       * <info>You will need to fetch the guild using {@link Guild#fetch} if you want to receive this parameter</info>\n       * @type {?number}\n       */\n      this.approximatePresenceCount = data.approximate_presence_count;\n    } else if (typeof this.approximatePresenceCount === 'undefined') {\n      this.approximatePresenceCount = null;\n    }\n\n    /**\n     * The vanity invite code of the guild, if any\n     * @type {?string}\n     */\n    this.vanityURLCode = data.vanity_url_code;\n\n    /* eslint-disable max-len */\n    /**\n     * The use count of the vanity URL code of the guild, if any\n     * <info>You will need to fetch this parameter using {@link Guild#fetchVanityData} if you want to receive it</info>\n     * @type {?number}\n     */\n    this.vanityURLUses = null;\n    /* eslint-enable max-len */\n\n    /**\n     * The description of the guild, if any\n     * @type {?string}\n     */\n    this.description = data.description;\n\n    /**\n     * The hash of the guild banner\n     * @type {?string}\n     */\n    this.banner = data.banner;\n    this.id = data.id;\n    this.available = !data.unavailable;\n    this.features = data.features || this.features || [];\n\n    /**\n     * The ID of the rules channel for the guild\n     * @type {?Snowflake}\n     */\n    this.rulesChannelID = data.rules_channel_id;\n\n    /**\n     * The ID of the community updates channel for the guild\n     * @type {?Snowflake}\n     */\n    this.publicUpdatesChannelID = data.public_updates_channel_id;\n\n    /**\n     * The preferred locale of the guild, defaults to `en-US`\n     * @type {string}\n     */\n    this.preferredLocale = data.preferred_locale;\n    if (data.channels) {\n      this.channels.cache.clear();\n      for (const rawChannel of data.channels) {\n        this.client.channels.add(rawChannel, this);\n      }\n    }\n    if (data.roles) {\n      this.roles.cache.clear();\n      for (const role of data.roles) this.roles.add(role);\n    }\n    if (data.members) {\n      this.members.cache.clear();\n      for (const guildUser of data.members) this.members.add(guildUser);\n    }\n    if (data.owner_id) {\n      /**\n       * The user ID of this guild's owner\n       * @type {Snowflake}\n       */\n      this.ownerID = data.owner_id;\n    }\n    if (data.presences) {\n      for (const presence of data.presences) {\n        this.presences.add(Object.assign(presence, {\n          guild: this\n        }));\n      }\n    }\n    if (data.voice_states) {\n      this.voiceStates.cache.clear();\n      for (const voiceState of data.voice_states) {\n        this.voiceStates.add(voiceState);\n      }\n    }\n    if (!this.emojis) {\n      /**\n       * A manager of the emojis belonging to this guild\n       * @type {GuildEmojiManager}\n       */\n      this.emojis = new GuildEmojiManager(this);\n      if (data.emojis) for (const emoji of data.emojis) this.emojis.add(emoji);\n    } else if (data.emojis) {\n      this.client.actions.GuildEmojisUpdate.handle({\n        guild_id: this.id,\n        emojis: data.emojis\n      });\n    }\n  }\n\n  /**\n   * The URL to this guild's banner.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  bannerURL() {\n    let {\n      format,\n      size\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.banner) return null;\n    return this.client.rest.cdn.Banner(this.id, this.banner, format, size);\n  }\n\n  /**\n   * The timestamp the guild was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return Snowflake.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time the guild was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The time the client user joined the guild\n   * @type {Date}\n   * @readonly\n   */\n  get joinedAt() {\n    return new Date(this.joinedTimestamp);\n  }\n\n  /**\n   * If this guild is partnered\n   * @type {boolean}\n   * @readonly\n   */\n  get partnered() {\n    return this.features.includes('PARTNERED');\n  }\n\n  /**\n   * If this guild is verified\n   * @type {boolean}\n   * @readonly\n   */\n  get verified() {\n    return this.features.includes('VERIFIED');\n  }\n\n  /**\n   * The URL to this guild's icon.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  iconURL() {\n    let {\n      format,\n      size,\n      dynamic\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.icon) return null;\n    return this.client.rest.cdn.Icon(this.id, this.icon, format, size, dynamic);\n  }\n\n  /**\n   * The acronym that shows up in place of a guild icon.\n   * @type {string}\n   * @readonly\n   */\n  get nameAcronym() {\n    return this.name.replace(/'s /g, ' ').replace(/\\w+/g, e => e[0]).replace(/\\s/g, '');\n  }\n\n  /**\n   * The URL to this guild's invite splash image.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  splashURL() {\n    let {\n      format,\n      size\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.splash) return null;\n    return this.client.rest.cdn.Splash(this.id, this.splash, format, size);\n  }\n\n  /**\n   * The URL to this guild's discovery splash image.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  discoverySplashURL() {\n    let {\n      format,\n      size\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.discoverySplash) return null;\n    return this.client.rest.cdn.DiscoverySplash(this.id, this.discoverySplash, format, size);\n  }\n\n  /**\n   * The owner of the guild\n   * @type {?GuildMember}\n   * @readonly\n   */\n  get owner() {\n    return this.members.cache.get(this.ownerID) || (this.client.options.partials.includes(PartialTypes.GUILD_MEMBER) ? this.members.add({\n      user: {\n        id: this.ownerID\n      }\n    }, true) : null);\n  }\n\n  /**\n   * AFK voice channel for this guild\n   * @type {?VoiceChannel}\n   * @readonly\n   */\n  get afkChannel() {\n    return this.client.channels.cache.get(this.afkChannelID) || null;\n  }\n\n  /**\n   * System channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n  get systemChannel() {\n    return this.client.channels.cache.get(this.systemChannelID) || null;\n  }\n\n  /**\n   * Widget channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n  get widgetChannel() {\n    return this.client.channels.cache.get(this.widgetChannelID) || null;\n  }\n\n  /**\n   * Embed channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   * @deprecated\n   */\n  get embedChannel() {\n    return this.client.channels.cache.get(this.embedChannelID) || null;\n  }\n\n  /**\n   * Rules channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n  get rulesChannel() {\n    return this.client.channels.cache.get(this.rulesChannelID) || null;\n  }\n\n  /**\n   * Public updates channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n  get publicUpdatesChannel() {\n    return this.client.channels.cache.get(this.publicUpdatesChannelID) || null;\n  }\n\n  /**\n   * The client user as a GuildMember of this guild\n   * @type {?GuildMember}\n   * @readonly\n   */\n  get me() {\n    return this.members.cache.get(this.client.user.id) || (this.client.options.partials.includes(PartialTypes.GUILD_MEMBER) ? this.members.add({\n      user: {\n        id: this.client.user.id\n      }\n    }, true) : null);\n  }\n\n  /**\n   * The voice state for the client user of this guild, if any\n   * @type {?VoiceState}\n   * @readonly\n   */\n  get voice() {\n    return this.voiceStates.cache.get(this.client.user.id);\n  }\n\n  /**\n   * Returns the GuildMember form of a User object, if the user is present in the guild.\n   * @param {UserResolvable} user The user that you want to obtain the GuildMember of\n   * @returns {?GuildMember}\n   * @example\n   * // Get the guild member of a user\n   * const member = guild.member(message.author);\n   */\n  member(user) {\n    return this.members.resolve(user);\n  }\n\n  /**\n   * Fetches this guild.\n   * @returns {Promise<Guild>}\n   */\n  fetch() {\n    return this.client.api.guilds(this.id).get({\n      query: {\n        with_counts: true\n      }\n    }).then(data => {\n      this._patch(data);\n      return this;\n    });\n  }\n\n  /**\n   * An object containing information about a guild member's ban.\n   * @typedef {Object} BanInfo\n   * @property {User} user User that was banned\n   * @property {?string} reason Reason the user was banned\n   */\n\n  /**\n   * Fetches information on a banned user from this guild.\n   * @param {UserResolvable} user The User to fetch the ban info of\n   * @returns {Promise<BanInfo>}\n   */\n  fetchBan(user) {\n    const id = this.client.users.resolveID(user);\n    if (!id) throw new Error('FETCH_BAN_RESOLVE_ID');\n    return this.client.api.guilds(this.id).bans(id).get().then(ban => ({\n      reason: ban.reason,\n      user: this.client.users.add(ban.user)\n    }));\n  }\n\n  /**\n   * Fetches a collection of banned users in this guild.\n   * @returns {Promise<Collection<Snowflake, BanInfo>>}\n   */\n  fetchBans() {\n    return this.client.api.guilds(this.id).bans.get().then(bans => bans.reduce((collection, ban) => {\n      collection.set(ban.user.id, {\n        reason: ban.reason,\n        user: this.client.users.add(ban.user)\n      });\n      return collection;\n    }, new Collection()));\n  }\n\n  /**\n   * Fetches a collection of integrations to this guild.\n   * Resolves with a collection mapping integrations by their ids.\n   * @param {Object} [options] Options for fetching integrations\n   * @param {boolean} [options.includeApplications] Whether to include bot and Oauth2 webhook integrations\n   * @returns {Promise<Collection<string, Integration>>}\n   * @example\n   * // Fetch integrations\n   * guild.fetchIntegrations()\n   *   .then(integrations => console.log(`Fetched ${integrations.size} integrations`))\n   *   .catch(console.error);\n   */\n  fetchIntegrations() {\n    let {\n      includeApplications = false\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.client.api.guilds(this.id).integrations.get({\n      query: {\n        include_applications: includeApplications\n      }\n    }).then(data => data.reduce((collection, integration) => collection.set(integration.id, new Integration(this.client, integration, this)), new Collection()));\n  }\n\n  /**\n   * Fetches a collection of templates from this guild.\n   * Resolves with a collection mapping templates by their codes.\n   * @returns {Promise<Collection<string, GuildTemplate>>}\n   */\n  fetchTemplates() {\n    return this.client.api.guilds(this.id).templates.get().then(templates => templates.reduce((col, data) => col.set(data.code, new GuildTemplate(this.client, data)), new Collection()));\n  }\n\n  /**\n   * The data for creating an integration.\n   * @typedef {Object} IntegrationData\n   * @property {string} id The integration id\n   * @property {string} type The integration type\n   */\n\n  /**\n   * Creates an integration by attaching an integration object\n   * @param {IntegrationData} data The data for the integration\n   * @param {string} reason Reason for creating the integration\n   * @returns {Promise<Guild>}\n   */\n  createIntegration(data, reason) {\n    return this.client.api.guilds(this.id).integrations.post({\n      data,\n      reason\n    }).then(() => this);\n  }\n\n  /**\n   * Creates a template for the guild.\n   * @param {string} name The name for the template\n   * @param {string} [description] The description for the template\n   * @returns {Promise<GuildTemplate>}\n   */\n  createTemplate(name, description) {\n    return this.client.api.guilds(this.id).templates.post({\n      data: {\n        name,\n        description\n      }\n    }).then(data => new GuildTemplate(this.client, data));\n  }\n\n  /**\n   * Fetches a collection of invites to this guild.\n   * Resolves with a collection mapping invites by their codes.\n   * @returns {Promise<Collection<string, Invite>>}\n   * @example\n   * // Fetch invites\n   * guild.fetchInvites()\n   *   .then(invites => console.log(`Fetched ${invites.size} invites`))\n   *   .catch(console.error);\n   * @example\n   * // Fetch invite creator by their id\n   * guild.fetchInvites()\n   *  .then(invites => console.log(invites.find(invite => invite.inviter.id === '84484653687267328')))\n   *  .catch(console.error);\n   */\n  fetchInvites() {\n    return this.client.api.guilds(this.id).invites.get().then(inviteItems => {\n      const invites = new Collection();\n      for (const inviteItem of inviteItems) {\n        const invite = new Invite(this.client, inviteItem);\n        invites.set(invite.code, invite);\n      }\n      return invites;\n    });\n  }\n\n  /**\n   * Obtains a guild preview for this guild from Discord.\n   * @returns {Promise<GuildPreview>}\n   */\n  fetchPreview() {\n    return this.client.api.guilds(this.id).preview.get().then(data => new GuildPreview(this.client, data));\n  }\n\n  /**\n   * Fetches the vanity url invite code to this guild.\n   * Resolves with a string matching the vanity url invite code, not the full url.\n   * @returns {Promise<string>}\n   * @deprecated\n   * @example\n   * // Fetch invites\n   * guild.fetchVanityCode()\n   *   .then(code => {\n   *     console.log(`Vanity URL: https://discord.gg/${code}`);\n   *   })\n   *   .catch(console.error);\n   */\n  fetchVanityCode() {\n    return this.fetchVanityData().then(vanity => vanity.code);\n  }\n\n  /**\n   * An object containing information about a guild's vanity invite.\n   * @typedef {Object} Vanity\n   * @property {?string} code Vanity invite code\n   * @property {?number} uses How many times this invite has been used\n   */\n\n  /**\n   * Fetches the vanity url invite object to this guild.\n   * Resolves with an object containing the vanity url invite code and the use count\n   * @returns {Promise<Vanity>}\n   * @example\n   * // Fetch invite data\n   * guild.fetchVanityData()\n   *   .then(res => {\n   *     console.log(`Vanity URL: https://discord.gg/${res.code} with ${res.uses} uses`);\n   *   })\n   *   .catch(console.error);\n   */\n  async fetchVanityData() {\n    if (!this.features.includes('VANITY_URL')) {\n      throw new Error('VANITY_URL');\n    }\n    const data = await this.client.api.guilds(this.id, 'vanity-url').get();\n    this.vanityURLUses = data.uses;\n    return data;\n  }\n\n  /**\n   * Fetches all webhooks for the guild.\n   * @returns {Promise<Collection<Snowflake, Webhook>>}\n   * @example\n   * // Fetch webhooks\n   * guild.fetchWebhooks()\n   *   .then(webhooks => console.log(`Fetched ${webhooks.size} webhooks`))\n   *   .catch(console.error);\n   */\n  fetchWebhooks() {\n    return this.client.api.guilds(this.id).webhooks.get().then(data => {\n      const hooks = new Collection();\n      for (const hook of data) hooks.set(hook.id, new Webhook(this.client, hook));\n      return hooks;\n    });\n  }\n\n  /**\n   * Fetches available voice regions.\n   * @returns {Promise<Collection<string, VoiceRegion>>}\n   */\n  fetchVoiceRegions() {\n    return this.client.api.guilds(this.id).regions.get().then(res => {\n      const regions = new Collection();\n      for (const region of res) regions.set(region.id, new VoiceRegion(region));\n      return regions;\n    });\n  }\n\n  /**\n   * Data for the Guild Widget object\n   * @typedef {Object} GuildWidget\n   * @property {boolean} enabled Whether the widget is enabled\n   * @property {?GuildChannel} channel The widget channel\n   */\n\n  /**\n   * The Guild Widget object\n   * @typedef {Object} GuildWidgetData\n   * @property {boolean} enabled Whether the widget is enabled\n   * @property {?GuildChannelResolvable} channel The widget channel\n   */\n\n  /**\n   * Fetches the guild embed.\n   * @returns {Promise<GuildWidget>}\n   * @deprecated\n   * @example\n   * // Fetches the guild embed\n   * guild.fetchEmbed()\n   *   .then(embed => console.log(`The embed is ${embed.enabled ? 'enabled' : 'disabled'}`))\n   *   .catch(console.error);\n   */\n  fetchEmbed() {\n    return this.fetchWidget();\n  }\n\n  /**\n   * Fetches the guild widget.\n   * @returns {Promise<GuildWidget>}\n   * @example\n   * // Fetches the guild widget\n   * guild.fetchWidget()\n   *   .then(widget => console.log(`The widget is ${widget.enabled ? 'enabled' : 'disabled'}`))\n   *   .catch(console.error);\n   */\n  async fetchWidget() {\n    const data = await this.client.api.guilds(this.id).widget.get();\n    this.widgetEnabled = this.embedEnabled = data.enabled;\n    this.widgetChannelID = this.embedChannelID = data.channel_id;\n    return {\n      enabled: data.enabled,\n      channel: data.channel_id ? this.channels.cache.get(data.channel_id) : null\n    };\n  }\n\n  /**\n   * Fetches audit logs for this guild.\n   * @param {Object} [options={}] Options for fetching audit logs\n   * @param {Snowflake|GuildAuditLogsEntry} [options.before] Limit to entries from before specified entry\n   * @param {number} [options.limit] Limit number of entries\n   * @param {UserResolvable} [options.user] Only show entries involving this user\n   * @param {AuditLogAction|number} [options.type] Only show entries involving this action type\n   * @returns {Promise<GuildAuditLogs>}\n   * @example\n   * // Output audit log entries\n   * guild.fetchAuditLogs()\n   *   .then(audit => console.log(audit.entries.first()))\n   *   .catch(console.error);\n   */\n  fetchAuditLogs() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (options.before && options.before instanceof GuildAuditLogs.Entry) options.before = options.before.id;\n    if (typeof options.type === 'string') options.type = GuildAuditLogs.Actions[options.type];\n    return this.client.api.guilds(this.id)['audit-logs'].get({\n      query: {\n        before: options.before,\n        limit: options.limit,\n        user_id: this.client.users.resolveID(options.user),\n        action_type: options.type\n      }\n    }).then(data => GuildAuditLogs.build(this, data));\n  }\n\n  /**\n   * Adds a user to the guild using OAuth2. Requires the `CREATE_INSTANT_INVITE` permission.\n   * @param {UserResolvable} user User to add to the guild\n   * @param {Object} options Options for the addition\n   * @param {string} options.accessToken An OAuth2 access token for the user with the `guilds.join` scope granted to the\n   * bot's application\n   * @param {string} [options.nick] Nickname to give the member (requires `MANAGE_NICKNAMES`)\n   * @param {Collection<Snowflake, Role>|RoleResolvable[]} [options.roles] Roles to add to the member\n   * (requires `MANAGE_ROLES`)\n   * @param {boolean} [options.mute] Whether the member should be muted (requires `MUTE_MEMBERS`)\n   * @param {boolean} [options.deaf] Whether the member should be deafened (requires `DEAFEN_MEMBERS`)\n   * @returns {Promise<GuildMember>}\n   */\n  async addMember(user, options) {\n    user = this.client.users.resolveID(user);\n    if (!user) throw new TypeError('INVALID_TYPE', 'user', 'UserResolvable');\n    if (this.members.cache.has(user)) return this.members.cache.get(user);\n    options.access_token = options.accessToken;\n    if (options.roles) {\n      const roles = [];\n      for (let role of options.roles instanceof Collection ? options.roles.values() : options.roles) {\n        role = this.roles.resolve(role);\n        if (!role) {\n          throw new TypeError('INVALID_TYPE', 'options.roles', 'Array or Collection of Roles or Snowflakes', true);\n        }\n        roles.push(role.id);\n      }\n      options.roles = roles;\n    }\n    const data = await this.client.api.guilds(this.id).members(user).put({\n      data: options\n    });\n    // Data is an empty buffer if the member is already part of the guild.\n    return data instanceof (browser ? ArrayBuffer : Buffer) ? this.members.fetch(user) : this.members.add(data);\n  }\n\n  /**\n   * The data for editing a guild.\n   * @typedef {Object} GuildEditData\n   * @property {string} [name] The name of the guild\n   * @property {string} [region] The region of the guild\n   * @property {VerificationLevel|number} [verificationLevel] The verification level of the guild\n   * @property {ExplicitContentFilterLevel|number} [explicitContentFilter] The level of the explicit content filter\n   * @property {ChannelResolvable} [afkChannel] The AFK channel of the guild\n   * @property {ChannelResolvable} [systemChannel] The system channel of the guild\n   * @property {number} [afkTimeout] The AFK timeout of the guild\n   * @property {Base64Resolvable} [icon] The icon of the guild\n   * @property {GuildMemberResolvable} [owner] The owner of the guild\n   * @property {Base64Resolvable} [splash] The invite splash image of the guild\n   * @property {Base64Resolvable} [discoverySplash] The discovery splash image of the guild\n   * @property {Base64Resolvable} [banner] The banner of the guild\n   * @property {DefaultMessageNotifications|number} [defaultMessageNotifications] The default message notifications\n   * @property {SystemChannelFlagsResolvable} [systemChannelFlags] The system channel flags of the guild\n   * @property {ChannelResolvable} [rulesChannel] The rules channel of the guild\n   * @property {ChannelResolvable} [publicUpdatesChannel] The community updates channel of the guild\n   * @property {string} [preferredLocale] The preferred locale of the guild\n   */\n\n  /**\n   * Updates the guild with new information - e.g. a new name.\n   * @param {GuildEditData} data The data to update the guild with\n   * @param {string} [reason] Reason for editing this guild\n   * @returns {Promise<Guild>}\n   * @example\n   * // Set the guild name and region\n   * guild.edit({\n   *   name: 'Discord Guild',\n   *   region: 'london',\n   * })\n   *   .then(updated => console.log(`New guild name ${updated} in region ${updated.region}`))\n   *   .catch(console.error);\n   */\n  edit(data, reason) {\n    const _data = {};\n    if (data.name) _data.name = data.name;\n    if (data.region) _data.region = data.region;\n    if (typeof data.verificationLevel !== 'undefined') {\n      _data.verification_level = typeof data.verificationLevel === 'number' ? Number(data.verificationLevel) : VerificationLevels.indexOf(data.verificationLevel);\n    }\n    if (typeof data.afkChannel !== 'undefined') {\n      _data.afk_channel_id = this.client.channels.resolveID(data.afkChannel);\n    }\n    if (typeof data.systemChannel !== 'undefined') {\n      _data.system_channel_id = this.client.channels.resolveID(data.systemChannel);\n    }\n    if (data.afkTimeout) _data.afk_timeout = Number(data.afkTimeout);\n    if (typeof data.icon !== 'undefined') _data.icon = data.icon;\n    if (data.owner) _data.owner_id = this.client.users.resolveID(data.owner);\n    if (data.splash) _data.splash = data.splash;\n    if (data.discoverySplash) _data.discovery_splash = data.discoverySplash;\n    if (data.banner) _data.banner = data.banner;\n    if (typeof data.explicitContentFilter !== 'undefined') {\n      _data.explicit_content_filter = typeof data.explicitContentFilter === 'number' ? data.explicitContentFilter : ExplicitContentFilterLevels.indexOf(data.explicitContentFilter);\n    }\n    if (typeof data.defaultMessageNotifications !== 'undefined') {\n      _data.default_message_notifications = typeof data.defaultMessageNotifications === 'string' ? DefaultMessageNotifications.indexOf(data.defaultMessageNotifications) : data.defaultMessageNotifications;\n    }\n    if (typeof data.systemChannelFlags !== 'undefined') {\n      _data.system_channel_flags = SystemChannelFlags.resolve(data.systemChannelFlags);\n    }\n    if (typeof data.rulesChannel !== 'undefined') {\n      _data.rules_channel_id = this.client.channels.resolveID(data.rulesChannel);\n    }\n    if (typeof data.publicUpdatesChannel !== 'undefined') {\n      _data.public_updates_channel_id = this.client.channels.resolveID(data.publicUpdatesChannel);\n    }\n    if (data.preferredLocale) _data.preferred_locale = data.preferredLocale;\n    return this.client.api.guilds(this.id).patch({\n      data: _data,\n      reason\n    }).then(newData => this.client.actions.GuildUpdate.handle(newData).updated);\n  }\n\n  /**\n   * Edits the level of the explicit content filter.\n   * @param {ExplicitContentFilterLevel|number} explicitContentFilter The new level of the explicit content filter\n   * @param {string} [reason] Reason for changing the level of the guild's explicit content filter\n   * @returns {Promise<Guild>}\n   */\n  setExplicitContentFilter(explicitContentFilter, reason) {\n    return this.edit({\n      explicitContentFilter\n    }, reason);\n  }\n\n  /* eslint-disable max-len */\n  /**\n   * Edits the setting of the default message notifications of the guild.\n   * @param {DefaultMessageNotifications|number} defaultMessageNotifications The new setting for the default message notifications\n   * @param {string} [reason] Reason for changing the setting of the default message notifications\n   * @returns {Promise<Guild>}\n   */\n  setDefaultMessageNotifications(defaultMessageNotifications, reason) {\n    return this.edit({\n      defaultMessageNotifications\n    }, reason);\n  }\n  /* eslint-enable max-len */\n\n  /**\n   * Edits the flags of the default message notifications of the guild.\n   * @param {SystemChannelFlagsResolvable} systemChannelFlags The new flags for the default message notifications\n   * @param {string} [reason] Reason for changing the flags of the default message notifications\n   * @returns {Promise<Guild>}\n   */\n  setSystemChannelFlags(systemChannelFlags, reason) {\n    return this.edit({\n      systemChannelFlags\n    }, reason);\n  }\n\n  /**\n   * Edits the name of the guild.\n   * @param {string} name The new name of the guild\n   * @param {string} [reason] Reason for changing the guild's name\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild name\n   * guild.setName('Discord Guild')\n   *  .then(updated => console.log(`Updated guild name to ${updated.name}`))\n   *  .catch(console.error);\n   */\n  setName(name, reason) {\n    return this.edit({\n      name\n    }, reason);\n  }\n\n  /**\n   * Edits the region of the guild.\n   * @param {string} region The new region of the guild\n   * @param {string} [reason] Reason for changing the guild's region\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild region\n   * guild.setRegion('london')\n   *  .then(updated => console.log(`Updated guild region to ${updated.region}`))\n   *  .catch(console.error);\n   */\n  setRegion(region, reason) {\n    return this.edit({\n      region\n    }, reason);\n  }\n\n  /**\n   * Edits the verification level of the guild.\n   * @param {VerificationLevel|number} verificationLevel The new verification level of the guild\n   * @param {string} [reason] Reason for changing the guild's verification level\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild verification level\n   * guild.setVerificationLevel(1)\n   *  .then(updated => console.log(`Updated guild verification level to ${guild.verificationLevel}`))\n   *  .catch(console.error);\n   */\n  setVerificationLevel(verificationLevel, reason) {\n    return this.edit({\n      verificationLevel\n    }, reason);\n  }\n\n  /**\n   * Edits the AFK channel of the guild.\n   * @param {ChannelResolvable} afkChannel The new AFK channel\n   * @param {string} [reason] Reason for changing the guild's AFK channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild AFK channel\n   * guild.setAFKChannel(channel)\n   *  .then(updated => console.log(`Updated guild AFK channel to ${guild.afkChannel.name}`))\n   *  .catch(console.error);\n   */\n  setAFKChannel(afkChannel, reason) {\n    return this.edit({\n      afkChannel\n    }, reason);\n  }\n\n  /**\n   * Edits the system channel of the guild.\n   * @param {ChannelResolvable} systemChannel The new system channel\n   * @param {string} [reason] Reason for changing the guild's system channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild system channel\n   * guild.setSystemChannel(channel)\n   *  .then(updated => console.log(`Updated guild system channel to ${guild.systemChannel.name}`))\n   *  .catch(console.error);\n   */\n  setSystemChannel(systemChannel, reason) {\n    return this.edit({\n      systemChannel\n    }, reason);\n  }\n\n  /**\n   * Edits the AFK timeout of the guild.\n   * @param {number} afkTimeout The time in seconds that a user must be idle to be considered AFK\n   * @param {string} [reason] Reason for changing the guild's AFK timeout\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild AFK channel\n   * guild.setAFKTimeout(60)\n   *  .then(updated => console.log(`Updated guild AFK timeout to ${guild.afkTimeout}`))\n   *  .catch(console.error);\n   */\n  setAFKTimeout(afkTimeout, reason) {\n    return this.edit({\n      afkTimeout\n    }, reason);\n  }\n\n  /**\n   * Sets a new guild icon.\n   * @param {Base64Resolvable|BufferResolvable} icon The new icon of the guild\n   * @param {string} [reason] Reason for changing the guild's icon\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild icon\n   * guild.setIcon('./icon.png')\n   *  .then(updated => console.log('Updated the guild icon'))\n   *  .catch(console.error);\n   */\n  async setIcon(icon, reason) {\n    return this.edit({\n      icon: await DataResolver.resolveImage(icon),\n      reason\n    });\n  }\n\n  /**\n   * Sets a new owner of the guild.\n   * @param {GuildMemberResolvable} owner The new owner of the guild\n   * @param {string} [reason] Reason for setting the new owner\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild owner\n   * guild.setOwner(guild.members.cache.first())\n   *  .then(updated => console.log(`Updated the guild owner to ${updated.owner.displayName}`))\n   *  .catch(console.error);\n   */\n  setOwner(owner, reason) {\n    return this.edit({\n      owner\n    }, reason);\n  }\n\n  /**\n   * Sets a new guild invite splash image.\n   * @param {Base64Resolvable|BufferResolvable} splash The new invite splash image of the guild\n   * @param {string} [reason] Reason for changing the guild's invite splash image\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild splash\n   * guild.setSplash('./splash.png')\n   *  .then(updated => console.log('Updated the guild splash'))\n   *  .catch(console.error);\n   */\n  async setSplash(splash, reason) {\n    return this.edit({\n      splash: await DataResolver.resolveImage(splash),\n      reason\n    });\n  }\n\n  /**\n   * Sets a new guild discovery splash image.\n   * @param {Base64Resolvable|BufferResolvable} discoverySplash The new discovery splash image of the guild\n   * @param {string} [reason] Reason for changing the guild's discovery splash image\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild discovery splash\n   * guild.setDiscoverySplash('./discoverysplash.png')\n   *   .then(updated => console.log('Updated the guild discovery splash'))\n   *   .catch(console.error);\n   */\n  async setDiscoverySplash(discoverySplash, reason) {\n    return this.edit({\n      discoverySplash: await DataResolver.resolveImage(discoverySplash),\n      reason\n    });\n  }\n\n  /**\n   * Sets a new guild banner.\n   * @param {Base64Resolvable|BufferResolvable} banner The new banner of the guild\n   * @param {string} [reason] Reason for changing the guild's banner\n   * @returns {Promise<Guild>}\n   * @example\n   * guild.setBanner('./banner.png')\n   *  .then(updated => console.log('Updated the guild banner'))\n   *  .catch(console.error);\n   */\n  async setBanner(banner, reason) {\n    return this.edit({\n      banner: await DataResolver.resolveImage(banner),\n      reason\n    });\n  }\n\n  /**\n   * Edits the rules channel of the guild.\n   * @param {ChannelResolvable} rulesChannel The new rules channel\n   * @param {string} [reason] Reason for changing the guild's rules channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild rules channel\n   * guild.setRulesChannel(channel)\n   *  .then(updated => console.log(`Updated guild rules channel to ${guild.rulesChannel.name}`))\n   *  .catch(console.error);\n   */\n  setRulesChannel(rulesChannel, reason) {\n    return this.edit({\n      rulesChannel\n    }, reason);\n  }\n\n  /**\n   * Edits the community updates channel of the guild.\n   * @param {ChannelResolvable} publicUpdatesChannel The new community updates channel\n   * @param {string} [reason] Reason for changing the guild's community updates channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild community updates channel\n   * guild.setPublicUpdatesChannel(channel)\n   *  .then(updated => console.log(`Updated guild community updates channel to ${guild.publicUpdatesChannel.name}`))\n   *  .catch(console.error);\n   */\n  setPublicUpdatesChannel(publicUpdatesChannel, reason) {\n    return this.edit({\n      publicUpdatesChannel\n    }, reason);\n  }\n\n  /**\n   * Edits the preferred locale of the guild.\n   * @param {string} preferredLocale The new preferred locale of the guild\n   * @param {string} [reason] Reason for changing the guild's preferred locale\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild preferred locale\n   * guild.setPreferredLocale('en-US')\n   *  .then(updated => console.log(`Updated guild preferred locale to ${guild.preferredLocale}`))\n   *  .catch(console.error);\n   */\n  setPreferredLocale(preferredLocale, reason) {\n    return this.edit({\n      preferredLocale\n    }, reason);\n  }\n\n  /**\n   * The data needed for updating a channel's position.\n   * @typedef {Object} ChannelPosition\n   * @property {ChannelResolvable} channel Channel to update\n   * @property {number} position New position for the channel\n   */\n\n  /**\n   * Batch-updates the guild's channels' positions.\n   * @param {ChannelPosition[]} channelPositions Channel positions to update\n   * @returns {Promise<Guild>}\n   * @example\n   * guild.setChannelPositions([{ channel: channelID, position: newChannelIndex }])\n   *   .then(guild => console.log(`Updated channel positions for ${guild}`))\n   *   .catch(console.error);\n   */\n  setChannelPositions(channelPositions) {\n    const updatedChannels = channelPositions.map(r => ({\n      id: this.client.channels.resolveID(r.channel),\n      position: r.position\n    }));\n    return this.client.api.guilds(this.id).channels.patch({\n      data: updatedChannels\n    }).then(() => this.client.actions.GuildChannelsPositionUpdate.handle({\n      guild_id: this.id,\n      channels: updatedChannels\n    }).guild);\n  }\n\n  /**\n   * The data needed for updating a guild role's position\n   * @typedef {Object} GuildRolePosition\n   * @property {RoleResolveable} role The ID of the role\n   * @property {number} position The position to update\n   */\n\n  /**\n   * Batch-updates the guild's role positions\n   * @param {GuildRolePosition[]} rolePositions Role positions to update\n   * @returns {Promise<Guild>}\n   * @example\n   * guild.setRolePositions([{ role: roleID, position: updatedRoleIndex }])\n   *  .then(guild => console.log(`Role permissions updated for ${guild}`))\n   *  .catch(console.error);\n   */\n  setRolePositions(rolePositions) {\n    // Make sure rolePositions are prepared for API\n    rolePositions = rolePositions.map(o => ({\n      id: this.roles.resolveID(o.role),\n      position: o.position\n    }));\n\n    // Call the API to update role positions\n    return this.client.api.guilds(this.id).roles.patch({\n      data: rolePositions\n    }).then(() => this.client.actions.GuildRolesPositionUpdate.handle({\n      guild_id: this.id,\n      roles: rolePositions\n    }).guild);\n  }\n\n  /**\n   * Edits the guild's embed.\n   * @param {GuildWidgetData} embed The embed for the guild\n   * @param {string} [reason] Reason for changing the guild's embed\n   * @returns {Promise<Guild>}\n   * @deprecated\n   */\n  setEmbed(embed, reason) {\n    return this.setWidget(embed, reason);\n  }\n\n  /**\n   * Edits the guild's widget.\n   * @param {GuildWidgetData} widget The widget for the guild\n   * @param {string} [reason] Reason for changing the guild's widget\n   * @returns {Promise<Guild>}\n   */\n  setWidget(widget, reason) {\n    return this.client.api.guilds(this.id).widget.patch({\n      data: {\n        enabled: widget.enabled,\n        channel_id: this.channels.resolveID(widget.channel)\n      },\n      reason\n    }).then(() => this);\n  }\n\n  /**\n   * Leaves the guild.\n   * @returns {Promise<Guild>}\n   * @example\n   * // Leave a guild\n   * guild.leave()\n   *   .then(g => console.log(`Left the guild ${g}`))\n   *   .catch(console.error);\n   */\n  leave() {\n    if (this.ownerID === this.client.user.id) return Promise.reject(new Error('GUILD_OWNED'));\n    return this.client.api.users('@me').guilds(this.id).delete().then(() => this.client.actions.GuildDelete.handle({\n      id: this.id\n    }).guild);\n  }\n\n  /**\n   * Deletes the guild.\n   * @returns {Promise<Guild>}\n   * @example\n   * // Delete a guild\n   * guild.delete()\n   *   .then(g => console.log(`Deleted the guild ${g}`))\n   *   .catch(console.error);\n   */\n  delete() {\n    return this.client.api.guilds(this.id).delete().then(() => this.client.actions.GuildDelete.handle({\n      id: this.id\n    }).guild);\n  }\n\n  /**\n   * Whether this guild equals another guild. It compares all properties, so for most operations\n   * it is advisable to just compare `guild.id === guild2.id` as it is much faster and is often\n   * what most users need.\n   * @param {Guild} guild The guild to compare with\n   * @returns {boolean}\n   */\n  equals(guild) {\n    let equal = guild && guild instanceof this.constructor && this.id === guild.id && this.available === guild.available && this.splash === guild.splash && this.discoverySplash === guild.discoverySplash && this.region === guild.region && this.name === guild.name && this.memberCount === guild.memberCount && this.large === guild.large && this.icon === guild.icon && this.ownerID === guild.ownerID && this.verificationLevel === guild.verificationLevel && this.embedEnabled === guild.embedEnabled && (this.features === guild.features || this.features.length === guild.features.length && this.features.every((feat, i) => feat === guild.features[i]));\n    if (equal) {\n      if (this.embedChannel) {\n        if (!guild.embedChannel || this.embedChannel.id !== guild.embedChannel.id) equal = false;\n      } else if (guild.embedChannel) {\n        equal = false;\n      }\n    }\n    return equal;\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the guild's name instead of the Guild object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from My Guild!\n   * console.log(`Hello from ${guild}!`);\n   */\n  toString() {\n    return this.name;\n  }\n  toJSON() {\n    const json = super.toJSON({\n      available: false,\n      createdTimestamp: true,\n      nameAcronym: true,\n      presences: false,\n      voiceStates: false\n    });\n    json.iconURL = this.iconURL();\n    json.splashURL = this.splashURL();\n    json.discoverySplashURL = this.discoverySplashURL();\n    json.bannerURL = this.bannerURL();\n    return json;\n  }\n\n  /**\n   * Creates a collection of this guild's roles, sorted by their position and IDs.\n   * @returns {Collection<Role>}\n   * @private\n   */\n  _sortedRoles() {\n    return Util.discordSort(this.roles.cache);\n  }\n\n  /**\n   * Creates a collection of this guild's or a specific category's channels, sorted by their position and IDs.\n   * @param {GuildChannel} [channel] Category to get the channels of\n   * @returns {Collection<GuildChannel>}\n   * @private\n   */\n  _sortedChannels(channel) {\n    const category = channel.type === ChannelTypes.CATEGORY;\n    return Util.discordSort(this.channels.cache.filter(c => (['text', 'news', 'store'].includes(channel.type) ? ['text', 'news', 'store'].includes(c.type) : c.type === channel.type) && (category || c.parent === channel.parent)));\n  }\n}\nGuild.prototype.setEmbed = deprecate(Guild.prototype.setEmbed, 'Guild#setEmbed: Use setWidget instead');\nGuild.prototype.fetchEmbed = deprecate(Guild.prototype.fetchEmbed, 'Guild#fetchEmbed: Use fetchWidget instead');\nGuild.prototype.fetchVanityCode = deprecate(Guild.prototype.fetchVanityCode, 'Guild#fetchVanityCode: Use fetchVanityData() instead');\nmodule.exports = Guild;","map":{"version":3,"names":["deprecate","require","Base","GuildAuditLogs","GuildPreview","GuildTemplate","Integration","Invite","VoiceRegion","Webhook","Error","TypeError","GuildChannelManager","GuildEmojiManager","GuildMemberManager","PresenceManager","RoleManager","VoiceStateManager","Collection","browser","ChannelTypes","DefaultMessageNotifications","PartialTypes","VerificationLevels","ExplicitContentFilterLevels","DataResolver","Snowflake","SystemChannelFlags","Util","Guild","constructor","client","data","members","channels","roles","presences","voiceStates","deleted","unavailable","available","id","_patch","shardID","shard","ws","shards","get","name","icon","splash","discoverySplash","discovery_splash","region","memberCount","member_count","large","Boolean","features","applicationID","application_id","afkTimeout","afk_timeout","afkChannelID","afk_channel_id","systemChannelID","system_channel_id","embedEnabled","embed_enabled","premiumTier","premium_tier","premium_subscription_count","premiumSubscriptionCount","widget_enabled","widgetEnabled","widget_channel_id","widgetChannelID","embed_channel_id","embedChannelID","verificationLevel","verification_level","explicitContentFilter","explicit_content_filter","mfaLevel","mfa_level","joinedTimestamp","joined_at","Date","getTime","defaultMessageNotifications","default_message_notifications","systemChannelFlags","system_channel_flags","freeze","max_members","maximumMembers","max_presences","maximumPresences","approximate_member_count","approximateMemberCount","approximate_presence_count","approximatePresenceCount","vanityURLCode","vanity_url_code","vanityURLUses","description","banner","rulesChannelID","rules_channel_id","publicUpdatesChannelID","public_updates_channel_id","preferredLocale","preferred_locale","cache","clear","rawChannel","add","role","guildUser","owner_id","ownerID","presence","Object","assign","guild","voice_states","voiceState","emojis","emoji","actions","GuildEmojisUpdate","handle","guild_id","bannerURL","format","size","rest","cdn","Banner","createdTimestamp","deconstruct","timestamp","createdAt","joinedAt","partnered","includes","verified","iconURL","dynamic","Icon","nameAcronym","replace","e","splashURL","Splash","discoverySplashURL","DiscoverySplash","owner","options","partials","GUILD_MEMBER","user","afkChannel","systemChannel","widgetChannel","embedChannel","rulesChannel","publicUpdatesChannel","me","voice","member","resolve","fetch","api","guilds","query","with_counts","then","fetchBan","users","resolveID","bans","ban","reason","fetchBans","reduce","collection","set","fetchIntegrations","includeApplications","integrations","include_applications","integration","fetchTemplates","templates","col","code","createIntegration","post","createTemplate","fetchInvites","invites","inviteItems","inviteItem","invite","fetchPreview","preview","fetchVanityCode","fetchVanityData","vanity","uses","fetchWebhooks","webhooks","hooks","hook","fetchVoiceRegions","regions","res","fetchEmbed","fetchWidget","widget","enabled","channel_id","channel","fetchAuditLogs","before","Entry","type","Actions","limit","user_id","action_type","build","addMember","has","access_token","accessToken","values","push","put","ArrayBuffer","Buffer","edit","_data","Number","indexOf","patch","newData","GuildUpdate","updated","setExplicitContentFilter","setDefaultMessageNotifications","setSystemChannelFlags","setName","setRegion","setVerificationLevel","setAFKChannel","setSystemChannel","setAFKTimeout","setIcon","resolveImage","setOwner","setSplash","setDiscoverySplash","setBanner","setRulesChannel","setPublicUpdatesChannel","setPreferredLocale","setChannelPositions","channelPositions","updatedChannels","map","r","position","GuildChannelsPositionUpdate","setRolePositions","rolePositions","o","GuildRolesPositionUpdate","setEmbed","embed","setWidget","leave","Promise","reject","delete","GuildDelete","equals","equal","length","every","feat","i","toString","toJSON","json","_sortedRoles","discordSort","_sortedChannels","category","CATEGORY","filter","c","parent","prototype","module","exports"],"sources":["/Users/jessegill/node_modules/discord.js/src/structures/Guild.js"],"sourcesContent":["'use strict';\n\nconst { deprecate } = require('util');\nconst Base = require('./Base');\nconst GuildAuditLogs = require('./GuildAuditLogs');\nconst GuildPreview = require('./GuildPreview');\nconst GuildTemplate = require('./GuildTemplate');\nconst Integration = require('./Integration');\nconst Invite = require('./Invite');\nconst VoiceRegion = require('./VoiceRegion');\nconst Webhook = require('./Webhook');\nconst { Error, TypeError } = require('../errors');\nconst GuildChannelManager = require('../managers/GuildChannelManager');\nconst GuildEmojiManager = require('../managers/GuildEmojiManager');\nconst GuildMemberManager = require('../managers/GuildMemberManager');\nconst PresenceManager = require('../managers/PresenceManager');\nconst RoleManager = require('../managers/RoleManager');\nconst VoiceStateManager = require('../managers/VoiceStateManager');\nconst Collection = require('../util/Collection');\nconst {\n  browser,\n  ChannelTypes,\n  DefaultMessageNotifications,\n  PartialTypes,\n  VerificationLevels,\n  ExplicitContentFilterLevels,\n} = require('../util/Constants');\nconst DataResolver = require('../util/DataResolver');\nconst Snowflake = require('../util/Snowflake');\nconst SystemChannelFlags = require('../util/SystemChannelFlags');\nconst Util = require('../util/Util');\n\n/**\n * Represents a guild (or a server) on Discord.\n * <info>It's recommended to see if a guild is available before performing operations or reading data from it. You can\n * check this with `guild.available`.</info>\n * @extends {Base}\n */\nclass Guild extends Base {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {Object} data The data for the guild\n   */\n  constructor(client, data) {\n    super(client);\n\n    /**\n     * A manager of the members belonging to this guild\n     * @type {GuildMemberManager}\n     */\n    this.members = new GuildMemberManager(this);\n\n    /**\n     * A manager of the channels belonging to this guild\n     * @type {GuildChannelManager}\n     */\n    this.channels = new GuildChannelManager(this);\n\n    /**\n     * A manager of the roles belonging to this guild\n     * @type {RoleManager}\n     */\n    this.roles = new RoleManager(this);\n\n    /**\n     * A manager of the presences belonging to this guild\n     * @type {PresenceManager}\n     */\n    this.presences = new PresenceManager(this.client);\n\n    /**\n     * A manager of the voice states of this guild\n     * @type {VoiceStateManager}\n     */\n    this.voiceStates = new VoiceStateManager(this);\n\n    /**\n     * Whether the bot has been removed from the guild\n     * @type {boolean}\n     */\n    this.deleted = false;\n\n    if (!data) return;\n    if (data.unavailable) {\n      /**\n       * Whether the guild is available to access. If it is not available, it indicates a server outage\n       * @type {boolean}\n       */\n      this.available = false;\n\n      /**\n       * The Unique ID of the guild, useful for comparisons\n       * @type {Snowflake}\n       */\n      this.id = data.id;\n    } else {\n      this._patch(data);\n      if (!data.channels) this.available = false;\n    }\n\n    /**\n     * The id of the shard this Guild belongs to.\n     * @type {number}\n     */\n    this.shardID = data.shardID;\n  }\n\n  /**\n   * The Shard this Guild belongs to.\n   * @type {WebSocketShard}\n   * @readonly\n   */\n  get shard() {\n    return this.client.ws.shards.get(this.shardID);\n  }\n\n  /**\n   * Sets up the guild.\n   * @param {*} data The raw data of the guild\n   * @private\n   */\n  _patch(data) {\n    /**\n     * The name of the guild\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The hash of the guild icon\n     * @type {?string}\n     */\n    this.icon = data.icon;\n\n    /**\n     * The hash of the guild invite splash image\n     * @type {?string}\n     */\n    this.splash = data.splash;\n\n    /**\n     * The hash of the guild discovery splash image\n     * @type {?string}\n     */\n    this.discoverySplash = data.discovery_splash;\n\n    /**\n     * The region the guild is located in\n     * @type {string}\n     */\n    this.region = data.region;\n\n    /**\n     * The full amount of members in this guild\n     * @type {number}\n     */\n    this.memberCount = data.member_count || this.memberCount;\n\n    /**\n     * Whether the guild is \"large\" (has more than large_threshold members, 50 by default)\n     * @type {boolean}\n     */\n    this.large = Boolean('large' in data ? data.large : this.large);\n\n    /**\n     * An array of enabled guild features, here are the possible values:\n     * * ANIMATED_ICON\n     * * BANNER\n     * * COMMERCE\n     * * COMMUNITY\n     * * DISCOVERABLE\n     * * FEATURABLE\n     * * INVITE_SPLASH\n     * * NEWS\n     * * PARTNERED\n     * * RELAY_ENABLED\n     * * VANITY_URL\n     * * VERIFIED\n     * * VIP_REGIONS\n     * * WELCOME_SCREEN_ENABLED\n     * @typedef {string} Features\n     */\n\n    /**\n     * An array of guild features partnered guilds have enabled\n     * @type {Features[]}\n     */\n    this.features = data.features;\n\n    /**\n     * The ID of the application that created this guild (if applicable)\n     * @type {?Snowflake}\n     */\n    this.applicationID = data.application_id;\n\n    /**\n     * The time in seconds before a user is counted as \"away from keyboard\"\n     * @type {?number}\n     */\n    this.afkTimeout = data.afk_timeout;\n\n    /**\n     * The ID of the voice channel where AFK members are moved\n     * @type {?Snowflake}\n     */\n    this.afkChannelID = data.afk_channel_id;\n\n    /**\n     * The ID of the system channel\n     * @type {?Snowflake}\n     */\n    this.systemChannelID = data.system_channel_id;\n\n    /**\n     * Whether embedded images are enabled on this guild\n     * @type {boolean}\n     * @deprecated\n     */\n    this.embedEnabled = data.embed_enabled;\n\n    /**\n     * The type of premium tier:\n     * * 0: NONE\n     * * 1: TIER_1\n     * * 2: TIER_2\n     * * 3: TIER_3\n     * @typedef {number} PremiumTier\n     */\n\n    /**\n     * The premium tier on this guild\n     * @type {PremiumTier}\n     */\n    this.premiumTier = data.premium_tier;\n\n    if (typeof data.premium_subscription_count !== 'undefined') {\n      /**\n       * The total number of boosts for this server\n       * @type {?number}\n       */\n      this.premiumSubscriptionCount = data.premium_subscription_count;\n    }\n\n    if (typeof data.widget_enabled !== 'undefined') {\n      /**\n       * Whether widget images are enabled on this guild\n       * @type {?boolean}\n       */\n      this.widgetEnabled = data.widget_enabled;\n    }\n\n    if (typeof data.widget_channel_id !== 'undefined') {\n      /**\n       * The widget channel ID, if enabled\n       * @type {?string}\n       */\n      this.widgetChannelID = data.widget_channel_id;\n    }\n\n    if (typeof data.embed_channel_id !== 'undefined') {\n      /**\n       * The embed channel ID, if enabled\n       * @type {?string}\n       * @deprecated\n       */\n      this.embedChannelID = data.embed_channel_id;\n    }\n\n    /**\n     * The verification level of the guild\n     * @type {VerificationLevel}\n     */\n    this.verificationLevel = VerificationLevels[data.verification_level];\n\n    /**\n     * The explicit content filter level of the guild\n     * @type {ExplicitContentFilterLevel}\n     */\n    this.explicitContentFilter = ExplicitContentFilterLevels[data.explicit_content_filter];\n\n    /**\n     * The required MFA level for the guild\n     * @type {number}\n     */\n    this.mfaLevel = data.mfa_level;\n\n    /**\n     * The timestamp the client user joined the guild at\n     * @type {number}\n     */\n    this.joinedTimestamp = data.joined_at ? new Date(data.joined_at).getTime() : this.joinedTimestamp;\n\n    /**\n     * The value set for the guild's default message notifications\n     * @type {DefaultMessageNotifications|number}\n     */\n    this.defaultMessageNotifications =\n      DefaultMessageNotifications[data.default_message_notifications] || data.default_message_notifications;\n\n    /**\n     * The value set for the guild's system channel flags\n     * @type {Readonly<SystemChannelFlags>}\n     */\n    this.systemChannelFlags = new SystemChannelFlags(data.system_channel_flags).freeze();\n\n    if (typeof data.max_members !== 'undefined') {\n      /**\n       * The maximum amount of members the guild can have\n       * @type {?number}\n       */\n      this.maximumMembers = data.max_members;\n    } else if (typeof this.maximumMembers === 'undefined') {\n      this.maximumMembers = null;\n    }\n\n    if (typeof data.max_presences !== 'undefined') {\n      /**\n       * The maximum amount of presences the guild can have\n       * <info>You will need to fetch the guild using {@link Guild#fetch} if you want to receive this parameter</info>\n       * @type {?number}\n       */\n      this.maximumPresences = data.max_presences || 25000;\n    } else if (typeof this.maximumPresences === 'undefined') {\n      this.maximumPresences = null;\n    }\n\n    if (typeof data.approximate_member_count !== 'undefined') {\n      /**\n       * The approximate amount of members the guild has\n       * <info>You will need to fetch the guild using {@link Guild#fetch} if you want to receive this parameter</info>\n       * @type {?number}\n       */\n      this.approximateMemberCount = data.approximate_member_count;\n    } else if (typeof this.approximateMemberCount === 'undefined') {\n      this.approximateMemberCount = null;\n    }\n\n    if (typeof data.approximate_presence_count !== 'undefined') {\n      /**\n       * The approximate amount of presences the guild has\n       * <info>You will need to fetch the guild using {@link Guild#fetch} if you want to receive this parameter</info>\n       * @type {?number}\n       */\n      this.approximatePresenceCount = data.approximate_presence_count;\n    } else if (typeof this.approximatePresenceCount === 'undefined') {\n      this.approximatePresenceCount = null;\n    }\n\n    /**\n     * The vanity invite code of the guild, if any\n     * @type {?string}\n     */\n    this.vanityURLCode = data.vanity_url_code;\n\n    /* eslint-disable max-len */\n    /**\n     * The use count of the vanity URL code of the guild, if any\n     * <info>You will need to fetch this parameter using {@link Guild#fetchVanityData} if you want to receive it</info>\n     * @type {?number}\n     */\n    this.vanityURLUses = null;\n    /* eslint-enable max-len */\n\n    /**\n     * The description of the guild, if any\n     * @type {?string}\n     */\n    this.description = data.description;\n\n    /**\n     * The hash of the guild banner\n     * @type {?string}\n     */\n    this.banner = data.banner;\n\n    this.id = data.id;\n    this.available = !data.unavailable;\n    this.features = data.features || this.features || [];\n\n    /**\n     * The ID of the rules channel for the guild\n     * @type {?Snowflake}\n     */\n    this.rulesChannelID = data.rules_channel_id;\n\n    /**\n     * The ID of the community updates channel for the guild\n     * @type {?Snowflake}\n     */\n    this.publicUpdatesChannelID = data.public_updates_channel_id;\n\n    /**\n     * The preferred locale of the guild, defaults to `en-US`\n     * @type {string}\n     */\n    this.preferredLocale = data.preferred_locale;\n\n    if (data.channels) {\n      this.channels.cache.clear();\n      for (const rawChannel of data.channels) {\n        this.client.channels.add(rawChannel, this);\n      }\n    }\n\n    if (data.roles) {\n      this.roles.cache.clear();\n      for (const role of data.roles) this.roles.add(role);\n    }\n\n    if (data.members) {\n      this.members.cache.clear();\n      for (const guildUser of data.members) this.members.add(guildUser);\n    }\n\n    if (data.owner_id) {\n      /**\n       * The user ID of this guild's owner\n       * @type {Snowflake}\n       */\n      this.ownerID = data.owner_id;\n    }\n\n    if (data.presences) {\n      for (const presence of data.presences) {\n        this.presences.add(Object.assign(presence, { guild: this }));\n      }\n    }\n\n    if (data.voice_states) {\n      this.voiceStates.cache.clear();\n      for (const voiceState of data.voice_states) {\n        this.voiceStates.add(voiceState);\n      }\n    }\n\n    if (!this.emojis) {\n      /**\n       * A manager of the emojis belonging to this guild\n       * @type {GuildEmojiManager}\n       */\n      this.emojis = new GuildEmojiManager(this);\n      if (data.emojis) for (const emoji of data.emojis) this.emojis.add(emoji);\n    } else if (data.emojis) {\n      this.client.actions.GuildEmojisUpdate.handle({\n        guild_id: this.id,\n        emojis: data.emojis,\n      });\n    }\n  }\n\n  /**\n   * The URL to this guild's banner.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  bannerURL({ format, size } = {}) {\n    if (!this.banner) return null;\n    return this.client.rest.cdn.Banner(this.id, this.banner, format, size);\n  }\n\n  /**\n   * The timestamp the guild was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return Snowflake.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time the guild was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The time the client user joined the guild\n   * @type {Date}\n   * @readonly\n   */\n  get joinedAt() {\n    return new Date(this.joinedTimestamp);\n  }\n\n  /**\n   * If this guild is partnered\n   * @type {boolean}\n   * @readonly\n   */\n  get partnered() {\n    return this.features.includes('PARTNERED');\n  }\n\n  /**\n   * If this guild is verified\n   * @type {boolean}\n   * @readonly\n   */\n  get verified() {\n    return this.features.includes('VERIFIED');\n  }\n\n  /**\n   * The URL to this guild's icon.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  iconURL({ format, size, dynamic } = {}) {\n    if (!this.icon) return null;\n    return this.client.rest.cdn.Icon(this.id, this.icon, format, size, dynamic);\n  }\n\n  /**\n   * The acronym that shows up in place of a guild icon.\n   * @type {string}\n   * @readonly\n   */\n  get nameAcronym() {\n    return this.name\n      .replace(/'s /g, ' ')\n      .replace(/\\w+/g, e => e[0])\n      .replace(/\\s/g, '');\n  }\n\n  /**\n   * The URL to this guild's invite splash image.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  splashURL({ format, size } = {}) {\n    if (!this.splash) return null;\n    return this.client.rest.cdn.Splash(this.id, this.splash, format, size);\n  }\n\n  /**\n   * The URL to this guild's discovery splash image.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  discoverySplashURL({ format, size } = {}) {\n    if (!this.discoverySplash) return null;\n    return this.client.rest.cdn.DiscoverySplash(this.id, this.discoverySplash, format, size);\n  }\n\n  /**\n   * The owner of the guild\n   * @type {?GuildMember}\n   * @readonly\n   */\n  get owner() {\n    return (\n      this.members.cache.get(this.ownerID) ||\n      (this.client.options.partials.includes(PartialTypes.GUILD_MEMBER)\n        ? this.members.add({ user: { id: this.ownerID } }, true)\n        : null)\n    );\n  }\n\n  /**\n   * AFK voice channel for this guild\n   * @type {?VoiceChannel}\n   * @readonly\n   */\n  get afkChannel() {\n    return this.client.channels.cache.get(this.afkChannelID) || null;\n  }\n\n  /**\n   * System channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n  get systemChannel() {\n    return this.client.channels.cache.get(this.systemChannelID) || null;\n  }\n\n  /**\n   * Widget channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n  get widgetChannel() {\n    return this.client.channels.cache.get(this.widgetChannelID) || null;\n  }\n\n  /**\n   * Embed channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   * @deprecated\n   */\n  get embedChannel() {\n    return this.client.channels.cache.get(this.embedChannelID) || null;\n  }\n\n  /**\n   * Rules channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n  get rulesChannel() {\n    return this.client.channels.cache.get(this.rulesChannelID) || null;\n  }\n\n  /**\n   * Public updates channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n  get publicUpdatesChannel() {\n    return this.client.channels.cache.get(this.publicUpdatesChannelID) || null;\n  }\n\n  /**\n   * The client user as a GuildMember of this guild\n   * @type {?GuildMember}\n   * @readonly\n   */\n  get me() {\n    return (\n      this.members.cache.get(this.client.user.id) ||\n      (this.client.options.partials.includes(PartialTypes.GUILD_MEMBER)\n        ? this.members.add({ user: { id: this.client.user.id } }, true)\n        : null)\n    );\n  }\n\n  /**\n   * The voice state for the client user of this guild, if any\n   * @type {?VoiceState}\n   * @readonly\n   */\n  get voice() {\n    return this.voiceStates.cache.get(this.client.user.id);\n  }\n\n  /**\n   * Returns the GuildMember form of a User object, if the user is present in the guild.\n   * @param {UserResolvable} user The user that you want to obtain the GuildMember of\n   * @returns {?GuildMember}\n   * @example\n   * // Get the guild member of a user\n   * const member = guild.member(message.author);\n   */\n  member(user) {\n    return this.members.resolve(user);\n  }\n\n  /**\n   * Fetches this guild.\n   * @returns {Promise<Guild>}\n   */\n  fetch() {\n    return this.client.api\n      .guilds(this.id)\n      .get({ query: { with_counts: true } })\n      .then(data => {\n        this._patch(data);\n        return this;\n      });\n  }\n\n  /**\n   * An object containing information about a guild member's ban.\n   * @typedef {Object} BanInfo\n   * @property {User} user User that was banned\n   * @property {?string} reason Reason the user was banned\n   */\n\n  /**\n   * Fetches information on a banned user from this guild.\n   * @param {UserResolvable} user The User to fetch the ban info of\n   * @returns {Promise<BanInfo>}\n   */\n  fetchBan(user) {\n    const id = this.client.users.resolveID(user);\n    if (!id) throw new Error('FETCH_BAN_RESOLVE_ID');\n    return this.client.api\n      .guilds(this.id)\n      .bans(id)\n      .get()\n      .then(ban => ({\n        reason: ban.reason,\n        user: this.client.users.add(ban.user),\n      }));\n  }\n\n  /**\n   * Fetches a collection of banned users in this guild.\n   * @returns {Promise<Collection<Snowflake, BanInfo>>}\n   */\n  fetchBans() {\n    return this.client.api\n      .guilds(this.id)\n      .bans.get()\n      .then(bans =>\n        bans.reduce((collection, ban) => {\n          collection.set(ban.user.id, {\n            reason: ban.reason,\n            user: this.client.users.add(ban.user),\n          });\n          return collection;\n        }, new Collection()),\n      );\n  }\n\n  /**\n   * Fetches a collection of integrations to this guild.\n   * Resolves with a collection mapping integrations by their ids.\n   * @param {Object} [options] Options for fetching integrations\n   * @param {boolean} [options.includeApplications] Whether to include bot and Oauth2 webhook integrations\n   * @returns {Promise<Collection<string, Integration>>}\n   * @example\n   * // Fetch integrations\n   * guild.fetchIntegrations()\n   *   .then(integrations => console.log(`Fetched ${integrations.size} integrations`))\n   *   .catch(console.error);\n   */\n  fetchIntegrations({ includeApplications = false } = {}) {\n    return this.client.api\n      .guilds(this.id)\n      .integrations.get({\n        query: {\n          include_applications: includeApplications,\n        },\n      })\n      .then(data =>\n        data.reduce(\n          (collection, integration) => collection.set(integration.id, new Integration(this.client, integration, this)),\n          new Collection(),\n        ),\n      );\n  }\n\n  /**\n   * Fetches a collection of templates from this guild.\n   * Resolves with a collection mapping templates by their codes.\n   * @returns {Promise<Collection<string, GuildTemplate>>}\n   */\n  fetchTemplates() {\n    return this.client.api\n      .guilds(this.id)\n      .templates.get()\n      .then(templates =>\n        templates.reduce((col, data) => col.set(data.code, new GuildTemplate(this.client, data)), new Collection()),\n      );\n  }\n\n  /**\n   * The data for creating an integration.\n   * @typedef {Object} IntegrationData\n   * @property {string} id The integration id\n   * @property {string} type The integration type\n   */\n\n  /**\n   * Creates an integration by attaching an integration object\n   * @param {IntegrationData} data The data for the integration\n   * @param {string} reason Reason for creating the integration\n   * @returns {Promise<Guild>}\n   */\n  createIntegration(data, reason) {\n    return this.client.api\n      .guilds(this.id)\n      .integrations.post({ data, reason })\n      .then(() => this);\n  }\n\n  /**\n   * Creates a template for the guild.\n   * @param {string} name The name for the template\n   * @param {string} [description] The description for the template\n   * @returns {Promise<GuildTemplate>}\n   */\n  createTemplate(name, description) {\n    return this.client.api\n      .guilds(this.id)\n      .templates.post({ data: { name, description } })\n      .then(data => new GuildTemplate(this.client, data));\n  }\n\n  /**\n   * Fetches a collection of invites to this guild.\n   * Resolves with a collection mapping invites by their codes.\n   * @returns {Promise<Collection<string, Invite>>}\n   * @example\n   * // Fetch invites\n   * guild.fetchInvites()\n   *   .then(invites => console.log(`Fetched ${invites.size} invites`))\n   *   .catch(console.error);\n   * @example\n   * // Fetch invite creator by their id\n   * guild.fetchInvites()\n   *  .then(invites => console.log(invites.find(invite => invite.inviter.id === '84484653687267328')))\n   *  .catch(console.error);\n   */\n  fetchInvites() {\n    return this.client.api\n      .guilds(this.id)\n      .invites.get()\n      .then(inviteItems => {\n        const invites = new Collection();\n        for (const inviteItem of inviteItems) {\n          const invite = new Invite(this.client, inviteItem);\n          invites.set(invite.code, invite);\n        }\n        return invites;\n      });\n  }\n\n  /**\n   * Obtains a guild preview for this guild from Discord.\n   * @returns {Promise<GuildPreview>}\n   */\n  fetchPreview() {\n    return this.client.api\n      .guilds(this.id)\n      .preview.get()\n      .then(data => new GuildPreview(this.client, data));\n  }\n\n  /**\n   * Fetches the vanity url invite code to this guild.\n   * Resolves with a string matching the vanity url invite code, not the full url.\n   * @returns {Promise<string>}\n   * @deprecated\n   * @example\n   * // Fetch invites\n   * guild.fetchVanityCode()\n   *   .then(code => {\n   *     console.log(`Vanity URL: https://discord.gg/${code}`);\n   *   })\n   *   .catch(console.error);\n   */\n  fetchVanityCode() {\n    return this.fetchVanityData().then(vanity => vanity.code);\n  }\n\n  /**\n   * An object containing information about a guild's vanity invite.\n   * @typedef {Object} Vanity\n   * @property {?string} code Vanity invite code\n   * @property {?number} uses How many times this invite has been used\n   */\n\n  /**\n   * Fetches the vanity url invite object to this guild.\n   * Resolves with an object containing the vanity url invite code and the use count\n   * @returns {Promise<Vanity>}\n   * @example\n   * // Fetch invite data\n   * guild.fetchVanityData()\n   *   .then(res => {\n   *     console.log(`Vanity URL: https://discord.gg/${res.code} with ${res.uses} uses`);\n   *   })\n   *   .catch(console.error);\n   */\n  async fetchVanityData() {\n    if (!this.features.includes('VANITY_URL')) {\n      throw new Error('VANITY_URL');\n    }\n    const data = await this.client.api.guilds(this.id, 'vanity-url').get();\n    this.vanityURLUses = data.uses;\n\n    return data;\n  }\n\n  /**\n   * Fetches all webhooks for the guild.\n   * @returns {Promise<Collection<Snowflake, Webhook>>}\n   * @example\n   * // Fetch webhooks\n   * guild.fetchWebhooks()\n   *   .then(webhooks => console.log(`Fetched ${webhooks.size} webhooks`))\n   *   .catch(console.error);\n   */\n  fetchWebhooks() {\n    return this.client.api\n      .guilds(this.id)\n      .webhooks.get()\n      .then(data => {\n        const hooks = new Collection();\n        for (const hook of data) hooks.set(hook.id, new Webhook(this.client, hook));\n        return hooks;\n      });\n  }\n\n  /**\n   * Fetches available voice regions.\n   * @returns {Promise<Collection<string, VoiceRegion>>}\n   */\n  fetchVoiceRegions() {\n    return this.client.api\n      .guilds(this.id)\n      .regions.get()\n      .then(res => {\n        const regions = new Collection();\n        for (const region of res) regions.set(region.id, new VoiceRegion(region));\n        return regions;\n      });\n  }\n\n  /**\n   * Data for the Guild Widget object\n   * @typedef {Object} GuildWidget\n   * @property {boolean} enabled Whether the widget is enabled\n   * @property {?GuildChannel} channel The widget channel\n   */\n\n  /**\n   * The Guild Widget object\n   * @typedef {Object} GuildWidgetData\n   * @property {boolean} enabled Whether the widget is enabled\n   * @property {?GuildChannelResolvable} channel The widget channel\n   */\n\n  /**\n   * Fetches the guild embed.\n   * @returns {Promise<GuildWidget>}\n   * @deprecated\n   * @example\n   * // Fetches the guild embed\n   * guild.fetchEmbed()\n   *   .then(embed => console.log(`The embed is ${embed.enabled ? 'enabled' : 'disabled'}`))\n   *   .catch(console.error);\n   */\n  fetchEmbed() {\n    return this.fetchWidget();\n  }\n\n  /**\n   * Fetches the guild widget.\n   * @returns {Promise<GuildWidget>}\n   * @example\n   * // Fetches the guild widget\n   * guild.fetchWidget()\n   *   .then(widget => console.log(`The widget is ${widget.enabled ? 'enabled' : 'disabled'}`))\n   *   .catch(console.error);\n   */\n  async fetchWidget() {\n    const data = await this.client.api.guilds(this.id).widget.get();\n    this.widgetEnabled = this.embedEnabled = data.enabled;\n    this.widgetChannelID = this.embedChannelID = data.channel_id;\n    return {\n      enabled: data.enabled,\n      channel: data.channel_id ? this.channels.cache.get(data.channel_id) : null,\n    };\n  }\n\n  /**\n   * Fetches audit logs for this guild.\n   * @param {Object} [options={}] Options for fetching audit logs\n   * @param {Snowflake|GuildAuditLogsEntry} [options.before] Limit to entries from before specified entry\n   * @param {number} [options.limit] Limit number of entries\n   * @param {UserResolvable} [options.user] Only show entries involving this user\n   * @param {AuditLogAction|number} [options.type] Only show entries involving this action type\n   * @returns {Promise<GuildAuditLogs>}\n   * @example\n   * // Output audit log entries\n   * guild.fetchAuditLogs()\n   *   .then(audit => console.log(audit.entries.first()))\n   *   .catch(console.error);\n   */\n  fetchAuditLogs(options = {}) {\n    if (options.before && options.before instanceof GuildAuditLogs.Entry) options.before = options.before.id;\n    if (typeof options.type === 'string') options.type = GuildAuditLogs.Actions[options.type];\n\n    return this.client.api\n      .guilds(this.id)\n      ['audit-logs'].get({\n        query: {\n          before: options.before,\n          limit: options.limit,\n          user_id: this.client.users.resolveID(options.user),\n          action_type: options.type,\n        },\n      })\n      .then(data => GuildAuditLogs.build(this, data));\n  }\n\n  /**\n   * Adds a user to the guild using OAuth2. Requires the `CREATE_INSTANT_INVITE` permission.\n   * @param {UserResolvable} user User to add to the guild\n   * @param {Object} options Options for the addition\n   * @param {string} options.accessToken An OAuth2 access token for the user with the `guilds.join` scope granted to the\n   * bot's application\n   * @param {string} [options.nick] Nickname to give the member (requires `MANAGE_NICKNAMES`)\n   * @param {Collection<Snowflake, Role>|RoleResolvable[]} [options.roles] Roles to add to the member\n   * (requires `MANAGE_ROLES`)\n   * @param {boolean} [options.mute] Whether the member should be muted (requires `MUTE_MEMBERS`)\n   * @param {boolean} [options.deaf] Whether the member should be deafened (requires `DEAFEN_MEMBERS`)\n   * @returns {Promise<GuildMember>}\n   */\n  async addMember(user, options) {\n    user = this.client.users.resolveID(user);\n    if (!user) throw new TypeError('INVALID_TYPE', 'user', 'UserResolvable');\n    if (this.members.cache.has(user)) return this.members.cache.get(user);\n    options.access_token = options.accessToken;\n    if (options.roles) {\n      const roles = [];\n      for (let role of options.roles instanceof Collection ? options.roles.values() : options.roles) {\n        role = this.roles.resolve(role);\n        if (!role) {\n          throw new TypeError('INVALID_TYPE', 'options.roles', 'Array or Collection of Roles or Snowflakes', true);\n        }\n        roles.push(role.id);\n      }\n      options.roles = roles;\n    }\n    const data = await this.client.api.guilds(this.id).members(user).put({ data: options });\n    // Data is an empty buffer if the member is already part of the guild.\n    return data instanceof (browser ? ArrayBuffer : Buffer) ? this.members.fetch(user) : this.members.add(data);\n  }\n\n  /**\n   * The data for editing a guild.\n   * @typedef {Object} GuildEditData\n   * @property {string} [name] The name of the guild\n   * @property {string} [region] The region of the guild\n   * @property {VerificationLevel|number} [verificationLevel] The verification level of the guild\n   * @property {ExplicitContentFilterLevel|number} [explicitContentFilter] The level of the explicit content filter\n   * @property {ChannelResolvable} [afkChannel] The AFK channel of the guild\n   * @property {ChannelResolvable} [systemChannel] The system channel of the guild\n   * @property {number} [afkTimeout] The AFK timeout of the guild\n   * @property {Base64Resolvable} [icon] The icon of the guild\n   * @property {GuildMemberResolvable} [owner] The owner of the guild\n   * @property {Base64Resolvable} [splash] The invite splash image of the guild\n   * @property {Base64Resolvable} [discoverySplash] The discovery splash image of the guild\n   * @property {Base64Resolvable} [banner] The banner of the guild\n   * @property {DefaultMessageNotifications|number} [defaultMessageNotifications] The default message notifications\n   * @property {SystemChannelFlagsResolvable} [systemChannelFlags] The system channel flags of the guild\n   * @property {ChannelResolvable} [rulesChannel] The rules channel of the guild\n   * @property {ChannelResolvable} [publicUpdatesChannel] The community updates channel of the guild\n   * @property {string} [preferredLocale] The preferred locale of the guild\n   */\n\n  /**\n   * Updates the guild with new information - e.g. a new name.\n   * @param {GuildEditData} data The data to update the guild with\n   * @param {string} [reason] Reason for editing this guild\n   * @returns {Promise<Guild>}\n   * @example\n   * // Set the guild name and region\n   * guild.edit({\n   *   name: 'Discord Guild',\n   *   region: 'london',\n   * })\n   *   .then(updated => console.log(`New guild name ${updated} in region ${updated.region}`))\n   *   .catch(console.error);\n   */\n  edit(data, reason) {\n    const _data = {};\n    if (data.name) _data.name = data.name;\n    if (data.region) _data.region = data.region;\n    if (typeof data.verificationLevel !== 'undefined') {\n      _data.verification_level =\n        typeof data.verificationLevel === 'number'\n          ? Number(data.verificationLevel)\n          : VerificationLevels.indexOf(data.verificationLevel);\n    }\n    if (typeof data.afkChannel !== 'undefined') {\n      _data.afk_channel_id = this.client.channels.resolveID(data.afkChannel);\n    }\n    if (typeof data.systemChannel !== 'undefined') {\n      _data.system_channel_id = this.client.channels.resolveID(data.systemChannel);\n    }\n    if (data.afkTimeout) _data.afk_timeout = Number(data.afkTimeout);\n    if (typeof data.icon !== 'undefined') _data.icon = data.icon;\n    if (data.owner) _data.owner_id = this.client.users.resolveID(data.owner);\n    if (data.splash) _data.splash = data.splash;\n    if (data.discoverySplash) _data.discovery_splash = data.discoverySplash;\n    if (data.banner) _data.banner = data.banner;\n    if (typeof data.explicitContentFilter !== 'undefined') {\n      _data.explicit_content_filter =\n        typeof data.explicitContentFilter === 'number'\n          ? data.explicitContentFilter\n          : ExplicitContentFilterLevels.indexOf(data.explicitContentFilter);\n    }\n    if (typeof data.defaultMessageNotifications !== 'undefined') {\n      _data.default_message_notifications =\n        typeof data.defaultMessageNotifications === 'string'\n          ? DefaultMessageNotifications.indexOf(data.defaultMessageNotifications)\n          : data.defaultMessageNotifications;\n    }\n    if (typeof data.systemChannelFlags !== 'undefined') {\n      _data.system_channel_flags = SystemChannelFlags.resolve(data.systemChannelFlags);\n    }\n    if (typeof data.rulesChannel !== 'undefined') {\n      _data.rules_channel_id = this.client.channels.resolveID(data.rulesChannel);\n    }\n    if (typeof data.publicUpdatesChannel !== 'undefined') {\n      _data.public_updates_channel_id = this.client.channels.resolveID(data.publicUpdatesChannel);\n    }\n    if (data.preferredLocale) _data.preferred_locale = data.preferredLocale;\n    return this.client.api\n      .guilds(this.id)\n      .patch({ data: _data, reason })\n      .then(newData => this.client.actions.GuildUpdate.handle(newData).updated);\n  }\n\n  /**\n   * Edits the level of the explicit content filter.\n   * @param {ExplicitContentFilterLevel|number} explicitContentFilter The new level of the explicit content filter\n   * @param {string} [reason] Reason for changing the level of the guild's explicit content filter\n   * @returns {Promise<Guild>}\n   */\n  setExplicitContentFilter(explicitContentFilter, reason) {\n    return this.edit({ explicitContentFilter }, reason);\n  }\n\n  /* eslint-disable max-len */\n  /**\n   * Edits the setting of the default message notifications of the guild.\n   * @param {DefaultMessageNotifications|number} defaultMessageNotifications The new setting for the default message notifications\n   * @param {string} [reason] Reason for changing the setting of the default message notifications\n   * @returns {Promise<Guild>}\n   */\n  setDefaultMessageNotifications(defaultMessageNotifications, reason) {\n    return this.edit({ defaultMessageNotifications }, reason);\n  }\n  /* eslint-enable max-len */\n\n  /**\n   * Edits the flags of the default message notifications of the guild.\n   * @param {SystemChannelFlagsResolvable} systemChannelFlags The new flags for the default message notifications\n   * @param {string} [reason] Reason for changing the flags of the default message notifications\n   * @returns {Promise<Guild>}\n   */\n  setSystemChannelFlags(systemChannelFlags, reason) {\n    return this.edit({ systemChannelFlags }, reason);\n  }\n\n  /**\n   * Edits the name of the guild.\n   * @param {string} name The new name of the guild\n   * @param {string} [reason] Reason for changing the guild's name\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild name\n   * guild.setName('Discord Guild')\n   *  .then(updated => console.log(`Updated guild name to ${updated.name}`))\n   *  .catch(console.error);\n   */\n  setName(name, reason) {\n    return this.edit({ name }, reason);\n  }\n\n  /**\n   * Edits the region of the guild.\n   * @param {string} region The new region of the guild\n   * @param {string} [reason] Reason for changing the guild's region\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild region\n   * guild.setRegion('london')\n   *  .then(updated => console.log(`Updated guild region to ${updated.region}`))\n   *  .catch(console.error);\n   */\n  setRegion(region, reason) {\n    return this.edit({ region }, reason);\n  }\n\n  /**\n   * Edits the verification level of the guild.\n   * @param {VerificationLevel|number} verificationLevel The new verification level of the guild\n   * @param {string} [reason] Reason for changing the guild's verification level\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild verification level\n   * guild.setVerificationLevel(1)\n   *  .then(updated => console.log(`Updated guild verification level to ${guild.verificationLevel}`))\n   *  .catch(console.error);\n   */\n  setVerificationLevel(verificationLevel, reason) {\n    return this.edit({ verificationLevel }, reason);\n  }\n\n  /**\n   * Edits the AFK channel of the guild.\n   * @param {ChannelResolvable} afkChannel The new AFK channel\n   * @param {string} [reason] Reason for changing the guild's AFK channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild AFK channel\n   * guild.setAFKChannel(channel)\n   *  .then(updated => console.log(`Updated guild AFK channel to ${guild.afkChannel.name}`))\n   *  .catch(console.error);\n   */\n  setAFKChannel(afkChannel, reason) {\n    return this.edit({ afkChannel }, reason);\n  }\n\n  /**\n   * Edits the system channel of the guild.\n   * @param {ChannelResolvable} systemChannel The new system channel\n   * @param {string} [reason] Reason for changing the guild's system channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild system channel\n   * guild.setSystemChannel(channel)\n   *  .then(updated => console.log(`Updated guild system channel to ${guild.systemChannel.name}`))\n   *  .catch(console.error);\n   */\n  setSystemChannel(systemChannel, reason) {\n    return this.edit({ systemChannel }, reason);\n  }\n\n  /**\n   * Edits the AFK timeout of the guild.\n   * @param {number} afkTimeout The time in seconds that a user must be idle to be considered AFK\n   * @param {string} [reason] Reason for changing the guild's AFK timeout\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild AFK channel\n   * guild.setAFKTimeout(60)\n   *  .then(updated => console.log(`Updated guild AFK timeout to ${guild.afkTimeout}`))\n   *  .catch(console.error);\n   */\n  setAFKTimeout(afkTimeout, reason) {\n    return this.edit({ afkTimeout }, reason);\n  }\n\n  /**\n   * Sets a new guild icon.\n   * @param {Base64Resolvable|BufferResolvable} icon The new icon of the guild\n   * @param {string} [reason] Reason for changing the guild's icon\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild icon\n   * guild.setIcon('./icon.png')\n   *  .then(updated => console.log('Updated the guild icon'))\n   *  .catch(console.error);\n   */\n  async setIcon(icon, reason) {\n    return this.edit({ icon: await DataResolver.resolveImage(icon), reason });\n  }\n\n  /**\n   * Sets a new owner of the guild.\n   * @param {GuildMemberResolvable} owner The new owner of the guild\n   * @param {string} [reason] Reason for setting the new owner\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild owner\n   * guild.setOwner(guild.members.cache.first())\n   *  .then(updated => console.log(`Updated the guild owner to ${updated.owner.displayName}`))\n   *  .catch(console.error);\n   */\n  setOwner(owner, reason) {\n    return this.edit({ owner }, reason);\n  }\n\n  /**\n   * Sets a new guild invite splash image.\n   * @param {Base64Resolvable|BufferResolvable} splash The new invite splash image of the guild\n   * @param {string} [reason] Reason for changing the guild's invite splash image\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild splash\n   * guild.setSplash('./splash.png')\n   *  .then(updated => console.log('Updated the guild splash'))\n   *  .catch(console.error);\n   */\n  async setSplash(splash, reason) {\n    return this.edit({ splash: await DataResolver.resolveImage(splash), reason });\n  }\n\n  /**\n   * Sets a new guild discovery splash image.\n   * @param {Base64Resolvable|BufferResolvable} discoverySplash The new discovery splash image of the guild\n   * @param {string} [reason] Reason for changing the guild's discovery splash image\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild discovery splash\n   * guild.setDiscoverySplash('./discoverysplash.png')\n   *   .then(updated => console.log('Updated the guild discovery splash'))\n   *   .catch(console.error);\n   */\n  async setDiscoverySplash(discoverySplash, reason) {\n    return this.edit({ discoverySplash: await DataResolver.resolveImage(discoverySplash), reason });\n  }\n\n  /**\n   * Sets a new guild banner.\n   * @param {Base64Resolvable|BufferResolvable} banner The new banner of the guild\n   * @param {string} [reason] Reason for changing the guild's banner\n   * @returns {Promise<Guild>}\n   * @example\n   * guild.setBanner('./banner.png')\n   *  .then(updated => console.log('Updated the guild banner'))\n   *  .catch(console.error);\n   */\n  async setBanner(banner, reason) {\n    return this.edit({ banner: await DataResolver.resolveImage(banner), reason });\n  }\n\n  /**\n   * Edits the rules channel of the guild.\n   * @param {ChannelResolvable} rulesChannel The new rules channel\n   * @param {string} [reason] Reason for changing the guild's rules channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild rules channel\n   * guild.setRulesChannel(channel)\n   *  .then(updated => console.log(`Updated guild rules channel to ${guild.rulesChannel.name}`))\n   *  .catch(console.error);\n   */\n  setRulesChannel(rulesChannel, reason) {\n    return this.edit({ rulesChannel }, reason);\n  }\n\n  /**\n   * Edits the community updates channel of the guild.\n   * @param {ChannelResolvable} publicUpdatesChannel The new community updates channel\n   * @param {string} [reason] Reason for changing the guild's community updates channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild community updates channel\n   * guild.setPublicUpdatesChannel(channel)\n   *  .then(updated => console.log(`Updated guild community updates channel to ${guild.publicUpdatesChannel.name}`))\n   *  .catch(console.error);\n   */\n  setPublicUpdatesChannel(publicUpdatesChannel, reason) {\n    return this.edit({ publicUpdatesChannel }, reason);\n  }\n\n  /**\n   * Edits the preferred locale of the guild.\n   * @param {string} preferredLocale The new preferred locale of the guild\n   * @param {string} [reason] Reason for changing the guild's preferred locale\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild preferred locale\n   * guild.setPreferredLocale('en-US')\n   *  .then(updated => console.log(`Updated guild preferred locale to ${guild.preferredLocale}`))\n   *  .catch(console.error);\n   */\n  setPreferredLocale(preferredLocale, reason) {\n    return this.edit({ preferredLocale }, reason);\n  }\n\n  /**\n   * The data needed for updating a channel's position.\n   * @typedef {Object} ChannelPosition\n   * @property {ChannelResolvable} channel Channel to update\n   * @property {number} position New position for the channel\n   */\n\n  /**\n   * Batch-updates the guild's channels' positions.\n   * @param {ChannelPosition[]} channelPositions Channel positions to update\n   * @returns {Promise<Guild>}\n   * @example\n   * guild.setChannelPositions([{ channel: channelID, position: newChannelIndex }])\n   *   .then(guild => console.log(`Updated channel positions for ${guild}`))\n   *   .catch(console.error);\n   */\n  setChannelPositions(channelPositions) {\n    const updatedChannels = channelPositions.map(r => ({\n      id: this.client.channels.resolveID(r.channel),\n      position: r.position,\n    }));\n\n    return this.client.api\n      .guilds(this.id)\n      .channels.patch({ data: updatedChannels })\n      .then(\n        () =>\n          this.client.actions.GuildChannelsPositionUpdate.handle({\n            guild_id: this.id,\n            channels: updatedChannels,\n          }).guild,\n      );\n  }\n\n  /**\n   * The data needed for updating a guild role's position\n   * @typedef {Object} GuildRolePosition\n   * @property {RoleResolveable} role The ID of the role\n   * @property {number} position The position to update\n   */\n\n  /**\n   * Batch-updates the guild's role positions\n   * @param {GuildRolePosition[]} rolePositions Role positions to update\n   * @returns {Promise<Guild>}\n   * @example\n   * guild.setRolePositions([{ role: roleID, position: updatedRoleIndex }])\n   *  .then(guild => console.log(`Role permissions updated for ${guild}`))\n   *  .catch(console.error);\n   */\n  setRolePositions(rolePositions) {\n    // Make sure rolePositions are prepared for API\n    rolePositions = rolePositions.map(o => ({\n      id: this.roles.resolveID(o.role),\n      position: o.position,\n    }));\n\n    // Call the API to update role positions\n    return this.client.api\n      .guilds(this.id)\n      .roles.patch({\n        data: rolePositions,\n      })\n      .then(\n        () =>\n          this.client.actions.GuildRolesPositionUpdate.handle({\n            guild_id: this.id,\n            roles: rolePositions,\n          }).guild,\n      );\n  }\n\n  /**\n   * Edits the guild's embed.\n   * @param {GuildWidgetData} embed The embed for the guild\n   * @param {string} [reason] Reason for changing the guild's embed\n   * @returns {Promise<Guild>}\n   * @deprecated\n   */\n  setEmbed(embed, reason) {\n    return this.setWidget(embed, reason);\n  }\n\n  /**\n   * Edits the guild's widget.\n   * @param {GuildWidgetData} widget The widget for the guild\n   * @param {string} [reason] Reason for changing the guild's widget\n   * @returns {Promise<Guild>}\n   */\n  setWidget(widget, reason) {\n    return this.client.api\n      .guilds(this.id)\n      .widget.patch({\n        data: {\n          enabled: widget.enabled,\n          channel_id: this.channels.resolveID(widget.channel),\n        },\n        reason,\n      })\n      .then(() => this);\n  }\n\n  /**\n   * Leaves the guild.\n   * @returns {Promise<Guild>}\n   * @example\n   * // Leave a guild\n   * guild.leave()\n   *   .then(g => console.log(`Left the guild ${g}`))\n   *   .catch(console.error);\n   */\n  leave() {\n    if (this.ownerID === this.client.user.id) return Promise.reject(new Error('GUILD_OWNED'));\n    return this.client.api\n      .users('@me')\n      .guilds(this.id)\n      .delete()\n      .then(() => this.client.actions.GuildDelete.handle({ id: this.id }).guild);\n  }\n\n  /**\n   * Deletes the guild.\n   * @returns {Promise<Guild>}\n   * @example\n   * // Delete a guild\n   * guild.delete()\n   *   .then(g => console.log(`Deleted the guild ${g}`))\n   *   .catch(console.error);\n   */\n  delete() {\n    return this.client.api\n      .guilds(this.id)\n      .delete()\n      .then(() => this.client.actions.GuildDelete.handle({ id: this.id }).guild);\n  }\n\n  /**\n   * Whether this guild equals another guild. It compares all properties, so for most operations\n   * it is advisable to just compare `guild.id === guild2.id` as it is much faster and is often\n   * what most users need.\n   * @param {Guild} guild The guild to compare with\n   * @returns {boolean}\n   */\n  equals(guild) {\n    let equal =\n      guild &&\n      guild instanceof this.constructor &&\n      this.id === guild.id &&\n      this.available === guild.available &&\n      this.splash === guild.splash &&\n      this.discoverySplash === guild.discoverySplash &&\n      this.region === guild.region &&\n      this.name === guild.name &&\n      this.memberCount === guild.memberCount &&\n      this.large === guild.large &&\n      this.icon === guild.icon &&\n      this.ownerID === guild.ownerID &&\n      this.verificationLevel === guild.verificationLevel &&\n      this.embedEnabled === guild.embedEnabled &&\n      (this.features === guild.features ||\n        (this.features.length === guild.features.length &&\n          this.features.every((feat, i) => feat === guild.features[i])));\n\n    if (equal) {\n      if (this.embedChannel) {\n        if (!guild.embedChannel || this.embedChannel.id !== guild.embedChannel.id) equal = false;\n      } else if (guild.embedChannel) {\n        equal = false;\n      }\n    }\n\n    return equal;\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the guild's name instead of the Guild object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from My Guild!\n   * console.log(`Hello from ${guild}!`);\n   */\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    const json = super.toJSON({\n      available: false,\n      createdTimestamp: true,\n      nameAcronym: true,\n      presences: false,\n      voiceStates: false,\n    });\n    json.iconURL = this.iconURL();\n    json.splashURL = this.splashURL();\n    json.discoverySplashURL = this.discoverySplashURL();\n    json.bannerURL = this.bannerURL();\n    return json;\n  }\n\n  /**\n   * Creates a collection of this guild's roles, sorted by their position and IDs.\n   * @returns {Collection<Role>}\n   * @private\n   */\n  _sortedRoles() {\n    return Util.discordSort(this.roles.cache);\n  }\n\n  /**\n   * Creates a collection of this guild's or a specific category's channels, sorted by their position and IDs.\n   * @param {GuildChannel} [channel] Category to get the channels of\n   * @returns {Collection<GuildChannel>}\n   * @private\n   */\n  _sortedChannels(channel) {\n    const category = channel.type === ChannelTypes.CATEGORY;\n    return Util.discordSort(\n      this.channels.cache.filter(\n        c =>\n          (['text', 'news', 'store'].includes(channel.type)\n            ? ['text', 'news', 'store'].includes(c.type)\n            : c.type === channel.type) &&\n          (category || c.parent === channel.parent),\n      ),\n    );\n  }\n}\n\nGuild.prototype.setEmbed = deprecate(Guild.prototype.setEmbed, 'Guild#setEmbed: Use setWidget instead');\n\nGuild.prototype.fetchEmbed = deprecate(Guild.prototype.fetchEmbed, 'Guild#fetchEmbed: Use fetchWidget instead');\n\nGuild.prototype.fetchVanityCode = deprecate(\n  Guild.prototype.fetchVanityCode,\n  'Guild#fetchVanityCode: Use fetchVanityData() instead',\n);\n\nmodule.exports = Guild;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}