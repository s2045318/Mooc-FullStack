{"ast":null,"code":"'use strict';\n\nconst TextChannel = require('./TextChannel');\nconst {\n  Error\n} = require('../errors');\n\n/**\n * Represents a guild news channel on Discord.\n * @extends {TextChannel}\n */\nclass NewsChannel extends TextChannel {\n  _patch(data) {\n    super._patch(data);\n\n    // News channels don't have a rate limit per user, remove it\n    this.rateLimitPerUser = undefined;\n  }\n\n  /**\n   * Adds the target to this channel's followers.\n   * @param {GuildChannelResolvable} channel The channel where the webhook should be created\n   * @param {string} [reason] Reason for creating the webhook\n   * @returns {Promise<NewsChannel>}\n   * @example\n   * if (channel.type === 'news') {\n   *   channel.addFollower('222197033908436994', 'Important announcements')\n   *     .then(() => console.log('Added follower'))\n   *     .catch(console.error);\n   * }\n   */\n  async addFollower(channel, reason) {\n    const channelID = this.guild.channels.resolveID(channel);\n    if (!channelID) throw new Error('GUILD_CHANNEL_RESOLVE');\n    await this.client.api.channels(this.id).followers.post({\n      data: {\n        webhook_channel_id: channelID\n      },\n      reason\n    });\n    return this;\n  }\n}\nmodule.exports = NewsChannel;","map":{"version":3,"names":["TextChannel","require","Error","NewsChannel","_patch","data","rateLimitPerUser","undefined","addFollower","channel","reason","channelID","guild","channels","resolveID","client","api","id","followers","post","webhook_channel_id","module","exports"],"sources":["/Users/jessegill/node_modules/discord.js/src/structures/NewsChannel.js"],"sourcesContent":["'use strict';\n\nconst TextChannel = require('./TextChannel');\nconst { Error } = require('../errors');\n\n/**\n * Represents a guild news channel on Discord.\n * @extends {TextChannel}\n */\nclass NewsChannel extends TextChannel {\n  _patch(data) {\n    super._patch(data);\n\n    // News channels don't have a rate limit per user, remove it\n    this.rateLimitPerUser = undefined;\n  }\n\n  /**\n   * Adds the target to this channel's followers.\n   * @param {GuildChannelResolvable} channel The channel where the webhook should be created\n   * @param {string} [reason] Reason for creating the webhook\n   * @returns {Promise<NewsChannel>}\n   * @example\n   * if (channel.type === 'news') {\n   *   channel.addFollower('222197033908436994', 'Important announcements')\n   *     .then(() => console.log('Added follower'))\n   *     .catch(console.error);\n   * }\n   */\n  async addFollower(channel, reason) {\n    const channelID = this.guild.channels.resolveID(channel);\n    if (!channelID) throw new Error('GUILD_CHANNEL_RESOLVE');\n    await this.client.api.channels(this.id).followers.post({ data: { webhook_channel_id: channelID }, reason });\n    return this;\n  }\n}\n\nmodule.exports = NewsChannel;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,WAAW,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC5C,MAAM;EAAEC;AAAM,CAAC,GAAGD,OAAO,CAAC,WAAW,CAAC;;AAEtC;AACA;AACA;AACA;AACA,MAAME,WAAW,SAASH,WAAW,CAAC;EACpCI,MAAM,CAACC,IAAI,EAAE;IACX,KAAK,CAACD,MAAM,CAACC,IAAI,CAAC;;IAElB;IACA,IAAI,CAACC,gBAAgB,GAAGC,SAAS;EACnC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMC,WAAW,CAACC,OAAO,EAAEC,MAAM,EAAE;IACjC,MAAMC,SAAS,GAAG,IAAI,CAACC,KAAK,CAACC,QAAQ,CAACC,SAAS,CAACL,OAAO,CAAC;IACxD,IAAI,CAACE,SAAS,EAAE,MAAM,IAAIT,KAAK,CAAC,uBAAuB,CAAC;IACxD,MAAM,IAAI,CAACa,MAAM,CAACC,GAAG,CAACH,QAAQ,CAAC,IAAI,CAACI,EAAE,CAAC,CAACC,SAAS,CAACC,IAAI,CAAC;MAAEd,IAAI,EAAE;QAAEe,kBAAkB,EAAET;MAAU,CAAC;MAAED;IAAO,CAAC,CAAC;IAC3G,OAAO,IAAI;EACb;AACF;AAEAW,MAAM,CAACC,OAAO,GAAGnB,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}