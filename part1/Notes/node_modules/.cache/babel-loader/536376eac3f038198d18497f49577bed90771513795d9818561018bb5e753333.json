{"ast":null,"code":"'use strict';\n\nconst GuildChannel = require('./GuildChannel');\nconst Webhook = require('./Webhook');\nconst TextBasedChannel = require('./interfaces/TextBasedChannel');\nconst MessageManager = require('../managers/MessageManager');\nconst Collection = require('../util/Collection');\nconst DataResolver = require('../util/DataResolver');\n\n/**\n * Represents a guild text channel on Discord.\n * @extends {GuildChannel}\n * @implements {TextBasedChannel}\n */\nclass TextChannel extends GuildChannel {\n  /**\n   * @param {Guild} guild The guild the text channel is part of\n   * @param {Object} data The data for the text channel\n   */\n  constructor(guild, data) {\n    super(guild, data);\n    /**\n     * A manager of the messages sent to this channel\n     * @type {MessageManager}\n     */\n    this.messages = new MessageManager(this);\n\n    /**\n     * If the guild considers this channel NSFW\n     * @type {boolean}\n     * @readonly\n     */\n    this.nsfw = Boolean(data.nsfw);\n    this._typing = new Map();\n  }\n  _patch(data) {\n    super._patch(data);\n\n    /**\n     * The topic of the text channel\n     * @type {?string}\n     */\n    this.topic = data.topic;\n    if (typeof data.nsfw !== 'undefined') this.nsfw = Boolean(data.nsfw);\n\n    /**\n     * The ID of the last message sent in this channel, if one was sent\n     * @type {?Snowflake}\n     */\n    this.lastMessageID = data.last_message_id;\n\n    /**\n     * The ratelimit per user for this channel in seconds\n     * @type {number}\n     */\n    this.rateLimitPerUser = data.rate_limit_per_user || 0;\n\n    /**\n     * The timestamp when the last pinned message was pinned, if there was one\n     * @type {?number}\n     */\n    this.lastPinTimestamp = data.last_pin_timestamp ? new Date(data.last_pin_timestamp).getTime() : null;\n    if (data.messages) for (const message of data.messages) this.messages.add(message);\n  }\n\n  /**\n   * Sets the rate limit per user for this channel.\n   * @param {number} rateLimitPerUser The new ratelimit in seconds\n   * @param {string} [reason] Reason for changing the channel's ratelimits\n   * @returns {Promise<TextChannel>}\n   */\n  setRateLimitPerUser(rateLimitPerUser, reason) {\n    return this.edit({\n      rateLimitPerUser\n    }, reason);\n  }\n\n  /**\n   * Sets whether this channel is flagged as NSFW.\n   * @param {boolean} nsfw Whether the channel should be considered NSFW\n   * @param {string} [reason] Reason for changing the channel's NSFW flag\n   * @returns {Promise<TextChannel>}\n   */\n  setNSFW(nsfw, reason) {\n    return this.edit({\n      nsfw\n    }, reason);\n  }\n\n  /**\n   * Fetches all webhooks for the channel.\n   * @returns {Promise<Collection<Snowflake, Webhook>>}\n   * @example\n   * // Fetch webhooks\n   * channel.fetchWebhooks()\n   *   .then(hooks => console.log(`This channel has ${hooks.size} hooks`))\n   *   .catch(console.error);\n   */\n  fetchWebhooks() {\n    return this.client.api.channels[this.id].webhooks.get().then(data => {\n      const hooks = new Collection();\n      for (const hook of data) hooks.set(hook.id, new Webhook(this.client, hook));\n      return hooks;\n    });\n  }\n\n  /**\n   * Creates a webhook for the channel.\n   * @param {string} name The name of the webhook\n   * @param {Object} [options] Options for creating the webhook\n   * @param {BufferResolvable|Base64Resolvable} [options.avatar] Avatar for the webhook\n   * @param {string} [options.reason] Reason for creating the webhook\n   * @returns {Promise<Webhook>} webhook The created webhook\n   * @example\n   * // Create a webhook for the current channel\n   * channel.createWebhook('Snek', {\n   *   avatar: 'https://i.imgur.com/mI8XcpG.jpg',\n   *   reason: 'Needed a cool new Webhook'\n   * })\n   *   .then(console.log)\n   *   .catch(console.error)\n   */\n  async createWebhook(name) {\n    let {\n      avatar,\n      reason\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (typeof avatar === 'string' && !avatar.startsWith('data:')) {\n      avatar = await DataResolver.resolveImage(avatar);\n    }\n    return this.client.api.channels[this.id].webhooks.post({\n      data: {\n        name,\n        avatar\n      },\n      reason\n    }).then(data => new Webhook(this.client, data));\n  }\n\n  // These are here only for documentation purposes - they are implemented by TextBasedChannel\n  /* eslint-disable no-empty-function */\n  get lastMessage() {}\n  get lastPinAt() {}\n  send() {}\n  startTyping() {}\n  stopTyping() {}\n  get typing() {}\n  get typingCount() {}\n  createMessageCollector() {}\n  awaitMessages() {}\n  bulkDelete() {}\n}\nTextBasedChannel.applyToClass(TextChannel, true);\nmodule.exports = TextChannel;","map":{"version":3,"names":["GuildChannel","require","Webhook","TextBasedChannel","MessageManager","Collection","DataResolver","TextChannel","constructor","guild","data","messages","nsfw","Boolean","_typing","Map","_patch","topic","lastMessageID","last_message_id","rateLimitPerUser","rate_limit_per_user","lastPinTimestamp","last_pin_timestamp","Date","getTime","message","add","setRateLimitPerUser","reason","edit","setNSFW","fetchWebhooks","client","api","channels","id","webhooks","get","then","hooks","hook","set","createWebhook","name","avatar","startsWith","resolveImage","post","lastMessage","lastPinAt","send","startTyping","stopTyping","typing","typingCount","createMessageCollector","awaitMessages","bulkDelete","applyToClass","module","exports"],"sources":["/Users/jessegill/node_modules/discord.js/src/structures/TextChannel.js"],"sourcesContent":["'use strict';\n\nconst GuildChannel = require('./GuildChannel');\nconst Webhook = require('./Webhook');\nconst TextBasedChannel = require('./interfaces/TextBasedChannel');\nconst MessageManager = require('../managers/MessageManager');\nconst Collection = require('../util/Collection');\nconst DataResolver = require('../util/DataResolver');\n\n/**\n * Represents a guild text channel on Discord.\n * @extends {GuildChannel}\n * @implements {TextBasedChannel}\n */\nclass TextChannel extends GuildChannel {\n  /**\n   * @param {Guild} guild The guild the text channel is part of\n   * @param {Object} data The data for the text channel\n   */\n  constructor(guild, data) {\n    super(guild, data);\n    /**\n     * A manager of the messages sent to this channel\n     * @type {MessageManager}\n     */\n    this.messages = new MessageManager(this);\n\n    /**\n     * If the guild considers this channel NSFW\n     * @type {boolean}\n     * @readonly\n     */\n    this.nsfw = Boolean(data.nsfw);\n    this._typing = new Map();\n  }\n\n  _patch(data) {\n    super._patch(data);\n\n    /**\n     * The topic of the text channel\n     * @type {?string}\n     */\n    this.topic = data.topic;\n\n    if (typeof data.nsfw !== 'undefined') this.nsfw = Boolean(data.nsfw);\n\n    /**\n     * The ID of the last message sent in this channel, if one was sent\n     * @type {?Snowflake}\n     */\n    this.lastMessageID = data.last_message_id;\n\n    /**\n     * The ratelimit per user for this channel in seconds\n     * @type {number}\n     */\n    this.rateLimitPerUser = data.rate_limit_per_user || 0;\n\n    /**\n     * The timestamp when the last pinned message was pinned, if there was one\n     * @type {?number}\n     */\n    this.lastPinTimestamp = data.last_pin_timestamp ? new Date(data.last_pin_timestamp).getTime() : null;\n\n    if (data.messages) for (const message of data.messages) this.messages.add(message);\n  }\n\n  /**\n   * Sets the rate limit per user for this channel.\n   * @param {number} rateLimitPerUser The new ratelimit in seconds\n   * @param {string} [reason] Reason for changing the channel's ratelimits\n   * @returns {Promise<TextChannel>}\n   */\n  setRateLimitPerUser(rateLimitPerUser, reason) {\n    return this.edit({ rateLimitPerUser }, reason);\n  }\n\n  /**\n   * Sets whether this channel is flagged as NSFW.\n   * @param {boolean} nsfw Whether the channel should be considered NSFW\n   * @param {string} [reason] Reason for changing the channel's NSFW flag\n   * @returns {Promise<TextChannel>}\n   */\n  setNSFW(nsfw, reason) {\n    return this.edit({ nsfw }, reason);\n  }\n\n  /**\n   * Fetches all webhooks for the channel.\n   * @returns {Promise<Collection<Snowflake, Webhook>>}\n   * @example\n   * // Fetch webhooks\n   * channel.fetchWebhooks()\n   *   .then(hooks => console.log(`This channel has ${hooks.size} hooks`))\n   *   .catch(console.error);\n   */\n  fetchWebhooks() {\n    return this.client.api.channels[this.id].webhooks.get().then(data => {\n      const hooks = new Collection();\n      for (const hook of data) hooks.set(hook.id, new Webhook(this.client, hook));\n      return hooks;\n    });\n  }\n\n  /**\n   * Creates a webhook for the channel.\n   * @param {string} name The name of the webhook\n   * @param {Object} [options] Options for creating the webhook\n   * @param {BufferResolvable|Base64Resolvable} [options.avatar] Avatar for the webhook\n   * @param {string} [options.reason] Reason for creating the webhook\n   * @returns {Promise<Webhook>} webhook The created webhook\n   * @example\n   * // Create a webhook for the current channel\n   * channel.createWebhook('Snek', {\n   *   avatar: 'https://i.imgur.com/mI8XcpG.jpg',\n   *   reason: 'Needed a cool new Webhook'\n   * })\n   *   .then(console.log)\n   *   .catch(console.error)\n   */\n  async createWebhook(name, { avatar, reason } = {}) {\n    if (typeof avatar === 'string' && !avatar.startsWith('data:')) {\n      avatar = await DataResolver.resolveImage(avatar);\n    }\n    return this.client.api.channels[this.id].webhooks\n      .post({\n        data: {\n          name,\n          avatar,\n        },\n        reason,\n      })\n      .then(data => new Webhook(this.client, data));\n  }\n\n  // These are here only for documentation purposes - they are implemented by TextBasedChannel\n  /* eslint-disable no-empty-function */\n  get lastMessage() {}\n  get lastPinAt() {}\n  send() {}\n  startTyping() {}\n  stopTyping() {}\n  get typing() {}\n  get typingCount() {}\n  createMessageCollector() {}\n  awaitMessages() {}\n  bulkDelete() {}\n}\n\nTextBasedChannel.applyToClass(TextChannel, true);\n\nmodule.exports = TextChannel;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}