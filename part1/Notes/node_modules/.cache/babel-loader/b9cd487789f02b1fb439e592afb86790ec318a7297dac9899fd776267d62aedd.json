{"ast":null,"code":"'use strict';\n\nconst Base = require('./Base');\nconst {\n  Error,\n  TypeError\n} = require('../errors');\nconst {\n  browser\n} = require('../util/Constants');\n\n/**\n * Represents the voice state for a Guild Member.\n */\nclass VoiceState extends Base {\n  /**\n   * @param {Guild} guild The guild the voice state is part of\n   * @param {Object} data The data for the voice state\n   */\n  constructor(guild, data) {\n    super(guild.client);\n    /**\n     * The guild of this voice state\n     * @type {Guild}\n     */\n    this.guild = guild;\n    /**\n     * The ID of the member of this voice state\n     * @type {Snowflake}\n     */\n    this.id = data.user_id;\n    this._patch(data);\n  }\n  _patch(data) {\n    /**\n     * Whether this member is deafened server-wide\n     * @type {?boolean}\n     */\n    this.serverDeaf = 'deaf' in data ? data.deaf : null;\n    /**\n     * Whether this member is muted server-wide\n     * @type {?boolean}\n     */\n    this.serverMute = 'mute' in data ? data.mute : null;\n    /**\n     * Whether this member is self-deafened\n     * @type {?boolean}\n     */\n    this.selfDeaf = 'self_deaf' in data ? data.self_deaf : null;\n    /**\n     * Whether this member is self-muted\n     * @type {?boolean}\n     */\n    this.selfMute = 'self_mute' in data ? data.self_mute : null;\n    /**\n     * Whether this member's camera is enabled\n     * @type {?boolean}\n     */\n    this.selfVideo = 'self_video' in data ? data.self_video : null;\n    /**\n     * The session ID of this member's connection\n     * @type {?string}\n     */\n    this.sessionID = 'session_id' in data ? data.session_id : null;\n    /**\n     * Whether this member is streaming using \"Go Live\"\n     * @type {boolean}\n     */\n    this.streaming = data.self_stream || false;\n    /**\n     * The ID of the voice channel that this member is in\n     * @type {?Snowflake}\n     */\n    this.channelID = data.channel_id || null;\n    return this;\n  }\n\n  /**\n   * The member that this voice state belongs to\n   * @type {?GuildMember}\n   * @readonly\n   */\n  get member() {\n    return this.guild.members.cache.get(this.id) || null;\n  }\n\n  /**\n   * The channel that the member is connected to\n   * @type {?VoiceChannel}\n   * @readonly\n   */\n  get channel() {\n    return this.guild.channels.cache.get(this.channelID) || null;\n  }\n\n  /**\n   * If this is a voice state of the client user, then this will refer to the active VoiceConnection for this guild\n   * @type {?VoiceConnection}\n   * @readonly\n   */\n  get connection() {\n    if (browser || this.id !== this.client.user.id) return null;\n    return this.client.voice.connections.get(this.guild.id) || null;\n  }\n\n  /**\n   * Whether this member is either self-deafened or server-deafened\n   * @type {?boolean}\n   * @readonly\n   */\n  get deaf() {\n    return this.serverDeaf || this.selfDeaf;\n  }\n\n  /**\n   * Whether this member is either self-muted or server-muted\n   * @type {?boolean}\n   * @readonly\n   */\n  get mute() {\n    return this.serverMute || this.selfMute;\n  }\n\n  /**\n   * Whether this member is currently speaking. A boolean if the information is available (aka\n   * the bot is connected to any voice channel in the guild), otherwise this is null\n   * @type {?boolean}\n   * @readonly\n   */\n  get speaking() {\n    return this.channel && this.channel.connection ? Boolean(this.channel.connection._speaking.get(this.id)) : null;\n  }\n\n  /**\n   * Mutes/unmutes the member of this voice state.\n   * @param {boolean} mute Whether or not the member should be muted\n   * @param {string} [reason] Reason for muting or unmuting\n   * @returns {Promise<GuildMember>}\n   */\n  setMute(mute, reason) {\n    return this.member ? this.member.edit({\n      mute\n    }, reason) : Promise.reject(new Error('VOICE_STATE_UNCACHED_MEMBER'));\n  }\n\n  /**\n   * Deafens/undeafens the member of this voice state.\n   * @param {boolean} deaf Whether or not the member should be deafened\n   * @param {string} [reason] Reason for deafening or undeafening\n   * @returns {Promise<GuildMember>}\n   */\n  setDeaf(deaf, reason) {\n    return this.member ? this.member.edit({\n      deaf\n    }, reason) : Promise.reject(new Error('VOICE_STATE_UNCACHED_MEMBER'));\n  }\n\n  /**\n   * Kicks the member from the voice channel.\n   * @param {string} [reason] Reason for kicking member from the channel\n   * @returns {Promise<GuildMember>}\n   */\n  kick(reason) {\n    return this.setChannel(null, reason);\n  }\n\n  /**\n   * Moves the member to a different channel, or disconnects them from the one they're in.\n   * @param {ChannelResolvable|null} [channel] Channel to move the member to, or `null` if you want to disconnect them\n   * from voice.\n   * @param {string} [reason] Reason for moving member to another channel or disconnecting\n   * @returns {Promise<GuildMember>}\n   */\n  setChannel(channel, reason) {\n    return this.member ? this.member.edit({\n      channel\n    }, reason) : Promise.reject(new Error('VOICE_STATE_UNCACHED_MEMBER'));\n  }\n\n  /**\n   * Self-mutes/unmutes the bot for this voice state.\n   * @param {boolean} mute Whether or not the bot should be self-muted\n   * @returns {Promise<boolean>} true if the voice state was successfully updated, otherwise false\n   */\n  async setSelfMute(mute) {\n    if (this.id !== this.client.user.id) throw new Error('VOICE_STATE_NOT_OWN');\n    if (typeof mute !== 'boolean') throw new TypeError('VOICE_STATE_INVALID_TYPE', 'mute');\n    if (!this.connection) return false;\n    this.selfMute = mute;\n    await this.connection.sendVoiceStateUpdate();\n    return true;\n  }\n\n  /**\n   * Self-deafens/undeafens the bot for this voice state.\n   * @param {boolean} deaf Whether or not the bot should be self-deafened\n   * @returns {Promise<boolean>} true if the voice state was successfully updated, otherwise false\n   */\n  async setSelfDeaf(deaf) {\n    if (this.id !== this.client.user.id) return new Error('VOICE_STATE_NOT_OWN');\n    if (typeof deaf !== 'boolean') return new TypeError('VOICE_STATE_INVALID_TYPE', 'deaf');\n    if (!this.connection) return false;\n    this.selfDeaf = deaf;\n    await this.connection.sendVoiceStateUpdate();\n    return true;\n  }\n  toJSON() {\n    return super.toJSON({\n      id: true,\n      serverDeaf: true,\n      serverMute: true,\n      selfDeaf: true,\n      selfMute: true,\n      sessionID: true,\n      channelID: 'channel'\n    });\n  }\n}\nmodule.exports = VoiceState;","map":{"version":3,"names":["Base","require","Error","TypeError","browser","VoiceState","constructor","guild","data","client","id","user_id","_patch","serverDeaf","deaf","serverMute","mute","selfDeaf","self_deaf","selfMute","self_mute","selfVideo","self_video","sessionID","session_id","streaming","self_stream","channelID","channel_id","member","members","cache","get","channel","channels","connection","user","voice","connections","speaking","Boolean","_speaking","setMute","reason","edit","Promise","reject","setDeaf","kick","setChannel","setSelfMute","sendVoiceStateUpdate","setSelfDeaf","toJSON","module","exports"],"sources":["/Users/jessegill/node_modules/discord.js/src/structures/VoiceState.js"],"sourcesContent":["'use strict';\n\nconst Base = require('./Base');\nconst { Error, TypeError } = require('../errors');\nconst { browser } = require('../util/Constants');\n\n/**\n * Represents the voice state for a Guild Member.\n */\nclass VoiceState extends Base {\n  /**\n   * @param {Guild} guild The guild the voice state is part of\n   * @param {Object} data The data for the voice state\n   */\n  constructor(guild, data) {\n    super(guild.client);\n    /**\n     * The guild of this voice state\n     * @type {Guild}\n     */\n    this.guild = guild;\n    /**\n     * The ID of the member of this voice state\n     * @type {Snowflake}\n     */\n    this.id = data.user_id;\n    this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * Whether this member is deafened server-wide\n     * @type {?boolean}\n     */\n    this.serverDeaf = 'deaf' in data ? data.deaf : null;\n    /**\n     * Whether this member is muted server-wide\n     * @type {?boolean}\n     */\n    this.serverMute = 'mute' in data ? data.mute : null;\n    /**\n     * Whether this member is self-deafened\n     * @type {?boolean}\n     */\n    this.selfDeaf = 'self_deaf' in data ? data.self_deaf : null;\n    /**\n     * Whether this member is self-muted\n     * @type {?boolean}\n     */\n    this.selfMute = 'self_mute' in data ? data.self_mute : null;\n    /**\n     * Whether this member's camera is enabled\n     * @type {?boolean}\n     */\n    this.selfVideo = 'self_video' in data ? data.self_video : null;\n    /**\n     * The session ID of this member's connection\n     * @type {?string}\n     */\n    this.sessionID = 'session_id' in data ? data.session_id : null;\n    /**\n     * Whether this member is streaming using \"Go Live\"\n     * @type {boolean}\n     */\n    this.streaming = data.self_stream || false;\n    /**\n     * The ID of the voice channel that this member is in\n     * @type {?Snowflake}\n     */\n    this.channelID = data.channel_id || null;\n    return this;\n  }\n\n  /**\n   * The member that this voice state belongs to\n   * @type {?GuildMember}\n   * @readonly\n   */\n  get member() {\n    return this.guild.members.cache.get(this.id) || null;\n  }\n\n  /**\n   * The channel that the member is connected to\n   * @type {?VoiceChannel}\n   * @readonly\n   */\n  get channel() {\n    return this.guild.channels.cache.get(this.channelID) || null;\n  }\n\n  /**\n   * If this is a voice state of the client user, then this will refer to the active VoiceConnection for this guild\n   * @type {?VoiceConnection}\n   * @readonly\n   */\n  get connection() {\n    if (browser || this.id !== this.client.user.id) return null;\n    return this.client.voice.connections.get(this.guild.id) || null;\n  }\n\n  /**\n   * Whether this member is either self-deafened or server-deafened\n   * @type {?boolean}\n   * @readonly\n   */\n  get deaf() {\n    return this.serverDeaf || this.selfDeaf;\n  }\n\n  /**\n   * Whether this member is either self-muted or server-muted\n   * @type {?boolean}\n   * @readonly\n   */\n  get mute() {\n    return this.serverMute || this.selfMute;\n  }\n\n  /**\n   * Whether this member is currently speaking. A boolean if the information is available (aka\n   * the bot is connected to any voice channel in the guild), otherwise this is null\n   * @type {?boolean}\n   * @readonly\n   */\n  get speaking() {\n    return this.channel && this.channel.connection ? Boolean(this.channel.connection._speaking.get(this.id)) : null;\n  }\n\n  /**\n   * Mutes/unmutes the member of this voice state.\n   * @param {boolean} mute Whether or not the member should be muted\n   * @param {string} [reason] Reason for muting or unmuting\n   * @returns {Promise<GuildMember>}\n   */\n  setMute(mute, reason) {\n    return this.member ? this.member.edit({ mute }, reason) : Promise.reject(new Error('VOICE_STATE_UNCACHED_MEMBER'));\n  }\n\n  /**\n   * Deafens/undeafens the member of this voice state.\n   * @param {boolean} deaf Whether or not the member should be deafened\n   * @param {string} [reason] Reason for deafening or undeafening\n   * @returns {Promise<GuildMember>}\n   */\n  setDeaf(deaf, reason) {\n    return this.member ? this.member.edit({ deaf }, reason) : Promise.reject(new Error('VOICE_STATE_UNCACHED_MEMBER'));\n  }\n\n  /**\n   * Kicks the member from the voice channel.\n   * @param {string} [reason] Reason for kicking member from the channel\n   * @returns {Promise<GuildMember>}\n   */\n  kick(reason) {\n    return this.setChannel(null, reason);\n  }\n\n  /**\n   * Moves the member to a different channel, or disconnects them from the one they're in.\n   * @param {ChannelResolvable|null} [channel] Channel to move the member to, or `null` if you want to disconnect them\n   * from voice.\n   * @param {string} [reason] Reason for moving member to another channel or disconnecting\n   * @returns {Promise<GuildMember>}\n   */\n  setChannel(channel, reason) {\n    return this.member\n      ? this.member.edit({ channel }, reason)\n      : Promise.reject(new Error('VOICE_STATE_UNCACHED_MEMBER'));\n  }\n\n  /**\n   * Self-mutes/unmutes the bot for this voice state.\n   * @param {boolean} mute Whether or not the bot should be self-muted\n   * @returns {Promise<boolean>} true if the voice state was successfully updated, otherwise false\n   */\n  async setSelfMute(mute) {\n    if (this.id !== this.client.user.id) throw new Error('VOICE_STATE_NOT_OWN');\n    if (typeof mute !== 'boolean') throw new TypeError('VOICE_STATE_INVALID_TYPE', 'mute');\n    if (!this.connection) return false;\n    this.selfMute = mute;\n    await this.connection.sendVoiceStateUpdate();\n    return true;\n  }\n\n  /**\n   * Self-deafens/undeafens the bot for this voice state.\n   * @param {boolean} deaf Whether or not the bot should be self-deafened\n   * @returns {Promise<boolean>} true if the voice state was successfully updated, otherwise false\n   */\n  async setSelfDeaf(deaf) {\n    if (this.id !== this.client.user.id) return new Error('VOICE_STATE_NOT_OWN');\n    if (typeof deaf !== 'boolean') return new TypeError('VOICE_STATE_INVALID_TYPE', 'deaf');\n    if (!this.connection) return false;\n    this.selfDeaf = deaf;\n    await this.connection.sendVoiceStateUpdate();\n    return true;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      id: true,\n      serverDeaf: true,\n      serverMute: true,\n      selfDeaf: true,\n      selfMute: true,\n      sessionID: true,\n      channelID: 'channel',\n    });\n  }\n}\n\nmodule.exports = VoiceState;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}