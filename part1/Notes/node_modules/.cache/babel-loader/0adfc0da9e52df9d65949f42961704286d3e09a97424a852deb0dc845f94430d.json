{"ast":null,"code":"'use strict';\n\nconst BaseManager = require('./BaseManager');\nconst {\n  TypeError\n} = require('../errors');\nconst GuildEmoji = require('../structures/GuildEmoji');\nconst ReactionEmoji = require('../structures/ReactionEmoji');\nconst Collection = require('../util/Collection');\nconst DataResolver = require('../util/DataResolver');\nconst {\n  parseEmoji\n} = require('../util/Util');\n\n/**\n * Manages API methods for GuildEmojis and stores their cache.\n * @extends {BaseManager}\n */\nclass GuildEmojiManager extends BaseManager {\n  constructor(guild, iterable) {\n    super(guild.client, iterable, GuildEmoji);\n    /**\n     * The guild this manager belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n\n  /**\n   * The cache of GuildEmojis\n   * @type {Collection<Snowflake, GuildEmoji>}\n   * @name GuildEmojiManager#cache\n   */\n\n  add(data, cache) {\n    return super.add(data, cache, {\n      extras: [this.guild]\n    });\n  }\n\n  /**\n   * Creates a new custom emoji in the guild.\n   * @param {BufferResolvable|Base64Resolvable} attachment The image for the emoji\n   * @param {string} name The name for the emoji\n   * @param {Object} [options] Options\n   * @param {Collection<Snowflake, Role>|RoleResolvable[]} [options.roles] Roles to limit the emoji to\n   * @param {string} [options.reason] Reason for creating the emoji\n   * @returns {Promise<Emoji>} The created emoji\n   * @example\n   * // Create a new emoji from a url\n   * guild.emojis.create('https://i.imgur.com/w3duR07.png', 'rip')\n   *   .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))\n   *   .catch(console.error);\n   * @example\n   * // Create a new emoji from a file on your computer\n   * guild.emojis.create('./memes/banana.png', 'banana')\n   *   .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))\n   *   .catch(console.error);\n   */\n  async create(attachment, name) {\n    let {\n      roles,\n      reason\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    attachment = await DataResolver.resolveImage(attachment);\n    if (!attachment) throw new TypeError('REQ_RESOURCE_TYPE');\n    const data = {\n      image: attachment,\n      name\n    };\n    if (roles) {\n      data.roles = [];\n      for (let role of roles instanceof Collection ? roles.values() : roles) {\n        role = this.guild.roles.resolve(role);\n        if (!role) {\n          return Promise.reject(new TypeError('INVALID_TYPE', 'options.roles', 'Array or Collection of Roles or Snowflakes', true));\n        }\n        data.roles.push(role.id);\n      }\n    }\n    return this.client.api.guilds(this.guild.id).emojis.post({\n      data,\n      reason\n    }).then(emoji => this.client.actions.GuildEmojiCreate.handle(this.guild, emoji).emoji);\n  }\n\n  /**\n   * Data that can be resolved into an GuildEmoji object. This can be:\n   * * A custom emoji ID\n   * * A GuildEmoji object\n   * * A ReactionEmoji object\n   * @typedef {Snowflake|GuildEmoji|ReactionEmoji} EmojiResolvable\n   */\n\n  /**\n   * Resolves an EmojiResolvable to an Emoji object.\n   * @param {EmojiResolvable} emoji The Emoji resolvable to identify\n   * @returns {?GuildEmoji}\n   */\n  resolve(emoji) {\n    if (emoji instanceof ReactionEmoji) return super.resolve(emoji.id);\n    return super.resolve(emoji);\n  }\n\n  /**\n   * Resolves an EmojiResolvable to an Emoji ID string.\n   * @param {EmojiResolvable} emoji The Emoji resolvable to identify\n   * @returns {?Snowflake}\n   */\n  resolveID(emoji) {\n    if (emoji instanceof ReactionEmoji) return emoji.id;\n    return super.resolveID(emoji);\n  }\n\n  /**\n   * Data that can be resolved to give an emoji identifier. This can be:\n   * * The unicode representation of an emoji\n   * * The `<a:name:id>`, `<:name:id>`, `:name:id` or `a:name:id` emoji identifier string of an emoji\n   * * An EmojiResolvable\n   * @typedef {string|EmojiResolvable} EmojiIdentifierResolvable\n   */\n\n  /**\n   * Resolves an EmojiResolvable to an emoji identifier.\n   * @param {EmojiIdentifierResolvable} emoji The emoji resolvable to resolve\n   * @returns {?string}\n   */\n  resolveIdentifier(emoji) {\n    const emojiResolvable = this.resolve(emoji);\n    if (emojiResolvable) return emojiResolvable.identifier;\n    if (emoji instanceof ReactionEmoji) return emoji.identifier;\n    if (typeof emoji === 'string') {\n      const res = parseEmoji(emoji);\n      if (res && res.name.length) {\n        emoji = `${res.animated ? 'a:' : ''}${res.name}${res.id ? `:${res.id}` : ''}`;\n      }\n      if (!emoji.includes('%')) return encodeURIComponent(emoji);else return emoji;\n    }\n    return null;\n  }\n}\nmodule.exports = GuildEmojiManager;","map":{"version":3,"names":["BaseManager","require","TypeError","GuildEmoji","ReactionEmoji","Collection","DataResolver","parseEmoji","GuildEmojiManager","constructor","guild","iterable","client","add","data","cache","extras","create","attachment","name","roles","reason","resolveImage","image","role","values","resolve","Promise","reject","push","id","api","guilds","emojis","post","then","emoji","actions","GuildEmojiCreate","handle","resolveID","resolveIdentifier","emojiResolvable","identifier","res","length","animated","includes","encodeURIComponent","module","exports"],"sources":["/Users/jessegill/node_modules/discord.js/src/managers/GuildEmojiManager.js"],"sourcesContent":["'use strict';\n\nconst BaseManager = require('./BaseManager');\nconst { TypeError } = require('../errors');\nconst GuildEmoji = require('../structures/GuildEmoji');\nconst ReactionEmoji = require('../structures/ReactionEmoji');\nconst Collection = require('../util/Collection');\nconst DataResolver = require('../util/DataResolver');\nconst { parseEmoji } = require('../util/Util');\n\n/**\n * Manages API methods for GuildEmojis and stores their cache.\n * @extends {BaseManager}\n */\nclass GuildEmojiManager extends BaseManager {\n  constructor(guild, iterable) {\n    super(guild.client, iterable, GuildEmoji);\n    /**\n     * The guild this manager belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n\n  /**\n   * The cache of GuildEmojis\n   * @type {Collection<Snowflake, GuildEmoji>}\n   * @name GuildEmojiManager#cache\n   */\n\n  add(data, cache) {\n    return super.add(data, cache, { extras: [this.guild] });\n  }\n\n  /**\n   * Creates a new custom emoji in the guild.\n   * @param {BufferResolvable|Base64Resolvable} attachment The image for the emoji\n   * @param {string} name The name for the emoji\n   * @param {Object} [options] Options\n   * @param {Collection<Snowflake, Role>|RoleResolvable[]} [options.roles] Roles to limit the emoji to\n   * @param {string} [options.reason] Reason for creating the emoji\n   * @returns {Promise<Emoji>} The created emoji\n   * @example\n   * // Create a new emoji from a url\n   * guild.emojis.create('https://i.imgur.com/w3duR07.png', 'rip')\n   *   .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))\n   *   .catch(console.error);\n   * @example\n   * // Create a new emoji from a file on your computer\n   * guild.emojis.create('./memes/banana.png', 'banana')\n   *   .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))\n   *   .catch(console.error);\n   */\n  async create(attachment, name, { roles, reason } = {}) {\n    attachment = await DataResolver.resolveImage(attachment);\n    if (!attachment) throw new TypeError('REQ_RESOURCE_TYPE');\n\n    const data = { image: attachment, name };\n    if (roles) {\n      data.roles = [];\n      for (let role of roles instanceof Collection ? roles.values() : roles) {\n        role = this.guild.roles.resolve(role);\n        if (!role) {\n          return Promise.reject(\n            new TypeError('INVALID_TYPE', 'options.roles', 'Array or Collection of Roles or Snowflakes', true),\n          );\n        }\n        data.roles.push(role.id);\n      }\n    }\n\n    return this.client.api\n      .guilds(this.guild.id)\n      .emojis.post({ data, reason })\n      .then(emoji => this.client.actions.GuildEmojiCreate.handle(this.guild, emoji).emoji);\n  }\n\n  /**\n   * Data that can be resolved into an GuildEmoji object. This can be:\n   * * A custom emoji ID\n   * * A GuildEmoji object\n   * * A ReactionEmoji object\n   * @typedef {Snowflake|GuildEmoji|ReactionEmoji} EmojiResolvable\n   */\n\n  /**\n   * Resolves an EmojiResolvable to an Emoji object.\n   * @param {EmojiResolvable} emoji The Emoji resolvable to identify\n   * @returns {?GuildEmoji}\n   */\n  resolve(emoji) {\n    if (emoji instanceof ReactionEmoji) return super.resolve(emoji.id);\n    return super.resolve(emoji);\n  }\n\n  /**\n   * Resolves an EmojiResolvable to an Emoji ID string.\n   * @param {EmojiResolvable} emoji The Emoji resolvable to identify\n   * @returns {?Snowflake}\n   */\n  resolveID(emoji) {\n    if (emoji instanceof ReactionEmoji) return emoji.id;\n    return super.resolveID(emoji);\n  }\n\n  /**\n   * Data that can be resolved to give an emoji identifier. This can be:\n   * * The unicode representation of an emoji\n   * * The `<a:name:id>`, `<:name:id>`, `:name:id` or `a:name:id` emoji identifier string of an emoji\n   * * An EmojiResolvable\n   * @typedef {string|EmojiResolvable} EmojiIdentifierResolvable\n   */\n\n  /**\n   * Resolves an EmojiResolvable to an emoji identifier.\n   * @param {EmojiIdentifierResolvable} emoji The emoji resolvable to resolve\n   * @returns {?string}\n   */\n  resolveIdentifier(emoji) {\n    const emojiResolvable = this.resolve(emoji);\n    if (emojiResolvable) return emojiResolvable.identifier;\n    if (emoji instanceof ReactionEmoji) return emoji.identifier;\n    if (typeof emoji === 'string') {\n      const res = parseEmoji(emoji);\n      if (res && res.name.length) {\n        emoji = `${res.animated ? 'a:' : ''}${res.name}${res.id ? `:${res.id}` : ''}`;\n      }\n      if (!emoji.includes('%')) return encodeURIComponent(emoji);\n      else return emoji;\n    }\n    return null;\n  }\n}\n\nmodule.exports = GuildEmojiManager;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}