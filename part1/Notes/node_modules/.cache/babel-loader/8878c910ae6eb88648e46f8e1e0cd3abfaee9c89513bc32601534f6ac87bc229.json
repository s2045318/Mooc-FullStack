{"ast":null,"code":"'use strict';\n\nconst GuildEmoji = require('./GuildEmoji');\nconst ReactionEmoji = require('./ReactionEmoji');\nconst ReactionUserManager = require('../managers/ReactionUserManager');\nconst Util = require('../util/Util');\n\n/**\n * Represents a reaction to a message.\n */\nclass MessageReaction {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {Object} data The data for the message reaction\n   * @param {Message} message The message the reaction refers to\n   */\n  constructor(client, data, message) {\n    /**\n     * The client that instantiated this message reaction\n     * @name MessageReaction#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', {\n      value: client\n    });\n    /**\n     * The message that this reaction refers to\n     * @type {Message}\n     */\n    this.message = message;\n\n    /**\n     * A manager of the users that have given this reaction\n     * @type {ReactionUserManager}\n     */\n    this.users = new ReactionUserManager(client, undefined, this);\n    this._emoji = new ReactionEmoji(this, data.emoji);\n    this._patch(data);\n  }\n  _patch(data) {\n    // eslint-disable-next-line eqeqeq\n    if (this.count == undefined) {\n      /**\n       * The number of people that have given the same reaction\n       * @type {?number}\n       */\n      this.count = data.count;\n    }\n\n    /**\n     * Whether the client has given this reaction\n     * @type {boolean}\n     */\n    this.me = data.me;\n  }\n\n  /**\n   * Removes all users from this reaction.\n   * @returns {Promise<MessageReaction>}\n   */\n  async remove() {\n    await this.client.api.channels(this.message.channel.id).messages(this.message.id).reactions(this._emoji.identifier).delete();\n    return this;\n  }\n\n  /**\n   * The emoji of this reaction, either an GuildEmoji object for known custom emojis, or a ReactionEmoji\n   * object which has fewer properties. Whatever the prototype of the emoji, it will still have\n   * `name`, `id`, `identifier` and `toString()`\n   * @type {GuildEmoji|ReactionEmoji}\n   * @readonly\n   */\n  get emoji() {\n    if (this._emoji instanceof GuildEmoji) return this._emoji;\n    // Check to see if the emoji has become known to the client\n    if (this._emoji.id) {\n      const emojis = this.message.client.emojis.cache;\n      if (emojis.has(this._emoji.id)) {\n        const emoji = emojis.get(this._emoji.id);\n        this._emoji = emoji;\n        return emoji;\n      }\n    }\n    return this._emoji;\n  }\n\n  /**\n   * Whether or not this reaction is a partial\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return this.count === null;\n  }\n\n  /**\n   * Fetch this reaction.\n   * @returns {Promise<MessageReaction>}\n   */\n  async fetch() {\n    const message = await this.message.fetch();\n    const existing = message.reactions.cache.get(this.emoji.id || this.emoji.name);\n    // The reaction won't get set when it has been completely removed\n    this._patch(existing || {\n      count: 0\n    });\n    return this;\n  }\n  toJSON() {\n    return Util.flatten(this, {\n      emoji: 'emojiID',\n      message: 'messageID'\n    });\n  }\n  _add(user) {\n    if (this.partial) return;\n    this.users.cache.set(user.id, user);\n    if (!this.me || user.id !== this.message.client.user.id || this.count === 0) this.count++;\n    if (!this.me) this.me = user.id === this.message.client.user.id;\n  }\n  _remove(user) {\n    if (this.partial) return;\n    this.users.cache.delete(user.id);\n    if (!this.me || user.id !== this.message.client.user.id) this.count--;\n    if (user.id === this.message.client.user.id) this.me = false;\n    if (this.count <= 0 && this.users.cache.size === 0) {\n      this.message.reactions.cache.delete(this.emoji.id || this.emoji.name);\n    }\n  }\n}\nmodule.exports = MessageReaction;","map":{"version":3,"names":["GuildEmoji","require","ReactionEmoji","ReactionUserManager","Util","MessageReaction","constructor","client","data","message","Object","defineProperty","value","users","undefined","_emoji","emoji","_patch","count","me","remove","api","channels","channel","id","messages","reactions","identifier","delete","emojis","cache","has","get","partial","fetch","existing","name","toJSON","flatten","_add","user","set","_remove","size","module","exports"],"sources":["/Users/jessegill/node_modules/discord.js/src/structures/MessageReaction.js"],"sourcesContent":["'use strict';\n\nconst GuildEmoji = require('./GuildEmoji');\nconst ReactionEmoji = require('./ReactionEmoji');\nconst ReactionUserManager = require('../managers/ReactionUserManager');\nconst Util = require('../util/Util');\n\n/**\n * Represents a reaction to a message.\n */\nclass MessageReaction {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {Object} data The data for the message reaction\n   * @param {Message} message The message the reaction refers to\n   */\n  constructor(client, data, message) {\n    /**\n     * The client that instantiated this message reaction\n     * @name MessageReaction#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n    /**\n     * The message that this reaction refers to\n     * @type {Message}\n     */\n    this.message = message;\n\n    /**\n     * A manager of the users that have given this reaction\n     * @type {ReactionUserManager}\n     */\n    this.users = new ReactionUserManager(client, undefined, this);\n\n    this._emoji = new ReactionEmoji(this, data.emoji);\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    // eslint-disable-next-line eqeqeq\n    if (this.count == undefined) {\n      /**\n       * The number of people that have given the same reaction\n       * @type {?number}\n       */\n      this.count = data.count;\n    }\n\n    /**\n     * Whether the client has given this reaction\n     * @type {boolean}\n     */\n    this.me = data.me;\n  }\n\n  /**\n   * Removes all users from this reaction.\n   * @returns {Promise<MessageReaction>}\n   */\n  async remove() {\n    await this.client.api\n      .channels(this.message.channel.id)\n      .messages(this.message.id)\n      .reactions(this._emoji.identifier)\n      .delete();\n    return this;\n  }\n\n  /**\n   * The emoji of this reaction, either an GuildEmoji object for known custom emojis, or a ReactionEmoji\n   * object which has fewer properties. Whatever the prototype of the emoji, it will still have\n   * `name`, `id`, `identifier` and `toString()`\n   * @type {GuildEmoji|ReactionEmoji}\n   * @readonly\n   */\n  get emoji() {\n    if (this._emoji instanceof GuildEmoji) return this._emoji;\n    // Check to see if the emoji has become known to the client\n    if (this._emoji.id) {\n      const emojis = this.message.client.emojis.cache;\n      if (emojis.has(this._emoji.id)) {\n        const emoji = emojis.get(this._emoji.id);\n        this._emoji = emoji;\n        return emoji;\n      }\n    }\n    return this._emoji;\n  }\n\n  /**\n   * Whether or not this reaction is a partial\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return this.count === null;\n  }\n\n  /**\n   * Fetch this reaction.\n   * @returns {Promise<MessageReaction>}\n   */\n  async fetch() {\n    const message = await this.message.fetch();\n    const existing = message.reactions.cache.get(this.emoji.id || this.emoji.name);\n    // The reaction won't get set when it has been completely removed\n    this._patch(existing || { count: 0 });\n    return this;\n  }\n\n  toJSON() {\n    return Util.flatten(this, { emoji: 'emojiID', message: 'messageID' });\n  }\n\n  _add(user) {\n    if (this.partial) return;\n    this.users.cache.set(user.id, user);\n    if (!this.me || user.id !== this.message.client.user.id || this.count === 0) this.count++;\n    if (!this.me) this.me = user.id === this.message.client.user.id;\n  }\n\n  _remove(user) {\n    if (this.partial) return;\n    this.users.cache.delete(user.id);\n    if (!this.me || user.id !== this.message.client.user.id) this.count--;\n    if (user.id === this.message.client.user.id) this.me = false;\n    if (this.count <= 0 && this.users.cache.size === 0) {\n      this.message.reactions.cache.delete(this.emoji.id || this.emoji.name);\n    }\n  }\n}\n\nmodule.exports = MessageReaction;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}