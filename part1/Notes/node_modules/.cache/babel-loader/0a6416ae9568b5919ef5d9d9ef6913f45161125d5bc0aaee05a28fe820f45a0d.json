{"ast":null,"code":"'use strict';\n\nconst Base = require('./Base');\nconst IntegrationApplication = require('./IntegrationApplication');\n\n/**\n * The information account for an integration\n * @typedef {Object} IntegrationAccount\n * @property {string} id The id of the account\n * @property {string} name The name of the account\n */\n\n/**\n *  Represents a guild integration.\n */\nclass Integration extends Base {\n  constructor(client, data, guild) {\n    super(client);\n\n    /**\n     * The guild this integration belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    /**\n     * The integration id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The integration name\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The integration type (twitch, youtube, etc)\n     * @type {string}\n     */\n    this.type = data.type;\n\n    /**\n     * Whether this integration is enabled\n     * @type {boolean}\n     */\n    this.enabled = data.enabled;\n\n    /**\n     * Whether this integration is syncing\n     * @type {boolean}\n     */\n    this.syncing = data.syncing;\n\n    /**\n     * The role that this integration uses for subscribers\n     * @type {Role}\n     */\n    this.role = this.guild.roles.cache.get(data.role_id);\n    if (data.user) {\n      /**\n       * The user for this integration\n       * @type {?User}\n       */\n      this.user = this.client.users.add(data.user);\n    } else {\n      this.user = null;\n    }\n\n    /**\n     * The account integration information\n     * @type {IntegrationAccount}\n     */\n    this.account = data.account;\n\n    /**\n     * The last time this integration was last synced\n     * @type {number}\n     */\n    this.syncedAt = data.synced_at;\n    this._patch(data);\n  }\n  _patch(data) {\n    /**\n     * The behavior of expiring subscribers\n     * @type {number}\n     */\n    this.expireBehavior = data.expire_behavior;\n\n    /**\n     * The grace period before expiring subscribers\n     * @type {number}\n     */\n    this.expireGracePeriod = data.expire_grace_period;\n    if ('application' in data) {\n      if (this.application) {\n        this.application._patch(data.application);\n      } else {\n        /**\n         * The application for this integration\n         * @type {?IntegrationApplication}\n         */\n        this.application = new IntegrationApplication(this.client, data.application);\n      }\n    } else if (!this.application) {\n      this.application = null;\n    }\n  }\n\n  /**\n   * Sync this integration\n   * @returns {Promise<Integration>}\n   */\n  sync() {\n    this.syncing = true;\n    return this.client.api.guilds(this.guild.id).integrations(this.id).post().then(() => {\n      this.syncing = false;\n      this.syncedAt = Date.now();\n      return this;\n    });\n  }\n\n  /**\n   * The data for editing an integration.\n   * @typedef {Object} IntegrationEditData\n   * @property {number} [expireBehavior] The new behaviour of expiring subscribers\n   * @property {number} [expireGracePeriod] The new grace period before expiring subscribers\n   */\n\n  /**\n   * Edits this integration.\n   * @param {IntegrationEditData} data The data to edit this integration with\n   * @param {string} reason Reason for editing this integration\n   * @returns {Promise<Integration>}\n   */\n  edit(data, reason) {\n    if ('expireBehavior' in data) {\n      data.expire_behavior = data.expireBehavior;\n      data.expireBehavior = null;\n    }\n    if ('expireGracePeriod' in data) {\n      data.expire_grace_period = data.expireGracePeriod;\n      data.expireGracePeriod = null;\n    }\n    // The option enable_emoticons is only available for Twitch at this moment\n    return this.client.api.guilds(this.guild.id).integrations(this.id).patch({\n      data,\n      reason\n    }).then(() => {\n      this._patch(data);\n      return this;\n    });\n  }\n\n  /**\n   * Deletes this integration.\n   * @returns {Promise<Integration>}\n   * @param {string} [reason] Reason for deleting this integration\n   */\n  delete(reason) {\n    return this.client.api.guilds(this.guild.id).integrations(this.id).delete({\n      reason\n    }).then(() => this);\n  }\n  toJSON() {\n    return super.toJSON({\n      role: 'roleID',\n      guild: 'guildID',\n      user: 'userID'\n    });\n  }\n}\nmodule.exports = Integration;","map":{"version":3,"names":["Base","require","IntegrationApplication","Integration","constructor","client","data","guild","id","name","type","enabled","syncing","role","roles","cache","get","role_id","user","users","add","account","syncedAt","synced_at","_patch","expireBehavior","expire_behavior","expireGracePeriod","expire_grace_period","application","sync","api","guilds","integrations","post","then","Date","now","edit","reason","patch","delete","toJSON","module","exports"],"sources":["/Users/jessegill/node_modules/discord.js/src/structures/Integration.js"],"sourcesContent":["'use strict';\n\nconst Base = require('./Base');\nconst IntegrationApplication = require('./IntegrationApplication');\n\n/**\n * The information account for an integration\n * @typedef {Object} IntegrationAccount\n * @property {string} id The id of the account\n * @property {string} name The name of the account\n */\n\n/**\n *  Represents a guild integration.\n */\nclass Integration extends Base {\n  constructor(client, data, guild) {\n    super(client);\n\n    /**\n     * The guild this integration belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    /**\n     * The integration id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The integration name\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The integration type (twitch, youtube, etc)\n     * @type {string}\n     */\n    this.type = data.type;\n\n    /**\n     * Whether this integration is enabled\n     * @type {boolean}\n     */\n    this.enabled = data.enabled;\n\n    /**\n     * Whether this integration is syncing\n     * @type {boolean}\n     */\n    this.syncing = data.syncing;\n\n    /**\n     * The role that this integration uses for subscribers\n     * @type {Role}\n     */\n    this.role = this.guild.roles.cache.get(data.role_id);\n\n    if (data.user) {\n      /**\n       * The user for this integration\n       * @type {?User}\n       */\n      this.user = this.client.users.add(data.user);\n    } else {\n      this.user = null;\n    }\n\n    /**\n     * The account integration information\n     * @type {IntegrationAccount}\n     */\n    this.account = data.account;\n\n    /**\n     * The last time this integration was last synced\n     * @type {number}\n     */\n    this.syncedAt = data.synced_at;\n    this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The behavior of expiring subscribers\n     * @type {number}\n     */\n    this.expireBehavior = data.expire_behavior;\n\n    /**\n     * The grace period before expiring subscribers\n     * @type {number}\n     */\n    this.expireGracePeriod = data.expire_grace_period;\n\n    if ('application' in data) {\n      if (this.application) {\n        this.application._patch(data.application);\n      } else {\n        /**\n         * The application for this integration\n         * @type {?IntegrationApplication}\n         */\n        this.application = new IntegrationApplication(this.client, data.application);\n      }\n    } else if (!this.application) {\n      this.application = null;\n    }\n  }\n\n  /**\n   * Sync this integration\n   * @returns {Promise<Integration>}\n   */\n  sync() {\n    this.syncing = true;\n    return this.client.api\n      .guilds(this.guild.id)\n      .integrations(this.id)\n      .post()\n      .then(() => {\n        this.syncing = false;\n        this.syncedAt = Date.now();\n        return this;\n      });\n  }\n\n  /**\n   * The data for editing an integration.\n   * @typedef {Object} IntegrationEditData\n   * @property {number} [expireBehavior] The new behaviour of expiring subscribers\n   * @property {number} [expireGracePeriod] The new grace period before expiring subscribers\n   */\n\n  /**\n   * Edits this integration.\n   * @param {IntegrationEditData} data The data to edit this integration with\n   * @param {string} reason Reason for editing this integration\n   * @returns {Promise<Integration>}\n   */\n  edit(data, reason) {\n    if ('expireBehavior' in data) {\n      data.expire_behavior = data.expireBehavior;\n      data.expireBehavior = null;\n    }\n    if ('expireGracePeriod' in data) {\n      data.expire_grace_period = data.expireGracePeriod;\n      data.expireGracePeriod = null;\n    }\n    // The option enable_emoticons is only available for Twitch at this moment\n    return this.client.api\n      .guilds(this.guild.id)\n      .integrations(this.id)\n      .patch({ data, reason })\n      .then(() => {\n        this._patch(data);\n        return this;\n      });\n  }\n\n  /**\n   * Deletes this integration.\n   * @returns {Promise<Integration>}\n   * @param {string} [reason] Reason for deleting this integration\n   */\n  delete(reason) {\n    return this.client.api\n      .guilds(this.guild.id)\n      .integrations(this.id)\n      .delete({ reason })\n      .then(() => this);\n  }\n\n  toJSON() {\n    return super.toJSON({\n      role: 'roleID',\n      guild: 'guildID',\n      user: 'userID',\n    });\n  }\n}\n\nmodule.exports = Integration;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}