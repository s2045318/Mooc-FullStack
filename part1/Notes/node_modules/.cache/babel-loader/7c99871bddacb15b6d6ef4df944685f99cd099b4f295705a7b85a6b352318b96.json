{"ast":null,"code":"'use strict';\n\nconst {\n  ClientApplicationAssetTypes,\n  Endpoints\n} = require('../../util/Constants');\nconst Snowflake = require('../../util/Snowflake');\nconst Base = require('../Base');\nconst AssetTypes = Object.keys(ClientApplicationAssetTypes);\n\n/**\n * Represents an OAuth2 Application.\n * @abstract\n */\nclass Application extends Base {\n  constructor(client, data) {\n    super(client);\n    this._patch(data);\n  }\n  _patch(data) {\n    /**\n     * The ID of the app\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The name of the app\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The app's description\n     * @type {string}\n     */\n    this.description = data.description;\n\n    /**\n     * The app's icon hash\n     * @type {string}\n     */\n    this.icon = data.icon;\n  }\n\n  /**\n   * The timestamp the app was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return Snowflake.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time the app was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * A link to the application's icon.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string} URL to the icon\n   */\n  iconURL() {\n    let {\n      format,\n      size\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.icon) return null;\n    return this.client.rest.cdn.AppIcon(this.id, this.icon, {\n      format,\n      size\n    });\n  }\n\n  /**\n   * A link to this application's cover image.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string} URL to the cover image\n   */\n  coverImage() {\n    let {\n      format,\n      size\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.cover) return null;\n    return Endpoints.CDN(this.client.options.http.cdn).AppIcon(this.id, this.cover, {\n      format,\n      size\n    });\n  }\n\n  /**\n   * Asset data.\n   * @typedef {Object} ApplicationAsset\n   * @property {Snowflake} id The asset ID\n   * @property {string} name The asset name\n   * @property {string} type The asset type\n   */\n\n  /**\n   * Gets the clients rich presence assets.\n   * @returns {Promise<Array<ApplicationAsset>>}\n   */\n  fetchAssets() {\n    return this.client.api.oauth2.applications(this.id).assets.get().then(assets => assets.map(a => ({\n      id: a.id,\n      name: a.name,\n      type: AssetTypes[a.type - 1]\n    })));\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the application's name instead of the\n   * Oauth2Application object.\n   * @returns {string}\n   * @example\n   * // Logs: Application name: My App\n   * console.log(`Application name: ${application}`);\n   */\n  toString() {\n    return this.name;\n  }\n  toJSON() {\n    return super.toJSON({\n      createdTimestamp: true\n    });\n  }\n}\nmodule.exports = Application;","map":{"version":3,"names":["ClientApplicationAssetTypes","Endpoints","require","Snowflake","Base","AssetTypes","Object","keys","Application","constructor","client","data","_patch","id","name","description","icon","createdTimestamp","deconstruct","timestamp","createdAt","Date","iconURL","format","size","rest","cdn","AppIcon","coverImage","cover","CDN","options","http","fetchAssets","api","oauth2","applications","assets","get","then","map","a","type","toString","toJSON","module","exports"],"sources":["/Users/jessegill/node_modules/discord.js/src/structures/interfaces/Application.js"],"sourcesContent":["'use strict';\n\nconst { ClientApplicationAssetTypes, Endpoints } = require('../../util/Constants');\nconst Snowflake = require('../../util/Snowflake');\nconst Base = require('../Base');\n\nconst AssetTypes = Object.keys(ClientApplicationAssetTypes);\n\n/**\n * Represents an OAuth2 Application.\n * @abstract\n */\nclass Application extends Base {\n  constructor(client, data) {\n    super(client);\n    this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The ID of the app\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The name of the app\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The app's description\n     * @type {string}\n     */\n    this.description = data.description;\n\n    /**\n     * The app's icon hash\n     * @type {string}\n     */\n    this.icon = data.icon;\n  }\n\n  /**\n   * The timestamp the app was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return Snowflake.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time the app was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * A link to the application's icon.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string} URL to the icon\n   */\n  iconURL({ format, size } = {}) {\n    if (!this.icon) return null;\n    return this.client.rest.cdn.AppIcon(this.id, this.icon, { format, size });\n  }\n\n  /**\n   * A link to this application's cover image.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string} URL to the cover image\n   */\n  coverImage({ format, size } = {}) {\n    if (!this.cover) return null;\n    return Endpoints.CDN(this.client.options.http.cdn).AppIcon(this.id, this.cover, { format, size });\n  }\n\n  /**\n   * Asset data.\n   * @typedef {Object} ApplicationAsset\n   * @property {Snowflake} id The asset ID\n   * @property {string} name The asset name\n   * @property {string} type The asset type\n   */\n\n  /**\n   * Gets the clients rich presence assets.\n   * @returns {Promise<Array<ApplicationAsset>>}\n   */\n  fetchAssets() {\n    return this.client.api.oauth2\n      .applications(this.id)\n      .assets.get()\n      .then(assets =>\n        assets.map(a => ({\n          id: a.id,\n          name: a.name,\n          type: AssetTypes[a.type - 1],\n        })),\n      );\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the application's name instead of the\n   * Oauth2Application object.\n   * @returns {string}\n   * @example\n   * // Logs: Application name: My App\n   * console.log(`Application name: ${application}`);\n   */\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return super.toJSON({ createdTimestamp: true });\n  }\n}\n\nmodule.exports = Application;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}