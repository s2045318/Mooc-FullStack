{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst stream = require('stream');\nconst fetch = require('node-fetch');\nconst {\n  Error: DiscordError,\n  TypeError\n} = require('../errors');\nconst {\n  browser\n} = require('../util/Constants');\nconst Util = require('../util/Util');\n\n/**\n * The DataResolver identifies different objects and tries to resolve a specific piece of information from them.\n * @private\n */\nclass DataResolver {\n  constructor() {\n    throw new Error(`The ${this.constructor.name} class may not be instantiated.`);\n  }\n\n  /**\n   * Data that can be resolved to give an invite code. This can be:\n   * * An invite code\n   * * An invite URL\n   * @typedef {string} InviteResolvable\n   */\n\n  /**\n   * Data that can be resolved to give an template code. This can be:\n   * * A template code\n   * * A template URL\n   * @typedef {string} GuildTemplateResolvable\n   */\n\n  /**\n   * Resolves the string to a code based on the passed regex.\n   * @param {string} data The string to resolve\n   * @param {RegExp} regex The RegExp used to extract the code\n   * @returns {string}\n   */\n  static resolveCode(data, regex) {\n    const match = regex.exec(data);\n    return match ? match[1] || data : data;\n  }\n\n  /**\n   * Resolves InviteResolvable to an invite code.\n   * @param {InviteResolvable} data The invite resolvable to resolve\n   * @returns {string}\n   */\n  static resolveInviteCode(data) {\n    return this.resolveCode(data, /discord(?:(?:app)?\\.com\\/invite|\\.gg(?:\\/invite)?)\\/([\\w-]{2,255})/i);\n  }\n\n  /**\n   * Resolves GuildTemplateResolvable to a template code.\n   * @param {GuildTemplateResolvable} data The template resolvable to resolve\n   * @returns {string}\n   */\n  static resolveGuildTemplateCode(data) {\n    return this.resolveCode(data, /discord(?:app)?\\.(?:com\\/template|new)\\/([\\w-]{2,255})/i);\n  }\n\n  /**\n   * Resolves a Base64Resolvable, a string, or a BufferResolvable to a Base 64 image.\n   * @param {BufferResolvable|Base64Resolvable} image The image to be resolved\n   * @returns {Promise<?string>}\n   */\n  static async resolveImage(image) {\n    if (!image) return null;\n    if (typeof image === 'string' && image.startsWith('data:')) {\n      return image;\n    }\n    const file = await this.resolveFileAsBuffer(image);\n    return DataResolver.resolveBase64(file);\n  }\n\n  /**\n   * Data that resolves to give a Base64 string, typically for image uploading. This can be:\n   * * A Buffer\n   * * A base64 string\n   * @typedef {Buffer|string} Base64Resolvable\n   */\n\n  /**\n   * Resolves a Base64Resolvable to a Base 64 image.\n   * @param {Base64Resolvable} data The base 64 resolvable you want to resolve\n   * @returns {?string}\n   */\n  static resolveBase64(data) {\n    if (Buffer.isBuffer(data)) return `data:image/jpg;base64,${data.toString('base64')}`;\n    return data;\n  }\n\n  /**\n   * Data that can be resolved to give a Buffer. This can be:\n   * * A Buffer\n   * * The path to a local file\n   * * A URL\n   * @typedef {string|Buffer} BufferResolvable\n   */\n\n  /**\n   * @external Stream\n   * @see {@link https://nodejs.org/api/stream.html}\n   */\n\n  /**\n   * Resolves a BufferResolvable to a Buffer or a Stream.\n   * @param {BufferResolvable|Stream} resource The buffer or stream resolvable to resolve\n   * @returns {Promise<Buffer|Stream>}\n   */\n  static async resolveFile(resource) {\n    if (!browser && Buffer.isBuffer(resource)) return resource;\n    if (browser && resource instanceof ArrayBuffer) return Util.convertToBuffer(resource);\n    // eslint-disable-next-line no-undef\n    if (browser && resource instanceof Blob) return resource;\n    if (resource instanceof stream.Readable) return resource;\n    if (typeof resource === 'string') {\n      if (/^https?:\\/\\//.test(resource)) {\n        const res = await fetch(resource);\n        return browser ? res.blob() : res.body;\n      } else if (!browser) {\n        return new Promise((resolve, reject) => {\n          const file = path.resolve(resource);\n          fs.stat(file, (err, stats) => {\n            if (err) return reject(err);\n            if (!stats.isFile()) return reject(new DiscordError('FILE_NOT_FOUND', file));\n            return resolve(fs.createReadStream(file));\n          });\n        });\n      }\n    }\n    throw new TypeError('REQ_RESOURCE_TYPE');\n  }\n\n  /**\n   * Resolves a BufferResolvable to a Buffer.\n   * @param {BufferResolvable|Stream} resource The buffer or stream resolvable to resolve\n   * @returns {Promise<Buffer>}\n   */\n  static async resolveFileAsBuffer(resource) {\n    const file = await this.resolveFile(resource);\n    if (Buffer.isBuffer(file)) return file;\n    const buffers = [];\n    for await (const data of file) buffers.push(data);\n    return Buffer.concat(buffers);\n  }\n}\nmodule.exports = DataResolver;","map":{"version":3,"names":["fs","require","path","stream","fetch","Error","DiscordError","TypeError","browser","Util","DataResolver","constructor","name","resolveCode","data","regex","match","exec","resolveInviteCode","resolveGuildTemplateCode","resolveImage","image","startsWith","file","resolveFileAsBuffer","resolveBase64","Buffer","isBuffer","toString","resolveFile","resource","ArrayBuffer","convertToBuffer","Blob","Readable","test","res","blob","body","Promise","resolve","reject","stat","err","stats","isFile","createReadStream","buffers","push","concat","module","exports"],"sources":["/Users/jessegill/node_modules/discord.js/src/util/DataResolver.js"],"sourcesContent":["'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst stream = require('stream');\nconst fetch = require('node-fetch');\nconst { Error: DiscordError, TypeError } = require('../errors');\nconst { browser } = require('../util/Constants');\nconst Util = require('../util/Util');\n\n/**\n * The DataResolver identifies different objects and tries to resolve a specific piece of information from them.\n * @private\n */\nclass DataResolver {\n  constructor() {\n    throw new Error(`The ${this.constructor.name} class may not be instantiated.`);\n  }\n\n  /**\n   * Data that can be resolved to give an invite code. This can be:\n   * * An invite code\n   * * An invite URL\n   * @typedef {string} InviteResolvable\n   */\n\n  /**\n   * Data that can be resolved to give an template code. This can be:\n   * * A template code\n   * * A template URL\n   * @typedef {string} GuildTemplateResolvable\n   */\n\n  /**\n   * Resolves the string to a code based on the passed regex.\n   * @param {string} data The string to resolve\n   * @param {RegExp} regex The RegExp used to extract the code\n   * @returns {string}\n   */\n  static resolveCode(data, regex) {\n    const match = regex.exec(data);\n    return match ? match[1] || data : data;\n  }\n\n  /**\n   * Resolves InviteResolvable to an invite code.\n   * @param {InviteResolvable} data The invite resolvable to resolve\n   * @returns {string}\n   */\n  static resolveInviteCode(data) {\n    return this.resolveCode(data, /discord(?:(?:app)?\\.com\\/invite|\\.gg(?:\\/invite)?)\\/([\\w-]{2,255})/i);\n  }\n\n  /**\n   * Resolves GuildTemplateResolvable to a template code.\n   * @param {GuildTemplateResolvable} data The template resolvable to resolve\n   * @returns {string}\n   */\n  static resolveGuildTemplateCode(data) {\n    return this.resolveCode(data, /discord(?:app)?\\.(?:com\\/template|new)\\/([\\w-]{2,255})/i);\n  }\n\n  /**\n   * Resolves a Base64Resolvable, a string, or a BufferResolvable to a Base 64 image.\n   * @param {BufferResolvable|Base64Resolvable} image The image to be resolved\n   * @returns {Promise<?string>}\n   */\n  static async resolveImage(image) {\n    if (!image) return null;\n    if (typeof image === 'string' && image.startsWith('data:')) {\n      return image;\n    }\n    const file = await this.resolveFileAsBuffer(image);\n    return DataResolver.resolveBase64(file);\n  }\n\n  /**\n   * Data that resolves to give a Base64 string, typically for image uploading. This can be:\n   * * A Buffer\n   * * A base64 string\n   * @typedef {Buffer|string} Base64Resolvable\n   */\n\n  /**\n   * Resolves a Base64Resolvable to a Base 64 image.\n   * @param {Base64Resolvable} data The base 64 resolvable you want to resolve\n   * @returns {?string}\n   */\n  static resolveBase64(data) {\n    if (Buffer.isBuffer(data)) return `data:image/jpg;base64,${data.toString('base64')}`;\n    return data;\n  }\n\n  /**\n   * Data that can be resolved to give a Buffer. This can be:\n   * * A Buffer\n   * * The path to a local file\n   * * A URL\n   * @typedef {string|Buffer} BufferResolvable\n   */\n\n  /**\n   * @external Stream\n   * @see {@link https://nodejs.org/api/stream.html}\n   */\n\n  /**\n   * Resolves a BufferResolvable to a Buffer or a Stream.\n   * @param {BufferResolvable|Stream} resource The buffer or stream resolvable to resolve\n   * @returns {Promise<Buffer|Stream>}\n   */\n  static async resolveFile(resource) {\n    if (!browser && Buffer.isBuffer(resource)) return resource;\n    if (browser && resource instanceof ArrayBuffer) return Util.convertToBuffer(resource);\n    // eslint-disable-next-line no-undef\n    if (browser && resource instanceof Blob) return resource;\n    if (resource instanceof stream.Readable) return resource;\n\n    if (typeof resource === 'string') {\n      if (/^https?:\\/\\//.test(resource)) {\n        const res = await fetch(resource);\n        return browser ? res.blob() : res.body;\n      } else if (!browser) {\n        return new Promise((resolve, reject) => {\n          const file = path.resolve(resource);\n          fs.stat(file, (err, stats) => {\n            if (err) return reject(err);\n            if (!stats.isFile()) return reject(new DiscordError('FILE_NOT_FOUND', file));\n            return resolve(fs.createReadStream(file));\n          });\n        });\n      }\n    }\n\n    throw new TypeError('REQ_RESOURCE_TYPE');\n  }\n\n  /**\n   * Resolves a BufferResolvable to a Buffer.\n   * @param {BufferResolvable|Stream} resource The buffer or stream resolvable to resolve\n   * @returns {Promise<Buffer>}\n   */\n  static async resolveFileAsBuffer(resource) {\n    const file = await this.resolveFile(resource);\n    if (Buffer.isBuffer(file)) return file;\n\n    const buffers = [];\n    for await (const data of file) buffers.push(data);\n    return Buffer.concat(buffers);\n  }\n}\n\nmodule.exports = DataResolver;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}