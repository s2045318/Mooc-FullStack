{"ast":null,"code":"'use strict';\n\nconst Base = require('./Base');\nconst {\n  Events\n} = require('../util/Constants');\nconst DataResolver = require('../util/DataResolver');\n\n/**\n * Represents the template for a guild.\n * @extends {Base}\n */\nclass GuildTemplate extends Base {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {Object} data The raw data for the template\n   */\n  constructor(client, data) {\n    super(client);\n    this._patch(data);\n  }\n\n  /**\n   * Builds or updates the template with the provided data.\n   * @param {Object} data The raw data for the template\n   * @returns {GuildTemplate}\n   * @private\n   */\n  _patch(data) {\n    /**\n     * The unique code of this template\n     * @type {string}\n     */\n    this.code = data.code;\n\n    /**\n     * The name of this template\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The description of this template\n     * @type {?string}\n     */\n    this.description = data.description;\n\n    /**\n     * The amount of times this template has been used\n     * @type {number}\n     */\n    this.usageCount = data.usage_count;\n\n    /**\n     * The ID of the user that created this template\n     * @type {Snowflake}\n     */\n    this.creatorID = data.creator_id;\n\n    /**\n     * The user that created this template\n     * @type {User}\n     */\n    this.creator = this.client.users.add(data.creator);\n\n    /**\n     * The time of when this template was created at\n     * @type {Date}\n     */\n    this.createdAt = new Date(data.created_at);\n\n    /**\n     * The time of when this template was last synced to the guild\n     * @type {Date}\n     */\n    this.updatedAt = new Date(data.updated_at);\n\n    /**\n     * The ID of the guild that this template belongs to\n     * @type {Snowflake}\n     */\n    this.guildID = data.source_guild_id;\n\n    /**\n     * The data of the guild that this template would create\n     * @type {Object}\n     * @see {@link https://discord.com/developers/docs/resources/guild#guild-resource}\n     */\n    this.serializedGuild = data.serialized_source_guild;\n\n    /**\n     * Whether this template has unsynced changes\n     * @type {?boolean}\n     */\n    this.unSynced = 'is_dirty' in data ? Boolean(data.is_dirty) : null;\n    return this;\n  }\n\n  /**\n   * Creates a guild based from this template.\n   * <warn>This is only available to bots in fewer than 10 guilds.</warn>\n   * @param {string} name The name of the guild\n   * @param {BufferResolvable|Base64Resolvable} [icon] The icon for the guild\n   * @returns {Promise<Guild>}\n   */\n  async createGuild(name, icon) {\n    const {\n      client\n    } = this;\n    const data = await client.api.guilds.templates(this.code).post({\n      data: {\n        name,\n        icon: await DataResolver.resolveImage(icon)\n      }\n    });\n    // eslint-disable-next-line consistent-return\n    return new Promise(resolve => {\n      const createdGuild = client.guilds.cache.get(data.id);\n      if (createdGuild) return resolve(createdGuild);\n      const resolveGuild = guild => {\n        client.off(Events.GUILD_CREATE, handleGuild);\n        client.decrementMaxListeners();\n        resolve(guild);\n      };\n      const handleGuild = guild => {\n        if (guild.id === data.id) {\n          client.clearTimeout(timeout);\n          resolveGuild(guild);\n        }\n      };\n      client.incrementMaxListeners();\n      client.on(Events.GUILD_CREATE, handleGuild);\n      const timeout = client.setTimeout(() => resolveGuild(client.guilds.add(data)), 10000);\n    });\n  }\n\n  /**\n   * Updates the metadata on this template.\n   * @param {Object} options Options for the template\n   * @param {string} [options.name] The name of this template\n   * @param {string} [options.description] The description of this template\n   * @returns {Promise<GuildTemplate>}\n   */\n  edit() {\n    let {\n      name,\n      description\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.client.api.guilds(this.guildID).templates(this.code).patch({\n      data: {\n        name,\n        description\n      }\n    }).then(data => this._patch(data));\n  }\n\n  /**\n   * Deletes this template.\n   * @returns {Promise<GuildTemplate>}\n   */\n  delete() {\n    return this.client.api.guilds(this.guildID).templates(this.code).delete().then(() => this);\n  }\n\n  /**\n   * Syncs this template to the current state of the guild.\n   * @returns {Promise<GuildTemplate>}\n   */\n  sync() {\n    return this.client.api.guilds(this.guildID).templates(this.code).put().then(data => this._patch(data));\n  }\n\n  /**\n   * The timestamp of when this template was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return this.createdAt.getTime();\n  }\n\n  /**\n   * The timestamp of when this template was last synced to the guild\n   * @type {number}\n   * @readonly\n   */\n  get updatedTimestamp() {\n    return this.updatedAt.getTime();\n  }\n\n  /**\n   * The guild that this template belongs to\n   * @type {?Guild}\n   * @readonly\n   */\n  get guild() {\n    return this.client.guilds.cache.get(this.guildID) || null;\n  }\n\n  /**\n   * The URL of this template\n   * @type {string}\n   * @readonly\n   */\n  get url() {\n    return `${this.client.options.http.template}/${this.code}`;\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the templates's code instead of the template object.\n   * @returns {string}\n   * @example\n   * // Logs: Template: FKvmczH2HyUf\n   * console.log(`Template: ${guildTemplate}!`);\n   */\n  toString() {\n    return this.code;\n  }\n}\nmodule.exports = GuildTemplate;","map":{"version":3,"names":["Base","require","Events","DataResolver","GuildTemplate","constructor","client","data","_patch","code","name","description","usageCount","usage_count","creatorID","creator_id","creator","users","add","createdAt","Date","created_at","updatedAt","updated_at","guildID","source_guild_id","serializedGuild","serialized_source_guild","unSynced","Boolean","is_dirty","createGuild","icon","api","guilds","templates","post","resolveImage","Promise","resolve","createdGuild","cache","get","id","resolveGuild","guild","off","GUILD_CREATE","handleGuild","decrementMaxListeners","clearTimeout","timeout","incrementMaxListeners","on","setTimeout","edit","patch","then","delete","sync","put","createdTimestamp","getTime","updatedTimestamp","url","options","http","template","toString","module","exports"],"sources":["/Users/jessegill/node_modules/discord.js/src/structures/GuildTemplate.js"],"sourcesContent":["'use strict';\n\nconst Base = require('./Base');\nconst { Events } = require('../util/Constants');\nconst DataResolver = require('../util/DataResolver');\n\n/**\n * Represents the template for a guild.\n * @extends {Base}\n */\nclass GuildTemplate extends Base {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {Object} data The raw data for the template\n   */\n  constructor(client, data) {\n    super(client);\n    this._patch(data);\n  }\n\n  /**\n   * Builds or updates the template with the provided data.\n   * @param {Object} data The raw data for the template\n   * @returns {GuildTemplate}\n   * @private\n   */\n  _patch(data) {\n    /**\n     * The unique code of this template\n     * @type {string}\n     */\n    this.code = data.code;\n\n    /**\n     * The name of this template\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The description of this template\n     * @type {?string}\n     */\n    this.description = data.description;\n\n    /**\n     * The amount of times this template has been used\n     * @type {number}\n     */\n    this.usageCount = data.usage_count;\n\n    /**\n     * The ID of the user that created this template\n     * @type {Snowflake}\n     */\n    this.creatorID = data.creator_id;\n\n    /**\n     * The user that created this template\n     * @type {User}\n     */\n    this.creator = this.client.users.add(data.creator);\n\n    /**\n     * The time of when this template was created at\n     * @type {Date}\n     */\n    this.createdAt = new Date(data.created_at);\n\n    /**\n     * The time of when this template was last synced to the guild\n     * @type {Date}\n     */\n    this.updatedAt = new Date(data.updated_at);\n\n    /**\n     * The ID of the guild that this template belongs to\n     * @type {Snowflake}\n     */\n    this.guildID = data.source_guild_id;\n\n    /**\n     * The data of the guild that this template would create\n     * @type {Object}\n     * @see {@link https://discord.com/developers/docs/resources/guild#guild-resource}\n     */\n    this.serializedGuild = data.serialized_source_guild;\n\n    /**\n     * Whether this template has unsynced changes\n     * @type {?boolean}\n     */\n    this.unSynced = 'is_dirty' in data ? Boolean(data.is_dirty) : null;\n\n    return this;\n  }\n\n  /**\n   * Creates a guild based from this template.\n   * <warn>This is only available to bots in fewer than 10 guilds.</warn>\n   * @param {string} name The name of the guild\n   * @param {BufferResolvable|Base64Resolvable} [icon] The icon for the guild\n   * @returns {Promise<Guild>}\n   */\n  async createGuild(name, icon) {\n    const { client } = this;\n    const data = await client.api.guilds.templates(this.code).post({\n      data: {\n        name,\n        icon: await DataResolver.resolveImage(icon),\n      },\n    });\n    // eslint-disable-next-line consistent-return\n    return new Promise(resolve => {\n      const createdGuild = client.guilds.cache.get(data.id);\n      if (createdGuild) return resolve(createdGuild);\n\n      const resolveGuild = guild => {\n        client.off(Events.GUILD_CREATE, handleGuild);\n        client.decrementMaxListeners();\n        resolve(guild);\n      };\n\n      const handleGuild = guild => {\n        if (guild.id === data.id) {\n          client.clearTimeout(timeout);\n          resolveGuild(guild);\n        }\n      };\n\n      client.incrementMaxListeners();\n      client.on(Events.GUILD_CREATE, handleGuild);\n\n      const timeout = client.setTimeout(() => resolveGuild(client.guilds.add(data)), 10000);\n    });\n  }\n\n  /**\n   * Updates the metadata on this template.\n   * @param {Object} options Options for the template\n   * @param {string} [options.name] The name of this template\n   * @param {string} [options.description] The description of this template\n   * @returns {Promise<GuildTemplate>}\n   */\n  edit({ name, description } = {}) {\n    return this.client.api\n      .guilds(this.guildID)\n      .templates(this.code)\n      .patch({ data: { name, description } })\n      .then(data => this._patch(data));\n  }\n\n  /**\n   * Deletes this template.\n   * @returns {Promise<GuildTemplate>}\n   */\n  delete() {\n    return this.client.api\n      .guilds(this.guildID)\n      .templates(this.code)\n      .delete()\n      .then(() => this);\n  }\n\n  /**\n   * Syncs this template to the current state of the guild.\n   * @returns {Promise<GuildTemplate>}\n   */\n  sync() {\n    return this.client.api\n      .guilds(this.guildID)\n      .templates(this.code)\n      .put()\n      .then(data => this._patch(data));\n  }\n\n  /**\n   * The timestamp of when this template was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return this.createdAt.getTime();\n  }\n\n  /**\n   * The timestamp of when this template was last synced to the guild\n   * @type {number}\n   * @readonly\n   */\n  get updatedTimestamp() {\n    return this.updatedAt.getTime();\n  }\n\n  /**\n   * The guild that this template belongs to\n   * @type {?Guild}\n   * @readonly\n   */\n  get guild() {\n    return this.client.guilds.cache.get(this.guildID) || null;\n  }\n\n  /**\n   * The URL of this template\n   * @type {string}\n   * @readonly\n   */\n  get url() {\n    return `${this.client.options.http.template}/${this.code}`;\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the templates's code instead of the template object.\n   * @returns {string}\n   * @example\n   * // Logs: Template: FKvmczH2HyUf\n   * console.log(`Template: ${guildTemplate}!`);\n   */\n  toString() {\n    return this.code;\n  }\n}\n\nmodule.exports = GuildTemplate;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}