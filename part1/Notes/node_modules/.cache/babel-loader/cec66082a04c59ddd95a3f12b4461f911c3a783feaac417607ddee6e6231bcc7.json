{"ast":null,"code":"'use strict';\n\nconst Integration = require('./Integration');\nconst Webhook = require('./Webhook');\nconst Collection = require('../util/Collection');\nconst {\n  PartialTypes\n} = require('../util/Constants');\nconst Snowflake = require('../util/Snowflake');\nconst Util = require('../util/Util');\n\n/**\n * The target type of an entry, e.g. `GUILD`. Here are the available types:\n * * GUILD\n * * CHANNEL\n * * USER\n * * ROLE\n * * INVITE\n * * WEBHOOK\n * * EMOJI\n * * MESSAGE\n * * INTEGRATION\n * @typedef {string} AuditLogTargetType\n */\n\n/**\n * Key mirror of all available audit log targets.\n * @name GuildAuditLogs.Targets\n * @type {Object<string, string>}\n */\nconst Targets = {\n  ALL: 'ALL',\n  GUILD: 'GUILD',\n  CHANNEL: 'CHANNEL',\n  USER: 'USER',\n  ROLE: 'ROLE',\n  INVITE: 'INVITE',\n  WEBHOOK: 'WEBHOOK',\n  EMOJI: 'EMOJI',\n  MESSAGE: 'MESSAGE',\n  INTEGRATION: 'INTEGRATION',\n  UNKNOWN: 'UNKNOWN'\n};\n\n/**\n * The action of an entry. Here are the available actions:\n * * ALL: null\n * * GUILD_UPDATE: 1\n * * CHANNEL_CREATE: 10\n * * CHANNEL_UPDATE: 11\n * * CHANNEL_DELETE: 12\n * * CHANNEL_OVERWRITE_CREATE: 13\n * * CHANNEL_OVERWRITE_UPDATE: 14\n * * CHANNEL_OVERWRITE_DELETE: 15\n * * MEMBER_KICK: 20\n * * MEMBER_PRUNE: 21\n * * MEMBER_BAN_ADD: 22\n * * MEMBER_BAN_REMOVE: 23\n * * MEMBER_UPDATE: 24\n * * MEMBER_ROLE_UPDATE: 25\n * * MEMBER_MOVE: 26\n * * MEMBER_DISCONNECT: 27\n * * BOT_ADD: 28,\n * * ROLE_CREATE: 30\n * * ROLE_UPDATE: 31\n * * ROLE_DELETE: 32\n * * INVITE_CREATE: 40\n * * INVITE_UPDATE: 41\n * * INVITE_DELETE: 42\n * * WEBHOOK_CREATE: 50\n * * WEBHOOK_UPDATE: 51\n * * WEBHOOK_DELETE: 52\n * * EMOJI_CREATE: 60\n * * EMOJI_UPDATE: 61\n * * EMOJI_DELETE: 62\n * * MESSAGE_DELETE: 72\n * * MESSAGE_BULK_DELETE: 73\n * * MESSAGE_PIN: 74\n * * MESSAGE_UNPIN: 75\n * * INTEGRATION_CREATE: 80\n * * INTEGRATION_UPDATE: 81\n * * INTEGRATION_DELETE: 82\n * @typedef {?number|string} AuditLogAction\n */\n\n/**\n * All available actions keyed under their names to their numeric values.\n * @name GuildAuditLogs.Actions\n * @type {Object<string, number>}\n */\nconst Actions = {\n  ALL: null,\n  GUILD_UPDATE: 1,\n  CHANNEL_CREATE: 10,\n  CHANNEL_UPDATE: 11,\n  CHANNEL_DELETE: 12,\n  CHANNEL_OVERWRITE_CREATE: 13,\n  CHANNEL_OVERWRITE_UPDATE: 14,\n  CHANNEL_OVERWRITE_DELETE: 15,\n  MEMBER_KICK: 20,\n  MEMBER_PRUNE: 21,\n  MEMBER_BAN_ADD: 22,\n  MEMBER_BAN_REMOVE: 23,\n  MEMBER_UPDATE: 24,\n  MEMBER_ROLE_UPDATE: 25,\n  MEMBER_MOVE: 26,\n  MEMBER_DISCONNECT: 27,\n  BOT_ADD: 28,\n  ROLE_CREATE: 30,\n  ROLE_UPDATE: 31,\n  ROLE_DELETE: 32,\n  INVITE_CREATE: 40,\n  INVITE_UPDATE: 41,\n  INVITE_DELETE: 42,\n  WEBHOOK_CREATE: 50,\n  WEBHOOK_UPDATE: 51,\n  WEBHOOK_DELETE: 52,\n  EMOJI_CREATE: 60,\n  EMOJI_UPDATE: 61,\n  EMOJI_DELETE: 62,\n  MESSAGE_DELETE: 72,\n  MESSAGE_BULK_DELETE: 73,\n  MESSAGE_PIN: 74,\n  MESSAGE_UNPIN: 75,\n  INTEGRATION_CREATE: 80,\n  INTEGRATION_UPDATE: 81,\n  INTEGRATION_DELETE: 82\n};\n\n/**\n * Audit logs entries are held in this class.\n */\nclass GuildAuditLogs {\n  constructor(guild, data) {\n    if (data.users) for (const user of data.users) guild.client.users.add(user);\n    /**\n     * Cached webhooks\n     * @type {Collection<Snowflake, Webhook>}\n     * @private\n     */\n    this.webhooks = new Collection();\n    if (data.webhooks) {\n      for (const hook of data.webhooks) {\n        this.webhooks.set(hook.id, new Webhook(guild.client, hook));\n      }\n    }\n\n    /**\n     * Cached integrations\n     * @type {Collection<Snowflake, Integration>}\n     * @private\n     */\n    this.integrations = new Collection();\n    if (data.integrations) {\n      for (const integration of data.integrations) {\n        this.integrations.set(integration.id, new Integration(guild.client, integration, guild));\n      }\n    }\n\n    /**\n     * The entries for this guild's audit logs\n     * @type {Collection<Snowflake, GuildAuditLogsEntry>}\n     */\n    this.entries = new Collection();\n    for (const item of data.audit_log_entries) {\n      const entry = new GuildAuditLogsEntry(this, guild, item);\n      this.entries.set(entry.id, entry);\n    }\n  }\n\n  /**\n   * Handles possible promises for entry targets.\n   * @returns {Promise<GuildAuditLogs>}\n   */\n  static build() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    const logs = new GuildAuditLogs(...args);\n    return Promise.all(logs.entries.map(e => e.target)).then(() => logs);\n  }\n\n  /**\n   * The target of an entry. It can be one of:\n   * * A guild\n   * * A user\n   * * A role\n   * * An emoji\n   * * An invite\n   * * A webhook\n   * * An integration\n   * * An object with an id key if target was deleted\n   * * An object where the keys represent either the new value or the old value\n   * @typedef {?Object|Guild|User|Role|GuildEmoji|Invite|Webhook|Integration} AuditLogEntryTarget\n   */\n\n  /**\n   * Finds the target type from the entry action.\n   * @param {AuditLogAction} target The action target\n   * @returns {AuditLogTargetType}\n   */\n  static targetType(target) {\n    if (target < 10) return Targets.GUILD;\n    if (target < 20) return Targets.CHANNEL;\n    if (target < 30) return Targets.USER;\n    if (target < 40) return Targets.ROLE;\n    if (target < 50) return Targets.INVITE;\n    if (target < 60) return Targets.WEBHOOK;\n    if (target < 70) return Targets.EMOJI;\n    if (target < 80) return Targets.MESSAGE;\n    if (target < 90) return Targets.INTEGRATION;\n    return Targets.UNKNOWN;\n  }\n\n  /**\n   * The action type of an entry, e.g. `CREATE`. Here are the available types:\n   * * CREATE\n   * * DELETE\n   * * UPDATE\n   * * ALL\n   * @typedef {string} AuditLogActionType\n   */\n\n  /**\n   * Finds the action type from the entry action.\n   * @param {AuditLogAction} action The action target\n   * @returns {AuditLogActionType}\n   */\n  static actionType(action) {\n    if ([Actions.CHANNEL_CREATE, Actions.CHANNEL_OVERWRITE_CREATE, Actions.MEMBER_BAN_REMOVE, Actions.BOT_ADD, Actions.ROLE_CREATE, Actions.INVITE_CREATE, Actions.WEBHOOK_CREATE, Actions.EMOJI_CREATE, Actions.MESSAGE_PIN, Actions.INTEGRATION_CREATE].includes(action)) {\n      return 'CREATE';\n    }\n    if ([Actions.CHANNEL_DELETE, Actions.CHANNEL_OVERWRITE_DELETE, Actions.MEMBER_KICK, Actions.MEMBER_PRUNE, Actions.MEMBER_BAN_ADD, Actions.MEMBER_DISCONNECT, Actions.ROLE_DELETE, Actions.INVITE_DELETE, Actions.WEBHOOK_DELETE, Actions.EMOJI_DELETE, Actions.MESSAGE_DELETE, Actions.MESSAGE_BULK_DELETE, Actions.MESSAGE_UNPIN, Actions.INTEGRATION_DELETE].includes(action)) {\n      return 'DELETE';\n    }\n    if ([Actions.GUILD_UPDATE, Actions.CHANNEL_UPDATE, Actions.CHANNEL_OVERWRITE_UPDATE, Actions.MEMBER_UPDATE, Actions.MEMBER_ROLE_UPDATE, Actions.MEMBER_MOVE, Actions.ROLE_UPDATE, Actions.INVITE_UPDATE, Actions.WEBHOOK_UPDATE, Actions.EMOJI_UPDATE, Actions.INTEGRATION_UPDATE].includes(action)) {\n      return 'UPDATE';\n    }\n    return 'ALL';\n  }\n  toJSON() {\n    return Util.flatten(this);\n  }\n}\n\n/**\n * Audit logs entry.\n */\nclass GuildAuditLogsEntry {\n  constructor(logs, guild, data) {\n    const targetType = GuildAuditLogs.targetType(data.action_type);\n    /**\n     * The target type of this entry\n     * @type {AuditLogTargetType}\n     */\n    this.targetType = targetType;\n\n    /**\n     * The action type of this entry\n     * @type {AuditLogActionType}\n     */\n    this.actionType = GuildAuditLogs.actionType(data.action_type);\n\n    /**\n     * Specific action type of this entry in its string presentation\n     * @type {AuditLogAction}\n     */\n    this.action = Object.keys(Actions).find(k => Actions[k] === data.action_type);\n\n    /**\n     * The reason of this entry\n     * @type {?string}\n     */\n    this.reason = data.reason || null;\n\n    /**\n     * The user that executed this entry\n     * @type {User}\n     */\n    this.executor = guild.client.options.partials.includes(PartialTypes.USER) ? guild.client.users.add({\n      id: data.user_id\n    }) : guild.client.users.cache.get(data.user_id);\n\n    /**\n     * An entry in the audit log representing a specific change.\n     * @typedef {object} AuditLogChange\n     * @property {string} key The property that was changed, e.g. `nick` for nickname changes\n     * @property {*} [old] The old value of the change, e.g. for nicknames, the old nickname\n     * @property {*} [new] The new value of the change, e.g. for nicknames, the new nickname\n     */\n\n    /**\n     * Specific property changes\n     * @type {AuditLogChange[]}\n     */\n    this.changes = data.changes ? data.changes.map(c => ({\n      key: c.key,\n      old: c.old_value,\n      new: c.new_value\n    })) : null;\n\n    /**\n     * The ID of this entry\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * Any extra data from the entry\n     * @type {?Object|Role|GuildMember}\n     */\n    this.extra = null;\n    switch (data.action_type) {\n      case Actions.MEMBER_PRUNE:\n        this.extra = {\n          removed: Number(data.options.members_removed),\n          days: Number(data.options.delete_member_days)\n        };\n        break;\n      case Actions.MEMBER_MOVE:\n      case Actions.MESSAGE_DELETE:\n      case Actions.MESSAGE_BULK_DELETE:\n        this.extra = {\n          channel: guild.channels.cache.get(data.options.channel_id) || {\n            id: data.options.channel_id\n          },\n          count: Number(data.options.count)\n        };\n        break;\n      case Actions.MESSAGE_PIN:\n      case Actions.MESSAGE_UNPIN:\n        this.extra = {\n          channel: guild.client.channels.cache.get(data.options.channel_id) || {\n            id: data.options.channel_id\n          },\n          messageID: data.options.message_id\n        };\n        break;\n      case Actions.MEMBER_DISCONNECT:\n        this.extra = {\n          count: Number(data.options.count)\n        };\n        break;\n      case Actions.CHANNEL_OVERWRITE_CREATE:\n      case Actions.CHANNEL_OVERWRITE_UPDATE:\n      case Actions.CHANNEL_OVERWRITE_DELETE:\n        switch (data.options.type) {\n          case 'member':\n            this.extra = guild.members.cache.get(data.options.id) || {\n              id: data.options.id,\n              type: 'member'\n            };\n            break;\n          case 'role':\n            this.extra = guild.roles.cache.get(data.options.id) || {\n              id: data.options.id,\n              name: data.options.role_name,\n              type: 'role'\n            };\n            break;\n          default:\n            break;\n        }\n        break;\n      default:\n        break;\n    }\n\n    /**\n     * The target of this entry\n     * @type {?AuditLogEntryTarget}\n     */\n    this.target = null;\n    if (targetType === Targets.UNKNOWN) {\n      this.target = this.changes.reduce((o, c) => {\n        o[c.key] = c.new || c.old;\n        return o;\n      }, {});\n      this.target.id = data.target_id;\n      // MEMBER_DISCONNECT and similar types do not provide a target_id.\n    } else if (targetType === Targets.USER && data.target_id) {\n      this.target = guild.client.options.partials.includes(PartialTypes.USER) ? guild.client.users.add({\n        id: data.target_id\n      }) : guild.client.users.cache.get(data.target_id);\n    } else if (targetType === Targets.GUILD) {\n      this.target = guild.client.guilds.cache.get(data.target_id);\n    } else if (targetType === Targets.WEBHOOK) {\n      this.target = logs.webhooks.get(data.target_id) || new Webhook(guild.client, this.changes.reduce((o, c) => {\n        o[c.key] = c.new || c.old;\n        return o;\n      }, {\n        id: data.target_id,\n        guild_id: guild.id\n      }));\n    } else if (targetType === Targets.INVITE) {\n      this.target = guild.members.fetch(guild.client.user.id).then(me => {\n        if (me.permissions.has('MANAGE_GUILD')) {\n          const change = this.changes.find(c => c.key === 'code');\n          return guild.fetchInvites().then(invites => {\n            this.target = invites.find(i => i.code === (change.new || change.old));\n          });\n        } else {\n          this.target = this.changes.reduce((o, c) => {\n            o[c.key] = c.new || c.old;\n            return o;\n          }, {});\n          return this.target;\n        }\n      });\n    } else if (targetType === Targets.MESSAGE) {\n      // Discord sends a channel id for the MESSAGE_BULK_DELETE action type.\n      this.target = data.action_type === Actions.MESSAGE_BULK_DELETE ? guild.channels.cache.get(data.target_id) || {\n        id: data.target_id\n      } : guild.client.users.cache.get(data.target_id);\n    } else if (targetType === Targets.INTEGRATION) {\n      this.target = logs.integrations.get(data.target_id) || new Integration(guild.client, this.changes.reduce((o, c) => {\n        o[c.key] = c.new || c.old;\n        return o;\n      }, {\n        id: data.target_id\n      }), guild);\n    } else if (data.target_id) {\n      this.target = guild[`${targetType.toLowerCase()}s`].cache.get(data.target_id) || {\n        id: data.target_id\n      };\n    }\n  }\n\n  /**\n   * The timestamp this entry was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return Snowflake.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time this entry was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n  toJSON() {\n    return Util.flatten(this, {\n      createdTimestamp: true\n    });\n  }\n}\nGuildAuditLogs.Actions = Actions;\nGuildAuditLogs.Targets = Targets;\nGuildAuditLogs.Entry = GuildAuditLogsEntry;\nmodule.exports = GuildAuditLogs;","map":{"version":3,"names":["Integration","require","Webhook","Collection","PartialTypes","Snowflake","Util","Targets","ALL","GUILD","CHANNEL","USER","ROLE","INVITE","WEBHOOK","EMOJI","MESSAGE","INTEGRATION","UNKNOWN","Actions","GUILD_UPDATE","CHANNEL_CREATE","CHANNEL_UPDATE","CHANNEL_DELETE","CHANNEL_OVERWRITE_CREATE","CHANNEL_OVERWRITE_UPDATE","CHANNEL_OVERWRITE_DELETE","MEMBER_KICK","MEMBER_PRUNE","MEMBER_BAN_ADD","MEMBER_BAN_REMOVE","MEMBER_UPDATE","MEMBER_ROLE_UPDATE","MEMBER_MOVE","MEMBER_DISCONNECT","BOT_ADD","ROLE_CREATE","ROLE_UPDATE","ROLE_DELETE","INVITE_CREATE","INVITE_UPDATE","INVITE_DELETE","WEBHOOK_CREATE","WEBHOOK_UPDATE","WEBHOOK_DELETE","EMOJI_CREATE","EMOJI_UPDATE","EMOJI_DELETE","MESSAGE_DELETE","MESSAGE_BULK_DELETE","MESSAGE_PIN","MESSAGE_UNPIN","INTEGRATION_CREATE","INTEGRATION_UPDATE","INTEGRATION_DELETE","GuildAuditLogs","constructor","guild","data","users","user","client","add","webhooks","hook","set","id","integrations","integration","entries","item","audit_log_entries","entry","GuildAuditLogsEntry","build","args","logs","Promise","all","map","e","target","then","targetType","actionType","action","includes","toJSON","flatten","action_type","Object","keys","find","k","reason","executor","options","partials","user_id","cache","get","changes","c","key","old","old_value","new","new_value","extra","removed","Number","members_removed","days","delete_member_days","channel","channels","channel_id","count","messageID","message_id","type","members","roles","name","role_name","reduce","o","target_id","guilds","guild_id","fetch","me","permissions","has","change","fetchInvites","invites","i","code","toLowerCase","createdTimestamp","deconstruct","timestamp","createdAt","Date","Entry","module","exports"],"sources":["/Users/jessegill/node_modules/discord.js/src/structures/GuildAuditLogs.js"],"sourcesContent":["'use strict';\n\nconst Integration = require('./Integration');\nconst Webhook = require('./Webhook');\nconst Collection = require('../util/Collection');\nconst { PartialTypes } = require('../util/Constants');\nconst Snowflake = require('../util/Snowflake');\nconst Util = require('../util/Util');\n\n/**\n * The target type of an entry, e.g. `GUILD`. Here are the available types:\n * * GUILD\n * * CHANNEL\n * * USER\n * * ROLE\n * * INVITE\n * * WEBHOOK\n * * EMOJI\n * * MESSAGE\n * * INTEGRATION\n * @typedef {string} AuditLogTargetType\n */\n\n/**\n * Key mirror of all available audit log targets.\n * @name GuildAuditLogs.Targets\n * @type {Object<string, string>}\n */\nconst Targets = {\n  ALL: 'ALL',\n  GUILD: 'GUILD',\n  CHANNEL: 'CHANNEL',\n  USER: 'USER',\n  ROLE: 'ROLE',\n  INVITE: 'INVITE',\n  WEBHOOK: 'WEBHOOK',\n  EMOJI: 'EMOJI',\n  MESSAGE: 'MESSAGE',\n  INTEGRATION: 'INTEGRATION',\n  UNKNOWN: 'UNKNOWN',\n};\n\n/**\n * The action of an entry. Here are the available actions:\n * * ALL: null\n * * GUILD_UPDATE: 1\n * * CHANNEL_CREATE: 10\n * * CHANNEL_UPDATE: 11\n * * CHANNEL_DELETE: 12\n * * CHANNEL_OVERWRITE_CREATE: 13\n * * CHANNEL_OVERWRITE_UPDATE: 14\n * * CHANNEL_OVERWRITE_DELETE: 15\n * * MEMBER_KICK: 20\n * * MEMBER_PRUNE: 21\n * * MEMBER_BAN_ADD: 22\n * * MEMBER_BAN_REMOVE: 23\n * * MEMBER_UPDATE: 24\n * * MEMBER_ROLE_UPDATE: 25\n * * MEMBER_MOVE: 26\n * * MEMBER_DISCONNECT: 27\n * * BOT_ADD: 28,\n * * ROLE_CREATE: 30\n * * ROLE_UPDATE: 31\n * * ROLE_DELETE: 32\n * * INVITE_CREATE: 40\n * * INVITE_UPDATE: 41\n * * INVITE_DELETE: 42\n * * WEBHOOK_CREATE: 50\n * * WEBHOOK_UPDATE: 51\n * * WEBHOOK_DELETE: 52\n * * EMOJI_CREATE: 60\n * * EMOJI_UPDATE: 61\n * * EMOJI_DELETE: 62\n * * MESSAGE_DELETE: 72\n * * MESSAGE_BULK_DELETE: 73\n * * MESSAGE_PIN: 74\n * * MESSAGE_UNPIN: 75\n * * INTEGRATION_CREATE: 80\n * * INTEGRATION_UPDATE: 81\n * * INTEGRATION_DELETE: 82\n * @typedef {?number|string} AuditLogAction\n */\n\n/**\n * All available actions keyed under their names to their numeric values.\n * @name GuildAuditLogs.Actions\n * @type {Object<string, number>}\n */\nconst Actions = {\n  ALL: null,\n  GUILD_UPDATE: 1,\n  CHANNEL_CREATE: 10,\n  CHANNEL_UPDATE: 11,\n  CHANNEL_DELETE: 12,\n  CHANNEL_OVERWRITE_CREATE: 13,\n  CHANNEL_OVERWRITE_UPDATE: 14,\n  CHANNEL_OVERWRITE_DELETE: 15,\n  MEMBER_KICK: 20,\n  MEMBER_PRUNE: 21,\n  MEMBER_BAN_ADD: 22,\n  MEMBER_BAN_REMOVE: 23,\n  MEMBER_UPDATE: 24,\n  MEMBER_ROLE_UPDATE: 25,\n  MEMBER_MOVE: 26,\n  MEMBER_DISCONNECT: 27,\n  BOT_ADD: 28,\n  ROLE_CREATE: 30,\n  ROLE_UPDATE: 31,\n  ROLE_DELETE: 32,\n  INVITE_CREATE: 40,\n  INVITE_UPDATE: 41,\n  INVITE_DELETE: 42,\n  WEBHOOK_CREATE: 50,\n  WEBHOOK_UPDATE: 51,\n  WEBHOOK_DELETE: 52,\n  EMOJI_CREATE: 60,\n  EMOJI_UPDATE: 61,\n  EMOJI_DELETE: 62,\n  MESSAGE_DELETE: 72,\n  MESSAGE_BULK_DELETE: 73,\n  MESSAGE_PIN: 74,\n  MESSAGE_UNPIN: 75,\n  INTEGRATION_CREATE: 80,\n  INTEGRATION_UPDATE: 81,\n  INTEGRATION_DELETE: 82,\n};\n\n/**\n * Audit logs entries are held in this class.\n */\nclass GuildAuditLogs {\n  constructor(guild, data) {\n    if (data.users) for (const user of data.users) guild.client.users.add(user);\n    /**\n     * Cached webhooks\n     * @type {Collection<Snowflake, Webhook>}\n     * @private\n     */\n    this.webhooks = new Collection();\n    if (data.webhooks) {\n      for (const hook of data.webhooks) {\n        this.webhooks.set(hook.id, new Webhook(guild.client, hook));\n      }\n    }\n\n    /**\n     * Cached integrations\n     * @type {Collection<Snowflake, Integration>}\n     * @private\n     */\n    this.integrations = new Collection();\n    if (data.integrations) {\n      for (const integration of data.integrations) {\n        this.integrations.set(integration.id, new Integration(guild.client, integration, guild));\n      }\n    }\n\n    /**\n     * The entries for this guild's audit logs\n     * @type {Collection<Snowflake, GuildAuditLogsEntry>}\n     */\n    this.entries = new Collection();\n    for (const item of data.audit_log_entries) {\n      const entry = new GuildAuditLogsEntry(this, guild, item);\n      this.entries.set(entry.id, entry);\n    }\n  }\n\n  /**\n   * Handles possible promises for entry targets.\n   * @returns {Promise<GuildAuditLogs>}\n   */\n  static build(...args) {\n    const logs = new GuildAuditLogs(...args);\n    return Promise.all(logs.entries.map(e => e.target)).then(() => logs);\n  }\n\n  /**\n   * The target of an entry. It can be one of:\n   * * A guild\n   * * A user\n   * * A role\n   * * An emoji\n   * * An invite\n   * * A webhook\n   * * An integration\n   * * An object with an id key if target was deleted\n   * * An object where the keys represent either the new value or the old value\n   * @typedef {?Object|Guild|User|Role|GuildEmoji|Invite|Webhook|Integration} AuditLogEntryTarget\n   */\n\n  /**\n   * Finds the target type from the entry action.\n   * @param {AuditLogAction} target The action target\n   * @returns {AuditLogTargetType}\n   */\n  static targetType(target) {\n    if (target < 10) return Targets.GUILD;\n    if (target < 20) return Targets.CHANNEL;\n    if (target < 30) return Targets.USER;\n    if (target < 40) return Targets.ROLE;\n    if (target < 50) return Targets.INVITE;\n    if (target < 60) return Targets.WEBHOOK;\n    if (target < 70) return Targets.EMOJI;\n    if (target < 80) return Targets.MESSAGE;\n    if (target < 90) return Targets.INTEGRATION;\n    return Targets.UNKNOWN;\n  }\n\n  /**\n   * The action type of an entry, e.g. `CREATE`. Here are the available types:\n   * * CREATE\n   * * DELETE\n   * * UPDATE\n   * * ALL\n   * @typedef {string} AuditLogActionType\n   */\n\n  /**\n   * Finds the action type from the entry action.\n   * @param {AuditLogAction} action The action target\n   * @returns {AuditLogActionType}\n   */\n  static actionType(action) {\n    if (\n      [\n        Actions.CHANNEL_CREATE,\n        Actions.CHANNEL_OVERWRITE_CREATE,\n        Actions.MEMBER_BAN_REMOVE,\n        Actions.BOT_ADD,\n        Actions.ROLE_CREATE,\n        Actions.INVITE_CREATE,\n        Actions.WEBHOOK_CREATE,\n        Actions.EMOJI_CREATE,\n        Actions.MESSAGE_PIN,\n        Actions.INTEGRATION_CREATE,\n      ].includes(action)\n    ) {\n      return 'CREATE';\n    }\n\n    if (\n      [\n        Actions.CHANNEL_DELETE,\n        Actions.CHANNEL_OVERWRITE_DELETE,\n        Actions.MEMBER_KICK,\n        Actions.MEMBER_PRUNE,\n        Actions.MEMBER_BAN_ADD,\n        Actions.MEMBER_DISCONNECT,\n        Actions.ROLE_DELETE,\n        Actions.INVITE_DELETE,\n        Actions.WEBHOOK_DELETE,\n        Actions.EMOJI_DELETE,\n        Actions.MESSAGE_DELETE,\n        Actions.MESSAGE_BULK_DELETE,\n        Actions.MESSAGE_UNPIN,\n        Actions.INTEGRATION_DELETE,\n      ].includes(action)\n    ) {\n      return 'DELETE';\n    }\n\n    if (\n      [\n        Actions.GUILD_UPDATE,\n        Actions.CHANNEL_UPDATE,\n        Actions.CHANNEL_OVERWRITE_UPDATE,\n        Actions.MEMBER_UPDATE,\n        Actions.MEMBER_ROLE_UPDATE,\n        Actions.MEMBER_MOVE,\n        Actions.ROLE_UPDATE,\n        Actions.INVITE_UPDATE,\n        Actions.WEBHOOK_UPDATE,\n        Actions.EMOJI_UPDATE,\n        Actions.INTEGRATION_UPDATE,\n      ].includes(action)\n    ) {\n      return 'UPDATE';\n    }\n\n    return 'ALL';\n  }\n\n  toJSON() {\n    return Util.flatten(this);\n  }\n}\n\n/**\n * Audit logs entry.\n */\nclass GuildAuditLogsEntry {\n  constructor(logs, guild, data) {\n    const targetType = GuildAuditLogs.targetType(data.action_type);\n    /**\n     * The target type of this entry\n     * @type {AuditLogTargetType}\n     */\n    this.targetType = targetType;\n\n    /**\n     * The action type of this entry\n     * @type {AuditLogActionType}\n     */\n    this.actionType = GuildAuditLogs.actionType(data.action_type);\n\n    /**\n     * Specific action type of this entry in its string presentation\n     * @type {AuditLogAction}\n     */\n    this.action = Object.keys(Actions).find(k => Actions[k] === data.action_type);\n\n    /**\n     * The reason of this entry\n     * @type {?string}\n     */\n    this.reason = data.reason || null;\n\n    /**\n     * The user that executed this entry\n     * @type {User}\n     */\n    this.executor = guild.client.options.partials.includes(PartialTypes.USER)\n      ? guild.client.users.add({ id: data.user_id })\n      : guild.client.users.cache.get(data.user_id);\n\n    /**\n     * An entry in the audit log representing a specific change.\n     * @typedef {object} AuditLogChange\n     * @property {string} key The property that was changed, e.g. `nick` for nickname changes\n     * @property {*} [old] The old value of the change, e.g. for nicknames, the old nickname\n     * @property {*} [new] The new value of the change, e.g. for nicknames, the new nickname\n     */\n\n    /**\n     * Specific property changes\n     * @type {AuditLogChange[]}\n     */\n    this.changes = data.changes ? data.changes.map(c => ({ key: c.key, old: c.old_value, new: c.new_value })) : null;\n\n    /**\n     * The ID of this entry\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * Any extra data from the entry\n     * @type {?Object|Role|GuildMember}\n     */\n    this.extra = null;\n    switch (data.action_type) {\n      case Actions.MEMBER_PRUNE:\n        this.extra = {\n          removed: Number(data.options.members_removed),\n          days: Number(data.options.delete_member_days),\n        };\n        break;\n\n      case Actions.MEMBER_MOVE:\n      case Actions.MESSAGE_DELETE:\n      case Actions.MESSAGE_BULK_DELETE:\n        this.extra = {\n          channel: guild.channels.cache.get(data.options.channel_id) || { id: data.options.channel_id },\n          count: Number(data.options.count),\n        };\n        break;\n\n      case Actions.MESSAGE_PIN:\n      case Actions.MESSAGE_UNPIN:\n        this.extra = {\n          channel: guild.client.channels.cache.get(data.options.channel_id) || { id: data.options.channel_id },\n          messageID: data.options.message_id,\n        };\n        break;\n\n      case Actions.MEMBER_DISCONNECT:\n        this.extra = {\n          count: Number(data.options.count),\n        };\n        break;\n\n      case Actions.CHANNEL_OVERWRITE_CREATE:\n      case Actions.CHANNEL_OVERWRITE_UPDATE:\n      case Actions.CHANNEL_OVERWRITE_DELETE:\n        switch (data.options.type) {\n          case 'member':\n            this.extra = guild.members.cache.get(data.options.id) || { id: data.options.id, type: 'member' };\n            break;\n\n          case 'role':\n            this.extra = guild.roles.cache.get(data.options.id) || {\n              id: data.options.id,\n              name: data.options.role_name,\n              type: 'role',\n            };\n            break;\n\n          default:\n            break;\n        }\n        break;\n\n      default:\n        break;\n    }\n\n    /**\n     * The target of this entry\n     * @type {?AuditLogEntryTarget}\n     */\n    this.target = null;\n    if (targetType === Targets.UNKNOWN) {\n      this.target = this.changes.reduce((o, c) => {\n        o[c.key] = c.new || c.old;\n        return o;\n      }, {});\n      this.target.id = data.target_id;\n      // MEMBER_DISCONNECT and similar types do not provide a target_id.\n    } else if (targetType === Targets.USER && data.target_id) {\n      this.target = guild.client.options.partials.includes(PartialTypes.USER)\n        ? guild.client.users.add({ id: data.target_id })\n        : guild.client.users.cache.get(data.target_id);\n    } else if (targetType === Targets.GUILD) {\n      this.target = guild.client.guilds.cache.get(data.target_id);\n    } else if (targetType === Targets.WEBHOOK) {\n      this.target =\n        logs.webhooks.get(data.target_id) ||\n        new Webhook(\n          guild.client,\n          this.changes.reduce(\n            (o, c) => {\n              o[c.key] = c.new || c.old;\n              return o;\n            },\n            {\n              id: data.target_id,\n              guild_id: guild.id,\n            },\n          ),\n        );\n    } else if (targetType === Targets.INVITE) {\n      this.target = guild.members.fetch(guild.client.user.id).then(me => {\n        if (me.permissions.has('MANAGE_GUILD')) {\n          const change = this.changes.find(c => c.key === 'code');\n          return guild.fetchInvites().then(invites => {\n            this.target = invites.find(i => i.code === (change.new || change.old));\n          });\n        } else {\n          this.target = this.changes.reduce((o, c) => {\n            o[c.key] = c.new || c.old;\n            return o;\n          }, {});\n          return this.target;\n        }\n      });\n    } else if (targetType === Targets.MESSAGE) {\n      // Discord sends a channel id for the MESSAGE_BULK_DELETE action type.\n      this.target =\n        data.action_type === Actions.MESSAGE_BULK_DELETE\n          ? guild.channels.cache.get(data.target_id) || { id: data.target_id }\n          : guild.client.users.cache.get(data.target_id);\n    } else if (targetType === Targets.INTEGRATION) {\n      this.target =\n        logs.integrations.get(data.target_id) ||\n        new Integration(\n          guild.client,\n          this.changes.reduce(\n            (o, c) => {\n              o[c.key] = c.new || c.old;\n              return o;\n            },\n            { id: data.target_id },\n          ),\n          guild,\n        );\n    } else if (data.target_id) {\n      this.target = guild[`${targetType.toLowerCase()}s`].cache.get(data.target_id) || { id: data.target_id };\n    }\n  }\n\n  /**\n   * The timestamp this entry was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return Snowflake.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time this entry was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  toJSON() {\n    return Util.flatten(this, { createdTimestamp: true });\n  }\n}\n\nGuildAuditLogs.Actions = Actions;\nGuildAuditLogs.Targets = Targets;\nGuildAuditLogs.Entry = GuildAuditLogsEntry;\n\nmodule.exports = GuildAuditLogs;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}