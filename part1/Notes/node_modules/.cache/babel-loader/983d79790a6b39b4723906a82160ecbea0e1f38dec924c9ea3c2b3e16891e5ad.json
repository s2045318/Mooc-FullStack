{"ast":null,"code":"'use strict';\n\nconst APIRequest = require('./APIRequest');\nconst routeBuilder = require('./APIRouter');\nconst RequestHandler = require('./RequestHandler');\nconst {\n  Error\n} = require('../errors');\nconst Collection = require('../util/Collection');\nconst {\n  Endpoints\n} = require('../util/Constants');\nclass RESTManager {\n  constructor(client) {\n    let tokenPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Bot';\n    this.client = client;\n    this.handlers = new Collection();\n    this.tokenPrefix = tokenPrefix;\n    this.versioned = true;\n    this.globalTimeout = null;\n    if (client.options.restSweepInterval > 0) {\n      client.setInterval(() => {\n        this.handlers.sweep(handler => handler._inactive);\n      }, client.options.restSweepInterval * 1000);\n    }\n  }\n  get api() {\n    return routeBuilder(this);\n  }\n  getAuth() {\n    const token = this.client.token || this.client.accessToken;\n    if (token) return `${this.tokenPrefix} ${token}`;\n    throw new Error('TOKEN_MISSING');\n  }\n  get cdn() {\n    return Endpoints.CDN(this.client.options.http.cdn);\n  }\n  request(method, url) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const apiRequest = new APIRequest(this, method, url, options);\n    let handler = this.handlers.get(apiRequest.route);\n    if (!handler) {\n      handler = new RequestHandler(this);\n      this.handlers.set(apiRequest.route, handler);\n    }\n    return handler.push(apiRequest);\n  }\n  get endpoint() {\n    return this.client.options.http.api;\n  }\n  set endpoint(endpoint) {\n    this.client.options.http.api = endpoint;\n  }\n}\nmodule.exports = RESTManager;","map":{"version":3,"names":["APIRequest","require","routeBuilder","RequestHandler","Error","Collection","Endpoints","RESTManager","constructor","client","tokenPrefix","handlers","versioned","globalTimeout","options","restSweepInterval","setInterval","sweep","handler","_inactive","api","getAuth","token","accessToken","cdn","CDN","http","request","method","url","apiRequest","get","route","set","push","endpoint","module","exports"],"sources":["/Users/jessegill/node_modules/discord.js/src/rest/RESTManager.js"],"sourcesContent":["'use strict';\n\nconst APIRequest = require('./APIRequest');\nconst routeBuilder = require('./APIRouter');\nconst RequestHandler = require('./RequestHandler');\nconst { Error } = require('../errors');\nconst Collection = require('../util/Collection');\nconst { Endpoints } = require('../util/Constants');\n\nclass RESTManager {\n  constructor(client, tokenPrefix = 'Bot') {\n    this.client = client;\n    this.handlers = new Collection();\n    this.tokenPrefix = tokenPrefix;\n    this.versioned = true;\n    this.globalTimeout = null;\n    if (client.options.restSweepInterval > 0) {\n      client.setInterval(() => {\n        this.handlers.sweep(handler => handler._inactive);\n      }, client.options.restSweepInterval * 1000);\n    }\n  }\n\n  get api() {\n    return routeBuilder(this);\n  }\n\n  getAuth() {\n    const token = this.client.token || this.client.accessToken;\n    if (token) return `${this.tokenPrefix} ${token}`;\n    throw new Error('TOKEN_MISSING');\n  }\n\n  get cdn() {\n    return Endpoints.CDN(this.client.options.http.cdn);\n  }\n\n  request(method, url, options = {}) {\n    const apiRequest = new APIRequest(this, method, url, options);\n    let handler = this.handlers.get(apiRequest.route);\n\n    if (!handler) {\n      handler = new RequestHandler(this);\n      this.handlers.set(apiRequest.route, handler);\n    }\n\n    return handler.push(apiRequest);\n  }\n\n  get endpoint() {\n    return this.client.options.http.api;\n  }\n\n  set endpoint(endpoint) {\n    this.client.options.http.api = endpoint;\n  }\n}\n\nmodule.exports = RESTManager;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,UAAU,GAAGC,OAAO,CAAC,cAAc,CAAC;AAC1C,MAAMC,YAAY,GAAGD,OAAO,CAAC,aAAa,CAAC;AAC3C,MAAME,cAAc,GAAGF,OAAO,CAAC,kBAAkB,CAAC;AAClD,MAAM;EAAEG;AAAM,CAAC,GAAGH,OAAO,CAAC,WAAW,CAAC;AACtC,MAAMI,UAAU,GAAGJ,OAAO,CAAC,oBAAoB,CAAC;AAChD,MAAM;EAAEK;AAAU,CAAC,GAAGL,OAAO,CAAC,mBAAmB,CAAC;AAElD,MAAMM,WAAW,CAAC;EAChBC,WAAW,CAACC,MAAM,EAAuB;IAAA,IAArBC,WAAW,uEAAG,KAAK;IACrC,IAAI,CAACD,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACE,QAAQ,GAAG,IAAIN,UAAU,EAAE;IAChC,IAAI,CAACK,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACE,SAAS,GAAG,IAAI;IACrB,IAAI,CAACC,aAAa,GAAG,IAAI;IACzB,IAAIJ,MAAM,CAACK,OAAO,CAACC,iBAAiB,GAAG,CAAC,EAAE;MACxCN,MAAM,CAACO,WAAW,CAAC,MAAM;QACvB,IAAI,CAACL,QAAQ,CAACM,KAAK,CAACC,OAAO,IAAIA,OAAO,CAACC,SAAS,CAAC;MACnD,CAAC,EAAEV,MAAM,CAACK,OAAO,CAACC,iBAAiB,GAAG,IAAI,CAAC;IAC7C;EACF;EAEA,IAAIK,GAAG,GAAG;IACR,OAAOlB,YAAY,CAAC,IAAI,CAAC;EAC3B;EAEAmB,OAAO,GAAG;IACR,MAAMC,KAAK,GAAG,IAAI,CAACb,MAAM,CAACa,KAAK,IAAI,IAAI,CAACb,MAAM,CAACc,WAAW;IAC1D,IAAID,KAAK,EAAE,OAAQ,GAAE,IAAI,CAACZ,WAAY,IAAGY,KAAM,EAAC;IAChD,MAAM,IAAIlB,KAAK,CAAC,eAAe,CAAC;EAClC;EAEA,IAAIoB,GAAG,GAAG;IACR,OAAOlB,SAAS,CAACmB,GAAG,CAAC,IAAI,CAAChB,MAAM,CAACK,OAAO,CAACY,IAAI,CAACF,GAAG,CAAC;EACpD;EAEAG,OAAO,CAACC,MAAM,EAAEC,GAAG,EAAgB;IAAA,IAAdf,OAAO,uEAAG,CAAC,CAAC;IAC/B,MAAMgB,UAAU,GAAG,IAAI9B,UAAU,CAAC,IAAI,EAAE4B,MAAM,EAAEC,GAAG,EAAEf,OAAO,CAAC;IAC7D,IAAII,OAAO,GAAG,IAAI,CAACP,QAAQ,CAACoB,GAAG,CAACD,UAAU,CAACE,KAAK,CAAC;IAEjD,IAAI,CAACd,OAAO,EAAE;MACZA,OAAO,GAAG,IAAIf,cAAc,CAAC,IAAI,CAAC;MAClC,IAAI,CAACQ,QAAQ,CAACsB,GAAG,CAACH,UAAU,CAACE,KAAK,EAAEd,OAAO,CAAC;IAC9C;IAEA,OAAOA,OAAO,CAACgB,IAAI,CAACJ,UAAU,CAAC;EACjC;EAEA,IAAIK,QAAQ,GAAG;IACb,OAAO,IAAI,CAAC1B,MAAM,CAACK,OAAO,CAACY,IAAI,CAACN,GAAG;EACrC;EAEA,IAAIe,QAAQ,CAACA,QAAQ,EAAE;IACrB,IAAI,CAAC1B,MAAM,CAACK,OAAO,CAACY,IAAI,CAACN,GAAG,GAAGe,QAAQ;EACzC;AACF;AAEAC,MAAM,CAACC,OAAO,GAAG9B,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}