{"ast":null,"code":"'use strict';\n\nconst Action = require('./Action');\nconst {\n  Events\n} = require('../../util/Constants');\nconst textBasedChannelTypes = ['dm', 'text', 'news'];\nclass TypingStart extends Action {\n  handle(data) {\n    const channel = this.getChannel(data);\n    if (!channel) {\n      return;\n    }\n    if (!textBasedChannelTypes.includes(channel.type)) {\n      this.client.emit(Events.WARN, `Discord sent a typing packet to a ${channel.type} channel ${channel.id}`);\n      return;\n    }\n    const user = this.getUserFromMember(data);\n    const timestamp = new Date(data.timestamp * 1000);\n    if (channel && user) {\n      if (channel._typing.has(user.id)) {\n        const typing = channel._typing.get(user.id);\n        typing.lastTimestamp = timestamp;\n        typing.elapsedTime = Date.now() - typing.since;\n        this.client.clearTimeout(typing.timeout);\n        typing.timeout = this.tooLate(channel, user);\n      } else {\n        const since = new Date();\n        const lastTimestamp = new Date();\n        channel._typing.set(user.id, {\n          user,\n          since,\n          lastTimestamp,\n          elapsedTime: Date.now() - since,\n          timeout: this.tooLate(channel, user)\n        });\n\n        /**\n         * Emitted whenever a user starts typing in a channel.\n         * @event Client#typingStart\n         * @param {Channel} channel The channel the user started typing in\n         * @param {User} user The user that started typing\n         */\n        this.client.emit(Events.TYPING_START, channel, user);\n      }\n    }\n  }\n  tooLate(channel, user) {\n    return channel.client.setTimeout(() => {\n      channel._typing.delete(user.id);\n    }, 10000);\n  }\n}\nmodule.exports = TypingStart;","map":{"version":3,"names":["Action","require","Events","textBasedChannelTypes","TypingStart","handle","data","channel","getChannel","includes","type","client","emit","WARN","id","user","getUserFromMember","timestamp","Date","_typing","has","typing","get","lastTimestamp","elapsedTime","now","since","clearTimeout","timeout","tooLate","set","TYPING_START","setTimeout","delete","module","exports"],"sources":["/Users/jessegill/node_modules/discord.js/src/client/actions/TypingStart.js"],"sourcesContent":["'use strict';\n\nconst Action = require('./Action');\nconst { Events } = require('../../util/Constants');\nconst textBasedChannelTypes = ['dm', 'text', 'news'];\n\nclass TypingStart extends Action {\n  handle(data) {\n    const channel = this.getChannel(data);\n    if (!channel) {\n      return;\n    }\n    if (!textBasedChannelTypes.includes(channel.type)) {\n      this.client.emit(Events.WARN, `Discord sent a typing packet to a ${channel.type} channel ${channel.id}`);\n      return;\n    }\n\n    const user = this.getUserFromMember(data);\n    const timestamp = new Date(data.timestamp * 1000);\n\n    if (channel && user) {\n      if (channel._typing.has(user.id)) {\n        const typing = channel._typing.get(user.id);\n\n        typing.lastTimestamp = timestamp;\n        typing.elapsedTime = Date.now() - typing.since;\n        this.client.clearTimeout(typing.timeout);\n        typing.timeout = this.tooLate(channel, user);\n      } else {\n        const since = new Date();\n        const lastTimestamp = new Date();\n        channel._typing.set(user.id, {\n          user,\n          since,\n          lastTimestamp,\n          elapsedTime: Date.now() - since,\n          timeout: this.tooLate(channel, user),\n        });\n\n        /**\n         * Emitted whenever a user starts typing in a channel.\n         * @event Client#typingStart\n         * @param {Channel} channel The channel the user started typing in\n         * @param {User} user The user that started typing\n         */\n        this.client.emit(Events.TYPING_START, channel, user);\n      }\n    }\n  }\n\n  tooLate(channel, user) {\n    return channel.client.setTimeout(() => {\n      channel._typing.delete(user.id);\n    }, 10000);\n  }\n}\n\nmodule.exports = TypingStart;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAU,CAAC;AAClC,MAAM;EAAEC;AAAO,CAAC,GAAGD,OAAO,CAAC,sBAAsB,CAAC;AAClD,MAAME,qBAAqB,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,CAAC;AAEpD,MAAMC,WAAW,SAASJ,MAAM,CAAC;EAC/BK,MAAM,CAACC,IAAI,EAAE;IACX,MAAMC,OAAO,GAAG,IAAI,CAACC,UAAU,CAACF,IAAI,CAAC;IACrC,IAAI,CAACC,OAAO,EAAE;MACZ;IACF;IACA,IAAI,CAACJ,qBAAqB,CAACM,QAAQ,CAACF,OAAO,CAACG,IAAI,CAAC,EAAE;MACjD,IAAI,CAACC,MAAM,CAACC,IAAI,CAACV,MAAM,CAACW,IAAI,EAAG,qCAAoCN,OAAO,CAACG,IAAK,YAAWH,OAAO,CAACO,EAAG,EAAC,CAAC;MACxG;IACF;IAEA,MAAMC,IAAI,GAAG,IAAI,CAACC,iBAAiB,CAACV,IAAI,CAAC;IACzC,MAAMW,SAAS,GAAG,IAAIC,IAAI,CAACZ,IAAI,CAACW,SAAS,GAAG,IAAI,CAAC;IAEjD,IAAIV,OAAO,IAAIQ,IAAI,EAAE;MACnB,IAAIR,OAAO,CAACY,OAAO,CAACC,GAAG,CAACL,IAAI,CAACD,EAAE,CAAC,EAAE;QAChC,MAAMO,MAAM,GAAGd,OAAO,CAACY,OAAO,CAACG,GAAG,CAACP,IAAI,CAACD,EAAE,CAAC;QAE3CO,MAAM,CAACE,aAAa,GAAGN,SAAS;QAChCI,MAAM,CAACG,WAAW,GAAGN,IAAI,CAACO,GAAG,EAAE,GAAGJ,MAAM,CAACK,KAAK;QAC9C,IAAI,CAACf,MAAM,CAACgB,YAAY,CAACN,MAAM,CAACO,OAAO,CAAC;QACxCP,MAAM,CAACO,OAAO,GAAG,IAAI,CAACC,OAAO,CAACtB,OAAO,EAAEQ,IAAI,CAAC;MAC9C,CAAC,MAAM;QACL,MAAMW,KAAK,GAAG,IAAIR,IAAI,EAAE;QACxB,MAAMK,aAAa,GAAG,IAAIL,IAAI,EAAE;QAChCX,OAAO,CAACY,OAAO,CAACW,GAAG,CAACf,IAAI,CAACD,EAAE,EAAE;UAC3BC,IAAI;UACJW,KAAK;UACLH,aAAa;UACbC,WAAW,EAAEN,IAAI,CAACO,GAAG,EAAE,GAAGC,KAAK;UAC/BE,OAAO,EAAE,IAAI,CAACC,OAAO,CAACtB,OAAO,EAAEQ,IAAI;QACrC,CAAC,CAAC;;QAEF;AACR;AACA;AACA;AACA;AACA;QACQ,IAAI,CAACJ,MAAM,CAACC,IAAI,CAACV,MAAM,CAAC6B,YAAY,EAAExB,OAAO,EAAEQ,IAAI,CAAC;MACtD;IACF;EACF;EAEAc,OAAO,CAACtB,OAAO,EAAEQ,IAAI,EAAE;IACrB,OAAOR,OAAO,CAACI,MAAM,CAACqB,UAAU,CAAC,MAAM;MACrCzB,OAAO,CAACY,OAAO,CAACc,MAAM,CAAClB,IAAI,CAACD,EAAE,CAAC;IACjC,CAAC,EAAE,KAAK,CAAC;EACX;AACF;AAEAoB,MAAM,CAACC,OAAO,GAAG/B,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}