{"ast":null,"code":"'use strict';\n\nconst {\n  TypeError\n} = require('../errors');\nconst Collection = require('../util/Collection');\n\n/**\n * Manages API methods for roles belonging to emojis and stores their cache.\n */\nclass GuildEmojiRoleManager {\n  constructor(emoji) {\n    /**\n     * The emoji belonging to this manager\n     * @type {GuildEmoji}\n     */\n    this.emoji = emoji;\n    /**\n     * The guild belonging to this manager\n     * @type {Guild}\n     */\n    this.guild = emoji.guild;\n    /**\n     * The client belonging to this manager\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', {\n      value: emoji.client\n    });\n  }\n\n  /**\n   * The filtered collection of roles of the guild emoji\n   * @type {Collection<Snowflake, Role>}\n   * @private\n   * @readonly\n   */\n  get _roles() {\n    return this.guild.roles.cache.filter(role => this.emoji._roles.includes(role.id));\n  }\n\n  /**\n   * The cache of roles belonging to this emoji\n   * @type {Collection<Snowflake, Role>}\n   * @readonly\n   */\n  get cache() {\n    return this._roles;\n  }\n\n  /**\n   * Adds a role (or multiple roles) to the list of roles that can use this emoji.\n   * @param {RoleResolvable|RoleResolvable[]|Collection<Snowflake, Role>} roleOrRoles The role or roles to add\n   * @returns {Promise<GuildEmoji>}\n   */\n  add(roleOrRoles) {\n    if (roleOrRoles instanceof Collection) return this.add(roleOrRoles.keyArray());\n    if (!Array.isArray(roleOrRoles)) return this.add([roleOrRoles]);\n    roleOrRoles = roleOrRoles.map(r => this.guild.roles.resolve(r));\n    if (roleOrRoles.includes(null)) {\n      return Promise.reject(new TypeError('INVALID_TYPE', 'roles', 'Array or Collection of Roles or Snowflakes', true));\n    }\n    const newRoles = [...new Set(roleOrRoles.concat(...this._roles.values()))];\n    return this.set(newRoles);\n  }\n\n  /**\n   * Removes a role (or multiple roles) from the list of roles that can use this emoji.\n   * @param {RoleResolvable|RoleResolvable[]|Collection<Snowflake, Role>} roleOrRoles The role or roles to remove\n   * @returns {Promise<GuildEmoji>}\n   */\n  remove(roleOrRoles) {\n    if (roleOrRoles instanceof Collection) return this.remove(roleOrRoles.keyArray());\n    if (!Array.isArray(roleOrRoles)) return this.remove([roleOrRoles]);\n    roleOrRoles = roleOrRoles.map(r => this.guild.roles.resolveID(r));\n    if (roleOrRoles.includes(null)) {\n      return Promise.reject(new TypeError('INVALID_TYPE', 'roles', 'Array or Collection of Roles or Snowflakes', true));\n    }\n    const newRoles = this._roles.keyArray().filter(role => !roleOrRoles.includes(role));\n    return this.set(newRoles);\n  }\n\n  /**\n   * Sets the role(s) that can use this emoji.\n   * @param {Collection<Snowflake, Role>|RoleResolvable[]} roles The roles or role IDs to apply\n   * @returns {Promise<GuildEmoji>}\n   * @example\n   * // Set the emoji's roles to a single role\n   * guildEmoji.roles.set(['391156570408615936'])\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Remove all roles from an emoji\n   * guildEmoji.roles.set([])\n   *    .then(console.log)\n   *    .catch(console.error);\n   */\n  set(roles) {\n    return this.emoji.edit({\n      roles\n    });\n  }\n  clone() {\n    const clone = new this.constructor(this.emoji);\n    clone._patch(this._roles.keyArray().slice());\n    return clone;\n  }\n\n  /**\n   * Patches the roles for this manager's cache\n   * @param {Snowflake[]} roles The new roles\n   * @private\n   */\n  _patch(roles) {\n    this.emoji._roles = roles;\n  }\n}\nmodule.exports = GuildEmojiRoleManager;","map":{"version":3,"names":["TypeError","require","Collection","GuildEmojiRoleManager","constructor","emoji","guild","Object","defineProperty","value","client","_roles","roles","cache","filter","role","includes","id","add","roleOrRoles","keyArray","Array","isArray","map","r","resolve","Promise","reject","newRoles","Set","concat","values","set","remove","resolveID","edit","clone","_patch","slice","module","exports"],"sources":["/Users/jessegill/node_modules/discord.js/src/managers/GuildEmojiRoleManager.js"],"sourcesContent":["'use strict';\n\nconst { TypeError } = require('../errors');\nconst Collection = require('../util/Collection');\n\n/**\n * Manages API methods for roles belonging to emojis and stores their cache.\n */\nclass GuildEmojiRoleManager {\n  constructor(emoji) {\n    /**\n     * The emoji belonging to this manager\n     * @type {GuildEmoji}\n     */\n    this.emoji = emoji;\n    /**\n     * The guild belonging to this manager\n     * @type {Guild}\n     */\n    this.guild = emoji.guild;\n    /**\n     * The client belonging to this manager\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: emoji.client });\n  }\n\n  /**\n   * The filtered collection of roles of the guild emoji\n   * @type {Collection<Snowflake, Role>}\n   * @private\n   * @readonly\n   */\n  get _roles() {\n    return this.guild.roles.cache.filter(role => this.emoji._roles.includes(role.id));\n  }\n\n  /**\n   * The cache of roles belonging to this emoji\n   * @type {Collection<Snowflake, Role>}\n   * @readonly\n   */\n  get cache() {\n    return this._roles;\n  }\n\n  /**\n   * Adds a role (or multiple roles) to the list of roles that can use this emoji.\n   * @param {RoleResolvable|RoleResolvable[]|Collection<Snowflake, Role>} roleOrRoles The role or roles to add\n   * @returns {Promise<GuildEmoji>}\n   */\n  add(roleOrRoles) {\n    if (roleOrRoles instanceof Collection) return this.add(roleOrRoles.keyArray());\n    if (!Array.isArray(roleOrRoles)) return this.add([roleOrRoles]);\n    roleOrRoles = roleOrRoles.map(r => this.guild.roles.resolve(r));\n\n    if (roleOrRoles.includes(null)) {\n      return Promise.reject(new TypeError('INVALID_TYPE', 'roles', 'Array or Collection of Roles or Snowflakes', true));\n    }\n\n    const newRoles = [...new Set(roleOrRoles.concat(...this._roles.values()))];\n    return this.set(newRoles);\n  }\n\n  /**\n   * Removes a role (or multiple roles) from the list of roles that can use this emoji.\n   * @param {RoleResolvable|RoleResolvable[]|Collection<Snowflake, Role>} roleOrRoles The role or roles to remove\n   * @returns {Promise<GuildEmoji>}\n   */\n  remove(roleOrRoles) {\n    if (roleOrRoles instanceof Collection) return this.remove(roleOrRoles.keyArray());\n    if (!Array.isArray(roleOrRoles)) return this.remove([roleOrRoles]);\n    roleOrRoles = roleOrRoles.map(r => this.guild.roles.resolveID(r));\n\n    if (roleOrRoles.includes(null)) {\n      return Promise.reject(new TypeError('INVALID_TYPE', 'roles', 'Array or Collection of Roles or Snowflakes', true));\n    }\n\n    const newRoles = this._roles.keyArray().filter(role => !roleOrRoles.includes(role));\n    return this.set(newRoles);\n  }\n\n  /**\n   * Sets the role(s) that can use this emoji.\n   * @param {Collection<Snowflake, Role>|RoleResolvable[]} roles The roles or role IDs to apply\n   * @returns {Promise<GuildEmoji>}\n   * @example\n   * // Set the emoji's roles to a single role\n   * guildEmoji.roles.set(['391156570408615936'])\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Remove all roles from an emoji\n   * guildEmoji.roles.set([])\n   *    .then(console.log)\n   *    .catch(console.error);\n   */\n  set(roles) {\n    return this.emoji.edit({ roles });\n  }\n\n  clone() {\n    const clone = new this.constructor(this.emoji);\n    clone._patch(this._roles.keyArray().slice());\n    return clone;\n  }\n\n  /**\n   * Patches the roles for this manager's cache\n   * @param {Snowflake[]} roles The new roles\n   * @private\n   */\n  _patch(roles) {\n    this.emoji._roles = roles;\n  }\n}\n\nmodule.exports = GuildEmojiRoleManager;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}