{"ast":null,"code":"'use strict';\n\nconst Collector = require('./interfaces/Collector');\nconst Collection = require('../util/Collection');\nconst {\n  Events\n} = require('../util/Constants');\n\n/**\n * @typedef {CollectorOptions} ReactionCollectorOptions\n * @property {number} max The maximum total amount of reactions to collect\n * @property {number} maxEmojis The maximum number of emojis to collect\n * @property {number} maxUsers The maximum number of users to react\n */\n\n/**\n * Collects reactions on messages.\n * Will automatically stop if the message (`'messageDelete'`),\n * channel (`'channelDelete'`), or guild (`'guildDelete'`) are deleted.\n * @extends {Collector}\n */\nclass ReactionCollector extends Collector {\n  /**\n   * @param {Message} message The message upon which to collect reactions\n   * @param {CollectorFilter} filter The filter to apply to this collector\n   * @param {ReactionCollectorOptions} [options={}] The options to apply to this collector\n   */\n  constructor(message, filter) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super(message.client, filter, options);\n\n    /**\n     * The message upon which to collect reactions\n     * @type {Message}\n     */\n    this.message = message;\n\n    /**\n     * The users which have reacted to this message\n     * @type {Collection}\n     */\n    this.users = new Collection();\n\n    /**\n     * The total number of reactions collected\n     * @type {number}\n     */\n    this.total = 0;\n    this.empty = this.empty.bind(this);\n    this._handleChannelDeletion = this._handleChannelDeletion.bind(this);\n    this._handleGuildDeletion = this._handleGuildDeletion.bind(this);\n    this._handleMessageDeletion = this._handleMessageDeletion.bind(this);\n    this.client.incrementMaxListeners();\n    this.client.on(Events.MESSAGE_REACTION_ADD, this.handleCollect);\n    this.client.on(Events.MESSAGE_REACTION_REMOVE, this.handleDispose);\n    this.client.on(Events.MESSAGE_REACTION_REMOVE_ALL, this.empty);\n    this.client.on(Events.MESSAGE_DELETE, this._handleMessageDeletion);\n    this.client.on(Events.CHANNEL_DELETE, this._handleChannelDeletion);\n    this.client.on(Events.GUILD_DELETE, this._handleGuildDeletion);\n    this.once('end', () => {\n      this.client.removeListener(Events.MESSAGE_REACTION_ADD, this.handleCollect);\n      this.client.removeListener(Events.MESSAGE_REACTION_REMOVE, this.handleDispose);\n      this.client.removeListener(Events.MESSAGE_REACTION_REMOVE_ALL, this.empty);\n      this.client.removeListener(Events.MESSAGE_DELETE, this._handleMessageDeletion);\n      this.client.removeListener(Events.CHANNEL_DELETE, this._handleChannelDeletion);\n      this.client.removeListener(Events.GUILD_DELETE, this._handleGuildDeletion);\n      this.client.decrementMaxListeners();\n    });\n    this.on('collect', (reaction, user) => {\n      this.total++;\n      this.users.set(user.id, user);\n    });\n    this.on('remove', (reaction, user) => {\n      this.total--;\n      if (!this.collected.some(r => r.users.cache.has(user.id))) this.users.delete(user.id);\n    });\n  }\n\n  /**\n   * Handles an incoming reaction for possible collection.\n   * @param {MessageReaction} reaction The reaction to possibly collect\n   * @returns {?Snowflake|string}\n   * @private\n   */\n  collect(reaction) {\n    /**\n     * Emitted whenever a reaction is collected.\n     * @event ReactionCollector#collect\n     * @param {MessageReaction} reaction The reaction that was collected\n     * @param {User} user The user that added the reaction\n     */\n    if (reaction.message.id !== this.message.id) return null;\n    return ReactionCollector.key(reaction);\n  }\n\n  /**\n   * Handles a reaction deletion for possible disposal.\n   * @param {MessageReaction} reaction The reaction to possibly dispose of\n   * @param {User} user The user that removed the reaction\n   * @returns {?Snowflake|string}\n   */\n  dispose(reaction, user) {\n    /**\n     * Emitted when the reaction had all the users removed and the `dispose` option is set to true.\n     * @event ReactionCollector#dispose\n     * @param {MessageReaction} reaction The reaction that was disposed of\n     * @param {User} user The user that removed the reaction\n     */\n    if (reaction.message.id !== this.message.id) return null;\n\n    /**\n     * Emitted when the reaction had one user removed and the `dispose` option is set to true.\n     * @event ReactionCollector#remove\n     * @param {MessageReaction} reaction The reaction that was removed\n     * @param {User} user The user that removed the reaction\n     */\n    if (this.collected.has(ReactionCollector.key(reaction)) && this.users.has(user.id)) {\n      this.emit('remove', reaction, user);\n    }\n    return reaction.count ? null : ReactionCollector.key(reaction);\n  }\n\n  /**\n   * Empties this reaction collector.\n   */\n  empty() {\n    this.total = 0;\n    this.collected.clear();\n    this.users.clear();\n    this.checkEnd();\n  }\n  endReason() {\n    if (this.options.max && this.total >= this.options.max) return 'limit';\n    if (this.options.maxEmojis && this.collected.size >= this.options.maxEmojis) return 'emojiLimit';\n    if (this.options.maxUsers && this.users.size >= this.options.maxUsers) return 'userLimit';\n    return null;\n  }\n\n  /**\n   * Handles checking if the message has been deleted, and if so, stops the collector with the reason 'messageDelete'.\n   * @private\n   * @param {Message} message The message that was deleted\n   * @returns {void}\n   */\n  _handleMessageDeletion(message) {\n    if (message.id === this.message.id) {\n      this.stop('messageDelete');\n    }\n  }\n\n  /**\n   * Handles checking if the channel has been deleted, and if so, stops the collector with the reason 'channelDelete'.\n   * @private\n   * @param {GuildChannel} channel The channel that was deleted\n   * @returns {void}\n   */\n  _handleChannelDeletion(channel) {\n    if (channel.id === this.message.channel.id) {\n      this.stop('channelDelete');\n    }\n  }\n\n  /**\n   * Handles checking if the guild has been deleted, and if so, stops the collector with the reason 'guildDelete'.\n   * @private\n   * @param {Guild} guild The guild that was deleted\n   * @returns {void}\n   */\n  _handleGuildDeletion(guild) {\n    if (this.message.guild && guild.id === this.message.guild.id) {\n      this.stop('guildDelete');\n    }\n  }\n\n  /**\n   * Gets the collector key for a reaction.\n   * @param {MessageReaction} reaction The message reaction to get the key for\n   * @returns {Snowflake|string}\n   */\n  static key(reaction) {\n    return reaction.emoji.id || reaction.emoji.name;\n  }\n}\nmodule.exports = ReactionCollector;","map":{"version":3,"names":["Collector","require","Collection","Events","ReactionCollector","constructor","message","filter","options","client","users","total","empty","bind","_handleChannelDeletion","_handleGuildDeletion","_handleMessageDeletion","incrementMaxListeners","on","MESSAGE_REACTION_ADD","handleCollect","MESSAGE_REACTION_REMOVE","handleDispose","MESSAGE_REACTION_REMOVE_ALL","MESSAGE_DELETE","CHANNEL_DELETE","GUILD_DELETE","once","removeListener","decrementMaxListeners","reaction","user","set","id","collected","some","r","cache","has","delete","collect","key","dispose","emit","count","clear","checkEnd","endReason","max","maxEmojis","size","maxUsers","stop","channel","guild","emoji","name","module","exports"],"sources":["/Users/jessegill/node_modules/discord.js/src/structures/ReactionCollector.js"],"sourcesContent":["'use strict';\n\nconst Collector = require('./interfaces/Collector');\nconst Collection = require('../util/Collection');\nconst { Events } = require('../util/Constants');\n\n/**\n * @typedef {CollectorOptions} ReactionCollectorOptions\n * @property {number} max The maximum total amount of reactions to collect\n * @property {number} maxEmojis The maximum number of emojis to collect\n * @property {number} maxUsers The maximum number of users to react\n */\n\n/**\n * Collects reactions on messages.\n * Will automatically stop if the message (`'messageDelete'`),\n * channel (`'channelDelete'`), or guild (`'guildDelete'`) are deleted.\n * @extends {Collector}\n */\nclass ReactionCollector extends Collector {\n  /**\n   * @param {Message} message The message upon which to collect reactions\n   * @param {CollectorFilter} filter The filter to apply to this collector\n   * @param {ReactionCollectorOptions} [options={}] The options to apply to this collector\n   */\n  constructor(message, filter, options = {}) {\n    super(message.client, filter, options);\n\n    /**\n     * The message upon which to collect reactions\n     * @type {Message}\n     */\n    this.message = message;\n\n    /**\n     * The users which have reacted to this message\n     * @type {Collection}\n     */\n    this.users = new Collection();\n\n    /**\n     * The total number of reactions collected\n     * @type {number}\n     */\n    this.total = 0;\n\n    this.empty = this.empty.bind(this);\n    this._handleChannelDeletion = this._handleChannelDeletion.bind(this);\n    this._handleGuildDeletion = this._handleGuildDeletion.bind(this);\n    this._handleMessageDeletion = this._handleMessageDeletion.bind(this);\n\n    this.client.incrementMaxListeners();\n    this.client.on(Events.MESSAGE_REACTION_ADD, this.handleCollect);\n    this.client.on(Events.MESSAGE_REACTION_REMOVE, this.handleDispose);\n    this.client.on(Events.MESSAGE_REACTION_REMOVE_ALL, this.empty);\n    this.client.on(Events.MESSAGE_DELETE, this._handleMessageDeletion);\n    this.client.on(Events.CHANNEL_DELETE, this._handleChannelDeletion);\n    this.client.on(Events.GUILD_DELETE, this._handleGuildDeletion);\n\n    this.once('end', () => {\n      this.client.removeListener(Events.MESSAGE_REACTION_ADD, this.handleCollect);\n      this.client.removeListener(Events.MESSAGE_REACTION_REMOVE, this.handleDispose);\n      this.client.removeListener(Events.MESSAGE_REACTION_REMOVE_ALL, this.empty);\n      this.client.removeListener(Events.MESSAGE_DELETE, this._handleMessageDeletion);\n      this.client.removeListener(Events.CHANNEL_DELETE, this._handleChannelDeletion);\n      this.client.removeListener(Events.GUILD_DELETE, this._handleGuildDeletion);\n      this.client.decrementMaxListeners();\n    });\n\n    this.on('collect', (reaction, user) => {\n      this.total++;\n      this.users.set(user.id, user);\n    });\n\n    this.on('remove', (reaction, user) => {\n      this.total--;\n      if (!this.collected.some(r => r.users.cache.has(user.id))) this.users.delete(user.id);\n    });\n  }\n\n  /**\n   * Handles an incoming reaction for possible collection.\n   * @param {MessageReaction} reaction The reaction to possibly collect\n   * @returns {?Snowflake|string}\n   * @private\n   */\n  collect(reaction) {\n    /**\n     * Emitted whenever a reaction is collected.\n     * @event ReactionCollector#collect\n     * @param {MessageReaction} reaction The reaction that was collected\n     * @param {User} user The user that added the reaction\n     */\n    if (reaction.message.id !== this.message.id) return null;\n    return ReactionCollector.key(reaction);\n  }\n\n  /**\n   * Handles a reaction deletion for possible disposal.\n   * @param {MessageReaction} reaction The reaction to possibly dispose of\n   * @param {User} user The user that removed the reaction\n   * @returns {?Snowflake|string}\n   */\n  dispose(reaction, user) {\n    /**\n     * Emitted when the reaction had all the users removed and the `dispose` option is set to true.\n     * @event ReactionCollector#dispose\n     * @param {MessageReaction} reaction The reaction that was disposed of\n     * @param {User} user The user that removed the reaction\n     */\n    if (reaction.message.id !== this.message.id) return null;\n\n    /**\n     * Emitted when the reaction had one user removed and the `dispose` option is set to true.\n     * @event ReactionCollector#remove\n     * @param {MessageReaction} reaction The reaction that was removed\n     * @param {User} user The user that removed the reaction\n     */\n    if (this.collected.has(ReactionCollector.key(reaction)) && this.users.has(user.id)) {\n      this.emit('remove', reaction, user);\n    }\n    return reaction.count ? null : ReactionCollector.key(reaction);\n  }\n\n  /**\n   * Empties this reaction collector.\n   */\n  empty() {\n    this.total = 0;\n    this.collected.clear();\n    this.users.clear();\n    this.checkEnd();\n  }\n\n  endReason() {\n    if (this.options.max && this.total >= this.options.max) return 'limit';\n    if (this.options.maxEmojis && this.collected.size >= this.options.maxEmojis) return 'emojiLimit';\n    if (this.options.maxUsers && this.users.size >= this.options.maxUsers) return 'userLimit';\n    return null;\n  }\n\n  /**\n   * Handles checking if the message has been deleted, and if so, stops the collector with the reason 'messageDelete'.\n   * @private\n   * @param {Message} message The message that was deleted\n   * @returns {void}\n   */\n  _handleMessageDeletion(message) {\n    if (message.id === this.message.id) {\n      this.stop('messageDelete');\n    }\n  }\n\n  /**\n   * Handles checking if the channel has been deleted, and if so, stops the collector with the reason 'channelDelete'.\n   * @private\n   * @param {GuildChannel} channel The channel that was deleted\n   * @returns {void}\n   */\n  _handleChannelDeletion(channel) {\n    if (channel.id === this.message.channel.id) {\n      this.stop('channelDelete');\n    }\n  }\n\n  /**\n   * Handles checking if the guild has been deleted, and if so, stops the collector with the reason 'guildDelete'.\n   * @private\n   * @param {Guild} guild The guild that was deleted\n   * @returns {void}\n   */\n  _handleGuildDeletion(guild) {\n    if (this.message.guild && guild.id === this.message.guild.id) {\n      this.stop('guildDelete');\n    }\n  }\n\n  /**\n   * Gets the collector key for a reaction.\n   * @param {MessageReaction} reaction The message reaction to get the key for\n   * @returns {Snowflake|string}\n   */\n  static key(reaction) {\n    return reaction.emoji.id || reaction.emoji.name;\n  }\n}\n\nmodule.exports = ReactionCollector;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}