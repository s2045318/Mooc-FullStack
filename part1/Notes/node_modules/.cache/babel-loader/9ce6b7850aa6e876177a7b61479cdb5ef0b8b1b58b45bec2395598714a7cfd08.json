{"ast":null,"code":"'use strict';\n\nconst Util = require('../util/Util');\n\n// Discord epoch (2015-01-01T00:00:00.000Z)\nconst EPOCH = 1420070400000;\nlet INCREMENT = 0;\n\n/**\n * A container for useful snowflake-related methods.\n */\nclass SnowflakeUtil {\n  constructor() {\n    throw new Error(`The ${this.constructor.name} class may not be instantiated.`);\n  }\n\n  /**\n   * A Twitter snowflake, except the epoch is 2015-01-01T00:00:00.000Z\n   * ```\n   * If we have a snowflake '266241948824764416' we can represent it as binary:\n   *\n   * 64                                          22     17     12          0\n   *  000000111011000111100001101001000101000000  00001  00000  000000000000\n   *       number of ms since Discord epoch       worker  pid    increment\n   * ```\n   * @typedef {string} Snowflake\n   */\n\n  /**\n   * Generates a Discord snowflake.\n   * <info>This hardcodes the worker ID as 1 and the process ID as 0.</info>\n   * @param {number|Date} [timestamp=Date.now()] Timestamp or date of the snowflake to generate\n   * @returns {Snowflake} The generated snowflake\n   */\n  static generate() {\n    let timestamp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n    if (timestamp instanceof Date) timestamp = timestamp.getTime();\n    if (typeof timestamp !== 'number' || isNaN(timestamp)) {\n      throw new TypeError(`\"timestamp\" argument must be a number (received ${isNaN(timestamp) ? 'NaN' : typeof timestamp})`);\n    }\n    if (INCREMENT >= 4095) INCREMENT = 0;\n    const BINARY = `${(timestamp - EPOCH).toString(2).padStart(42, '0')}0000100000${(INCREMENT++).toString(2).padStart(12, '0')}`;\n    return Util.binaryToID(BINARY);\n  }\n\n  /**\n   * A deconstructed snowflake.\n   * @typedef {Object} DeconstructedSnowflake\n   * @property {number} timestamp Timestamp the snowflake was created\n   * @property {Date} date Date the snowflake was created\n   * @property {number} workerID Worker ID in the snowflake\n   * @property {number} processID Process ID in the snowflake\n   * @property {number} increment Increment in the snowflake\n   * @property {string} binary Binary representation of the snowflake\n   */\n\n  /**\n   * Deconstructs a Discord snowflake.\n   * @param {Snowflake} snowflake Snowflake to deconstruct\n   * @returns {DeconstructedSnowflake} Deconstructed snowflake\n   */\n  static deconstruct(snowflake) {\n    const BINARY = Util.idToBinary(snowflake).toString(2).padStart(64, '0');\n    const res = {\n      timestamp: parseInt(BINARY.substring(0, 42), 2) + EPOCH,\n      workerID: parseInt(BINARY.substring(42, 47), 2),\n      processID: parseInt(BINARY.substring(47, 52), 2),\n      increment: parseInt(BINARY.substring(52, 64), 2),\n      binary: BINARY\n    };\n    Object.defineProperty(res, 'date', {\n      get: function get() {\n        return new Date(this.timestamp);\n      },\n      enumerable: true\n    });\n    return res;\n  }\n\n  /**\n   * Discord's epoch value (2015-01-01T00:00:00.000Z).\n   * @type {number}\n   * @readonly\n   */\n  static get EPOCH() {\n    return EPOCH;\n  }\n}\nmodule.exports = SnowflakeUtil;","map":{"version":3,"names":["Util","require","EPOCH","INCREMENT","SnowflakeUtil","constructor","Error","name","generate","timestamp","Date","now","getTime","isNaN","TypeError","BINARY","toString","padStart","binaryToID","deconstruct","snowflake","idToBinary","res","parseInt","substring","workerID","processID","increment","binary","Object","defineProperty","get","enumerable","module","exports"],"sources":["/Users/jessegill/node_modules/discord.js/src/util/Snowflake.js"],"sourcesContent":["'use strict';\n\nconst Util = require('../util/Util');\n\n// Discord epoch (2015-01-01T00:00:00.000Z)\nconst EPOCH = 1420070400000;\nlet INCREMENT = 0;\n\n/**\n * A container for useful snowflake-related methods.\n */\nclass SnowflakeUtil {\n  constructor() {\n    throw new Error(`The ${this.constructor.name} class may not be instantiated.`);\n  }\n\n  /**\n   * A Twitter snowflake, except the epoch is 2015-01-01T00:00:00.000Z\n   * ```\n   * If we have a snowflake '266241948824764416' we can represent it as binary:\n   *\n   * 64                                          22     17     12          0\n   *  000000111011000111100001101001000101000000  00001  00000  000000000000\n   *       number of ms since Discord epoch       worker  pid    increment\n   * ```\n   * @typedef {string} Snowflake\n   */\n\n  /**\n   * Generates a Discord snowflake.\n   * <info>This hardcodes the worker ID as 1 and the process ID as 0.</info>\n   * @param {number|Date} [timestamp=Date.now()] Timestamp or date of the snowflake to generate\n   * @returns {Snowflake} The generated snowflake\n   */\n  static generate(timestamp = Date.now()) {\n    if (timestamp instanceof Date) timestamp = timestamp.getTime();\n    if (typeof timestamp !== 'number' || isNaN(timestamp)) {\n      throw new TypeError(\n        `\"timestamp\" argument must be a number (received ${isNaN(timestamp) ? 'NaN' : typeof timestamp})`,\n      );\n    }\n    if (INCREMENT >= 4095) INCREMENT = 0;\n    const BINARY = `${(timestamp - EPOCH).toString(2).padStart(42, '0')}0000100000${(INCREMENT++)\n      .toString(2)\n      .padStart(12, '0')}`;\n    return Util.binaryToID(BINARY);\n  }\n\n  /**\n   * A deconstructed snowflake.\n   * @typedef {Object} DeconstructedSnowflake\n   * @property {number} timestamp Timestamp the snowflake was created\n   * @property {Date} date Date the snowflake was created\n   * @property {number} workerID Worker ID in the snowflake\n   * @property {number} processID Process ID in the snowflake\n   * @property {number} increment Increment in the snowflake\n   * @property {string} binary Binary representation of the snowflake\n   */\n\n  /**\n   * Deconstructs a Discord snowflake.\n   * @param {Snowflake} snowflake Snowflake to deconstruct\n   * @returns {DeconstructedSnowflake} Deconstructed snowflake\n   */\n  static deconstruct(snowflake) {\n    const BINARY = Util.idToBinary(snowflake).toString(2).padStart(64, '0');\n    const res = {\n      timestamp: parseInt(BINARY.substring(0, 42), 2) + EPOCH,\n      workerID: parseInt(BINARY.substring(42, 47), 2),\n      processID: parseInt(BINARY.substring(47, 52), 2),\n      increment: parseInt(BINARY.substring(52, 64), 2),\n      binary: BINARY,\n    };\n    Object.defineProperty(res, 'date', {\n      get: function get() {\n        return new Date(this.timestamp);\n      },\n      enumerable: true,\n    });\n    return res;\n  }\n\n  /**\n   * Discord's epoch value (2015-01-01T00:00:00.000Z).\n   * @type {number}\n   * @readonly\n   */\n  static get EPOCH() {\n    return EPOCH;\n  }\n}\n\nmodule.exports = SnowflakeUtil;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,IAAI,GAAGC,OAAO,CAAC,cAAc,CAAC;;AAEpC;AACA,MAAMC,KAAK,GAAG,aAAa;AAC3B,IAAIC,SAAS,GAAG,CAAC;;AAEjB;AACA;AACA;AACA,MAAMC,aAAa,CAAC;EAClBC,WAAW,GAAG;IACZ,MAAM,IAAIC,KAAK,CAAE,OAAM,IAAI,CAACD,WAAW,CAACE,IAAK,iCAAgC,CAAC;EAChF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;EACE,OAAOC,QAAQ,GAAyB;IAAA,IAAxBC,SAAS,uEAAGC,IAAI,CAACC,GAAG,EAAE;IACpC,IAAIF,SAAS,YAAYC,IAAI,EAAED,SAAS,GAAGA,SAAS,CAACG,OAAO,EAAE;IAC9D,IAAI,OAAOH,SAAS,KAAK,QAAQ,IAAII,KAAK,CAACJ,SAAS,CAAC,EAAE;MACrD,MAAM,IAAIK,SAAS,CAChB,mDAAkDD,KAAK,CAACJ,SAAS,CAAC,GAAG,KAAK,GAAG,OAAOA,SAAU,GAAE,CAClG;IACH;IACA,IAAIN,SAAS,IAAI,IAAI,EAAEA,SAAS,GAAG,CAAC;IACpC,MAAMY,MAAM,GAAI,GAAE,CAACN,SAAS,GAAGP,KAAK,EAAEc,QAAQ,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAE,aAAY,CAACd,SAAS,EAAE,EACzFa,QAAQ,CAAC,CAAC,CAAC,CACXC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAE,EAAC;IACtB,OAAOjB,IAAI,CAACkB,UAAU,CAACH,MAAM,CAAC;EAChC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;EACE,OAAOI,WAAW,CAACC,SAAS,EAAE;IAC5B,MAAML,MAAM,GAAGf,IAAI,CAACqB,UAAU,CAACD,SAAS,CAAC,CAACJ,QAAQ,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC;IACvE,MAAMK,GAAG,GAAG;MACVb,SAAS,EAAEc,QAAQ,CAACR,MAAM,CAACS,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,GAAGtB,KAAK;MACvDuB,QAAQ,EAAEF,QAAQ,CAACR,MAAM,CAACS,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;MAC/CE,SAAS,EAAEH,QAAQ,CAACR,MAAM,CAACS,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;MAChDG,SAAS,EAAEJ,QAAQ,CAACR,MAAM,CAACS,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;MAChDI,MAAM,EAAEb;IACV,CAAC;IACDc,MAAM,CAACC,cAAc,CAACR,GAAG,EAAE,MAAM,EAAE;MACjCS,GAAG,EAAE,SAASA,GAAG,GAAG;QAClB,OAAO,IAAIrB,IAAI,CAAC,IAAI,CAACD,SAAS,CAAC;MACjC,CAAC;MACDuB,UAAU,EAAE;IACd,CAAC,CAAC;IACF,OAAOV,GAAG;EACZ;;EAEA;AACF;AACA;AACA;AACA;EACE,WAAWpB,KAAK,GAAG;IACjB,OAAOA,KAAK;EACd;AACF;AAEA+B,MAAM,CAACC,OAAO,GAAG9B,aAAa"},"metadata":{},"sourceType":"script","externalDependencies":[]}