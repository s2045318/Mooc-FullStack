{"ast":null,"code":"'use strict';\n\nconst BaseManager = require('./BaseManager');\nconst MessageReaction = require('../structures/MessageReaction');\n\n/**\n * Manages API methods for reactions and holds their cache.\n * @extends {BaseManager}\n */\nclass ReactionManager extends BaseManager {\n  constructor(message, iterable) {\n    super(message.client, iterable, MessageReaction);\n\n    /**\n     * The message that this manager belongs to\n     * @type {Message}\n     */\n    this.message = message;\n  }\n  add(data, cache) {\n    return super.add(data, cache, {\n      id: data.emoji.id || data.emoji.name,\n      extras: [this.message]\n    });\n  }\n\n  /**\n   * The reaction cache of this manager\n   * @type {Collection<string|Snowflake, MessageReaction>}\n   * @name ReactionManager#cache\n   */\n\n  /**\n   * Data that can be resolved to a MessageReaction object. This can be:\n   * * A MessageReaction\n   * * A Snowflake\n   * @typedef {MessageReaction|Snowflake} MessageReactionResolvable\n   */\n\n  /**\n   * Resolves a MessageReactionResolvable to a MessageReaction object.\n   * @method resolve\n   * @memberof ReactionManager\n   * @instance\n   * @param {MessageReactionResolvable} reaction The MessageReaction to resolve\n   * @returns {?MessageReaction}\n   */\n\n  /**\n   * Resolves a MessageReactionResolvable to a MessageReaction ID string.\n   * @method resolveID\n   * @memberof ReactionManager\n   * @instance\n   * @param {MessageReactionResolvable} reaction The MessageReaction to resolve\n   * @returns {?Snowflake}\n   */\n\n  /**\n   * Removes all reactions from a message.\n   * @returns {Promise<Message>}\n   */\n  removeAll() {\n    return this.client.api.channels(this.message.channel.id).messages(this.message.id).reactions.delete().then(() => this.message);\n  }\n}\nmodule.exports = ReactionManager;","map":{"version":3,"names":["BaseManager","require","MessageReaction","ReactionManager","constructor","message","iterable","client","add","data","cache","id","emoji","name","extras","removeAll","api","channels","channel","messages","reactions","delete","then","module","exports"],"sources":["/Users/jessegill/node_modules/discord.js/src/managers/ReactionManager.js"],"sourcesContent":["'use strict';\n\nconst BaseManager = require('./BaseManager');\nconst MessageReaction = require('../structures/MessageReaction');\n\n/**\n * Manages API methods for reactions and holds their cache.\n * @extends {BaseManager}\n */\nclass ReactionManager extends BaseManager {\n  constructor(message, iterable) {\n    super(message.client, iterable, MessageReaction);\n\n    /**\n     * The message that this manager belongs to\n     * @type {Message}\n     */\n    this.message = message;\n  }\n\n  add(data, cache) {\n    return super.add(data, cache, { id: data.emoji.id || data.emoji.name, extras: [this.message] });\n  }\n\n  /**\n   * The reaction cache of this manager\n   * @type {Collection<string|Snowflake, MessageReaction>}\n   * @name ReactionManager#cache\n   */\n\n  /**\n   * Data that can be resolved to a MessageReaction object. This can be:\n   * * A MessageReaction\n   * * A Snowflake\n   * @typedef {MessageReaction|Snowflake} MessageReactionResolvable\n   */\n\n  /**\n   * Resolves a MessageReactionResolvable to a MessageReaction object.\n   * @method resolve\n   * @memberof ReactionManager\n   * @instance\n   * @param {MessageReactionResolvable} reaction The MessageReaction to resolve\n   * @returns {?MessageReaction}\n   */\n\n  /**\n   * Resolves a MessageReactionResolvable to a MessageReaction ID string.\n   * @method resolveID\n   * @memberof ReactionManager\n   * @instance\n   * @param {MessageReactionResolvable} reaction The MessageReaction to resolve\n   * @returns {?Snowflake}\n   */\n\n  /**\n   * Removes all reactions from a message.\n   * @returns {Promise<Message>}\n   */\n  removeAll() {\n    return this.client.api\n      .channels(this.message.channel.id)\n      .messages(this.message.id)\n      .reactions.delete()\n      .then(() => this.message);\n  }\n}\n\nmodule.exports = ReactionManager;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,WAAW,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC5C,MAAMC,eAAe,GAAGD,OAAO,CAAC,+BAA+B,CAAC;;AAEhE;AACA;AACA;AACA;AACA,MAAME,eAAe,SAASH,WAAW,CAAC;EACxCI,WAAW,CAACC,OAAO,EAAEC,QAAQ,EAAE;IAC7B,KAAK,CAACD,OAAO,CAACE,MAAM,EAAED,QAAQ,EAAEJ,eAAe,CAAC;;IAEhD;AACJ;AACA;AACA;IACI,IAAI,CAACG,OAAO,GAAGA,OAAO;EACxB;EAEAG,GAAG,CAACC,IAAI,EAAEC,KAAK,EAAE;IACf,OAAO,KAAK,CAACF,GAAG,CAACC,IAAI,EAAEC,KAAK,EAAE;MAAEC,EAAE,EAAEF,IAAI,CAACG,KAAK,CAACD,EAAE,IAAIF,IAAI,CAACG,KAAK,CAACC,IAAI;MAAEC,MAAM,EAAE,CAAC,IAAI,CAACT,OAAO;IAAE,CAAC,CAAC;EACjG;;EAEA;AACF;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;EACEU,SAAS,GAAG;IACV,OAAO,IAAI,CAACR,MAAM,CAACS,GAAG,CACnBC,QAAQ,CAAC,IAAI,CAACZ,OAAO,CAACa,OAAO,CAACP,EAAE,CAAC,CACjCQ,QAAQ,CAAC,IAAI,CAACd,OAAO,CAACM,EAAE,CAAC,CACzBS,SAAS,CAACC,MAAM,EAAE,CAClBC,IAAI,CAAC,MAAM,IAAI,CAACjB,OAAO,CAAC;EAC7B;AACF;AAEAkB,MAAM,CAACC,OAAO,GAAGrB,eAAe"},"metadata":{},"sourceType":"script","externalDependencies":[]}