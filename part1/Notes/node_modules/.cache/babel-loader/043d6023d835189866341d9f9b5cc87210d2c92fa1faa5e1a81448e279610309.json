{"ast":null,"code":"'use strict';\n\nconst Action = require('./Action');\nconst {\n  Events\n} = require('../../util/Constants');\nclass PresenceUpdateAction extends Action {\n  handle(data) {\n    let user = this.client.users.cache.get(data.user.id);\n    if (!user && data.user.username) user = this.client.users.add(data.user);\n    if (!user) return;\n    if (data.user && data.user.username) {\n      if (!user.equals(data.user)) this.client.actions.UserUpdate.handle(data.user);\n    }\n    const guild = this.client.guilds.cache.get(data.guild_id);\n    if (!guild) return;\n    let oldPresence = guild.presences.cache.get(user.id);\n    if (oldPresence) oldPresence = oldPresence._clone();\n    let member = guild.members.cache.get(user.id);\n    if (!member && data.status !== 'offline') {\n      member = guild.members.add({\n        user,\n        roles: data.roles,\n        deaf: false,\n        mute: false\n      });\n      this.client.emit(Events.GUILD_MEMBER_AVAILABLE, member);\n    }\n    guild.presences.add(Object.assign(data, {\n      guild\n    }));\n    if (member && this.client.listenerCount(Events.PRESENCE_UPDATE)) {\n      /**\n       * Emitted whenever a guild member's presence (e.g. status, activity) is changed.\n       * @event Client#presenceUpdate\n       * @param {?Presence} oldPresence The presence before the update, if one at all\n       * @param {Presence} newPresence The presence after the update\n       */\n      this.client.emit(Events.PRESENCE_UPDATE, oldPresence, member.presence);\n    }\n  }\n}\nmodule.exports = PresenceUpdateAction;","map":{"version":3,"names":["Action","require","Events","PresenceUpdateAction","handle","data","user","client","users","cache","get","id","username","add","equals","actions","UserUpdate","guild","guilds","guild_id","oldPresence","presences","_clone","member","members","status","roles","deaf","mute","emit","GUILD_MEMBER_AVAILABLE","Object","assign","listenerCount","PRESENCE_UPDATE","presence","module","exports"],"sources":["/Users/jessegill/node_modules/discord.js/src/client/actions/PresenceUpdate.js"],"sourcesContent":["'use strict';\n\nconst Action = require('./Action');\nconst { Events } = require('../../util/Constants');\n\nclass PresenceUpdateAction extends Action {\n  handle(data) {\n    let user = this.client.users.cache.get(data.user.id);\n    if (!user && data.user.username) user = this.client.users.add(data.user);\n    if (!user) return;\n\n    if (data.user && data.user.username) {\n      if (!user.equals(data.user)) this.client.actions.UserUpdate.handle(data.user);\n    }\n\n    const guild = this.client.guilds.cache.get(data.guild_id);\n    if (!guild) return;\n\n    let oldPresence = guild.presences.cache.get(user.id);\n    if (oldPresence) oldPresence = oldPresence._clone();\n    let member = guild.members.cache.get(user.id);\n    if (!member && data.status !== 'offline') {\n      member = guild.members.add({\n        user,\n        roles: data.roles,\n        deaf: false,\n        mute: false,\n      });\n      this.client.emit(Events.GUILD_MEMBER_AVAILABLE, member);\n    }\n    guild.presences.add(Object.assign(data, { guild }));\n    if (member && this.client.listenerCount(Events.PRESENCE_UPDATE)) {\n      /**\n       * Emitted whenever a guild member's presence (e.g. status, activity) is changed.\n       * @event Client#presenceUpdate\n       * @param {?Presence} oldPresence The presence before the update, if one at all\n       * @param {Presence} newPresence The presence after the update\n       */\n      this.client.emit(Events.PRESENCE_UPDATE, oldPresence, member.presence);\n    }\n  }\n}\n\nmodule.exports = PresenceUpdateAction;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAU,CAAC;AAClC,MAAM;EAAEC;AAAO,CAAC,GAAGD,OAAO,CAAC,sBAAsB,CAAC;AAElD,MAAME,oBAAoB,SAASH,MAAM,CAAC;EACxCI,MAAM,CAACC,IAAI,EAAE;IACX,IAAIC,IAAI,GAAG,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,KAAK,CAACC,GAAG,CAACL,IAAI,CAACC,IAAI,CAACK,EAAE,CAAC;IACpD,IAAI,CAACL,IAAI,IAAID,IAAI,CAACC,IAAI,CAACM,QAAQ,EAAEN,IAAI,GAAG,IAAI,CAACC,MAAM,CAACC,KAAK,CAACK,GAAG,CAACR,IAAI,CAACC,IAAI,CAAC;IACxE,IAAI,CAACA,IAAI,EAAE;IAEX,IAAID,IAAI,CAACC,IAAI,IAAID,IAAI,CAACC,IAAI,CAACM,QAAQ,EAAE;MACnC,IAAI,CAACN,IAAI,CAACQ,MAAM,CAACT,IAAI,CAACC,IAAI,CAAC,EAAE,IAAI,CAACC,MAAM,CAACQ,OAAO,CAACC,UAAU,CAACZ,MAAM,CAACC,IAAI,CAACC,IAAI,CAAC;IAC/E;IAEA,MAAMW,KAAK,GAAG,IAAI,CAACV,MAAM,CAACW,MAAM,CAACT,KAAK,CAACC,GAAG,CAACL,IAAI,CAACc,QAAQ,CAAC;IACzD,IAAI,CAACF,KAAK,EAAE;IAEZ,IAAIG,WAAW,GAAGH,KAAK,CAACI,SAAS,CAACZ,KAAK,CAACC,GAAG,CAACJ,IAAI,CAACK,EAAE,CAAC;IACpD,IAAIS,WAAW,EAAEA,WAAW,GAAGA,WAAW,CAACE,MAAM,EAAE;IACnD,IAAIC,MAAM,GAAGN,KAAK,CAACO,OAAO,CAACf,KAAK,CAACC,GAAG,CAACJ,IAAI,CAACK,EAAE,CAAC;IAC7C,IAAI,CAACY,MAAM,IAAIlB,IAAI,CAACoB,MAAM,KAAK,SAAS,EAAE;MACxCF,MAAM,GAAGN,KAAK,CAACO,OAAO,CAACX,GAAG,CAAC;QACzBP,IAAI;QACJoB,KAAK,EAAErB,IAAI,CAACqB,KAAK;QACjBC,IAAI,EAAE,KAAK;QACXC,IAAI,EAAE;MACR,CAAC,CAAC;MACF,IAAI,CAACrB,MAAM,CAACsB,IAAI,CAAC3B,MAAM,CAAC4B,sBAAsB,EAAEP,MAAM,CAAC;IACzD;IACAN,KAAK,CAACI,SAAS,CAACR,GAAG,CAACkB,MAAM,CAACC,MAAM,CAAC3B,IAAI,EAAE;MAAEY;IAAM,CAAC,CAAC,CAAC;IACnD,IAAIM,MAAM,IAAI,IAAI,CAAChB,MAAM,CAAC0B,aAAa,CAAC/B,MAAM,CAACgC,eAAe,CAAC,EAAE;MAC/D;AACN;AACA;AACA;AACA;AACA;MACM,IAAI,CAAC3B,MAAM,CAACsB,IAAI,CAAC3B,MAAM,CAACgC,eAAe,EAAEd,WAAW,EAAEG,MAAM,CAACY,QAAQ,CAAC;IACxE;EACF;AACF;AAEAC,MAAM,CAACC,OAAO,GAAGlC,oBAAoB"},"metadata":{},"sourceType":"script","externalDependencies":[]}