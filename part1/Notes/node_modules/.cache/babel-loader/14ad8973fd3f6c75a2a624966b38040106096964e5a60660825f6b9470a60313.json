{"ast":null,"code":"'use strict';\n\nconst {\n  Events,\n  Status\n} = require('../../../util/Constants');\nmodule.exports = async (client, _ref, shard) => {\n  let {\n    d: data\n  } = _ref;\n  let guild = client.guilds.cache.get(data.id);\n  if (guild) {\n    if (!guild.available && !data.unavailable) {\n      // A newly available guild\n      guild._patch(data);\n      // If the client was ready before and we had unavailable guilds, fetch them\n      if (client.ws.status === Status.READY && client.options.fetchAllMembers) {\n        await guild.members.fetch().catch(err => client.emit(Events.DEBUG, `Failed to fetch all members: ${err}\\n${err.stack}`));\n      }\n    }\n  } else {\n    // A new guild\n    data.shardID = shard.id;\n    guild = client.guilds.add(data);\n    if (client.ws.status === Status.READY) {\n      /**\n       * Emitted whenever the client joins a guild.\n       * @event Client#guildCreate\n       * @param {Guild} guild The created guild\n       */\n      if (client.options.fetchAllMembers) {\n        await guild.members.fetch().catch(err => client.emit(Events.DEBUG, `Failed to fetch all members: ${err}\\n${err.stack}`));\n      }\n      client.emit(Events.GUILD_CREATE, guild);\n    }\n  }\n};","map":{"version":3,"names":["Events","Status","require","module","exports","client","shard","d","data","guild","guilds","cache","get","id","available","unavailable","_patch","ws","status","READY","options","fetchAllMembers","members","fetch","catch","err","emit","DEBUG","stack","shardID","add","GUILD_CREATE"],"sources":["/Users/jessegill/node_modules/discord.js/src/client/websocket/handlers/GUILD_CREATE.js"],"sourcesContent":["'use strict';\n\nconst { Events, Status } = require('../../../util/Constants');\n\nmodule.exports = async (client, { d: data }, shard) => {\n  let guild = client.guilds.cache.get(data.id);\n  if (guild) {\n    if (!guild.available && !data.unavailable) {\n      // A newly available guild\n      guild._patch(data);\n      // If the client was ready before and we had unavailable guilds, fetch them\n      if (client.ws.status === Status.READY && client.options.fetchAllMembers) {\n        await guild.members\n          .fetch()\n          .catch(err => client.emit(Events.DEBUG, `Failed to fetch all members: ${err}\\n${err.stack}`));\n      }\n    }\n  } else {\n    // A new guild\n    data.shardID = shard.id;\n    guild = client.guilds.add(data);\n    if (client.ws.status === Status.READY) {\n      /**\n       * Emitted whenever the client joins a guild.\n       * @event Client#guildCreate\n       * @param {Guild} guild The created guild\n       */\n      if (client.options.fetchAllMembers) {\n        await guild.members\n          .fetch()\n          .catch(err => client.emit(Events.DEBUG, `Failed to fetch all members: ${err}\\n${err.stack}`));\n      }\n      client.emit(Events.GUILD_CREATE, guild);\n    }\n  }\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA,MAAM;EAAEC;AAAO,CAAC,GAAGC,OAAO,CAAC,yBAAyB,CAAC;AAE7DC,MAAM,CAACC,OAAO,GAAG,OAAOC,MAAM,QAAeC,KAAK,KAAK;EAAA,IAAvB;IAAEC,CAAC,EAAEC;EAAK,CAAC;EACzC,IAAIC,KAAK,GAAGJ,MAAM,CAACK,MAAM,CAACC,KAAK,CAACC,GAAG,CAACJ,IAAI,CAACK,EAAE,CAAC;EAC5C,IAAIJ,KAAK,EAAE;IACT,IAAI,CAACA,KAAK,CAACK,SAAS,IAAI,CAACN,IAAI,CAACO,WAAW,EAAE;MACzC;MACAN,KAAK,CAACO,MAAM,CAACR,IAAI,CAAC;MAClB;MACA,IAAIH,MAAM,CAACY,EAAE,CAACC,MAAM,KAAKjB,MAAM,CAACkB,KAAK,IAAId,MAAM,CAACe,OAAO,CAACC,eAAe,EAAE;QACvE,MAAMZ,KAAK,CAACa,OAAO,CAChBC,KAAK,EAAE,CACPC,KAAK,CAACC,GAAG,IAAIpB,MAAM,CAACqB,IAAI,CAAC1B,MAAM,CAAC2B,KAAK,EAAG,gCAA+BF,GAAI,KAAIA,GAAG,CAACG,KAAM,EAAC,CAAC,CAAC;MACjG;IACF;EACF,CAAC,MAAM;IACL;IACApB,IAAI,CAACqB,OAAO,GAAGvB,KAAK,CAACO,EAAE;IACvBJ,KAAK,GAAGJ,MAAM,CAACK,MAAM,CAACoB,GAAG,CAACtB,IAAI,CAAC;IAC/B,IAAIH,MAAM,CAACY,EAAE,CAACC,MAAM,KAAKjB,MAAM,CAACkB,KAAK,EAAE;MACrC;AACN;AACA;AACA;AACA;MACM,IAAId,MAAM,CAACe,OAAO,CAACC,eAAe,EAAE;QAClC,MAAMZ,KAAK,CAACa,OAAO,CAChBC,KAAK,EAAE,CACPC,KAAK,CAACC,GAAG,IAAIpB,MAAM,CAACqB,IAAI,CAAC1B,MAAM,CAAC2B,KAAK,EAAG,gCAA+BF,GAAI,KAAIA,GAAG,CAACG,KAAM,EAAC,CAAC,CAAC;MACjG;MACAvB,MAAM,CAACqB,IAAI,CAAC1B,MAAM,CAAC+B,YAAY,EAAEtB,KAAK,CAAC;IACzC;EACF;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}