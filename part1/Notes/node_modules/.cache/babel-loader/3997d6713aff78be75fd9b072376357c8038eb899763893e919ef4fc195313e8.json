{"ast":null,"code":"'use strict';\n\nconst Emoji = require('./Emoji');\nconst ActivityFlags = require('../util/ActivityFlags');\nconst {\n  ActivityTypes\n} = require('../util/Constants');\nconst Util = require('../util/Util');\n\n/**\n * Activity sent in a message.\n * @typedef {Object} MessageActivity\n * @property {string} [partyID] Id of the party represented in activity\n * @property {number} [type] Type of activity sent\n */\n\n/**\n * The status of this presence:\n * * **`online`** - user is online\n * * **`idle`** - user is AFK\n * * **`offline`** - user is offline or invisible\n * * **`dnd`** - user is in Do Not Disturb\n * @typedef {string} PresenceStatus\n */\n\n/**\n * The status of this presence:\n * * **`online`** - user is online\n * * **`idle`** - user is AFK\n * * **`dnd`** - user is in Do Not Disturb\n * @typedef {string} ClientPresenceStatus\n */\n\n/**\n * Represents a user's presence.\n */\nclass Presence {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {Object} [data={}] The data for the presence\n   */\n  constructor(client) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    /**\n     * The client that instantiated this\n     * @name Presence#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', {\n      value: client\n    });\n    /**\n     * The user ID of this presence\n     * @type {Snowflake}\n     */\n    this.userID = data.user.id;\n\n    /**\n     * The guild of this presence\n     * @type {?Guild}\n     */\n    this.guild = data.guild || null;\n    this.patch(data);\n  }\n\n  /**\n   * The user of this presence\n   * @type {?User}\n   * @readonly\n   */\n  get user() {\n    return this.client.users.cache.get(this.userID) || null;\n  }\n\n  /**\n   * The member of this presence\n   * @type {?GuildMember}\n   * @readonly\n   */\n  get member() {\n    return this.guild.members.cache.get(this.userID) || null;\n  }\n  patch(data) {\n    /**\n     * The status of this presence\n     * @type {PresenceStatus}\n     */\n    this.status = data.status || this.status || 'offline';\n    if (data.activities) {\n      /**\n       * The activities of this presence\n       * @type {Activity[]}\n       */\n      this.activities = data.activities.map(activity => new Activity(this, activity));\n    } else if (data.activity || data.game) {\n      this.activities = [new Activity(this, data.game || data.activity)];\n    } else {\n      this.activities = [];\n    }\n\n    /**\n     * The devices this presence is on\n     * @type {?Object}\n     * @property {?ClientPresenceStatus} web The current presence in the web application\n     * @property {?ClientPresenceStatus} mobile The current presence in the mobile application\n     * @property {?ClientPresenceStatus} desktop The current presence in the desktop application\n     */\n    this.clientStatus = data.client_status || null;\n    return this;\n  }\n  _clone() {\n    const clone = Object.assign(Object.create(this), this);\n    if (this.activities) clone.activities = this.activities.map(activity => activity._clone());\n    return clone;\n  }\n\n  /**\n   * Whether this presence is equal to another.\n   * @param {Presence} presence The presence to compare with\n   * @returns {boolean}\n   */\n  equals(presence) {\n    return this === presence || presence && this.status === presence.status && this.activities.length === presence.activities.length && this.activities.every((activity, index) => activity.equals(presence.activities[index])) && this.clientStatus.web === presence.clientStatus.web && this.clientStatus.mobile === presence.clientStatus.mobile && this.clientStatus.desktop === presence.clientStatus.desktop;\n  }\n  toJSON() {\n    return Util.flatten(this);\n  }\n}\n\n/**\n * Represents an activity that is part of a user's presence.\n */\nclass Activity {\n  constructor(presence, data) {\n    Object.defineProperty(this, 'presence', {\n      value: presence\n    });\n\n    /**\n     * The name of the activity being played\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The type of the activity status\n     * @type {ActivityType}\n     */\n    this.type = ActivityTypes[data.type];\n\n    /**\n     * If the activity is being streamed, a link to the stream\n     * @type {?string}\n     */\n    this.url = data.url || null;\n\n    /**\n     * Details about the activity\n     * @type {?string}\n     */\n    this.details = data.details || null;\n\n    /**\n     * State of the activity\n     * @type {?string}\n     */\n    this.state = data.state || null;\n\n    /**\n     * Application ID associated with this activity\n     * @type {?Snowflake}\n     */\n    this.applicationID = data.application_id || null;\n\n    /**\n     * Timestamps for the activity\n     * @type {?Object}\n     * @property {?Date} start When the activity started\n     * @property {?Date} end When the activity will end\n     */\n    this.timestamps = data.timestamps ? {\n      start: data.timestamps.start ? new Date(Number(data.timestamps.start)) : null,\n      end: data.timestamps.end ? new Date(Number(data.timestamps.end)) : null\n    } : null;\n\n    /**\n     * Party of the activity\n     * @type {?Object}\n     * @property {?string} id ID of the party\n     * @property {number[]} size Size of the party as `[current, max]`\n     */\n    this.party = data.party || null;\n\n    /**\n     * Assets for rich presence\n     * @type {?RichPresenceAssets}\n     */\n    this.assets = data.assets ? new RichPresenceAssets(this, data.assets) : null;\n    this.syncID = data.sync_id;\n\n    /**\n     * Flags that describe the activity\n     * @type {Readonly<ActivityFlags>}\n     */\n    this.flags = new ActivityFlags(data.flags).freeze();\n\n    /**\n     * Emoji for a custom activity\n     * @type {?Emoji}\n     */\n    this.emoji = data.emoji ? new Emoji(presence.client, data.emoji) : null;\n\n    /**\n     * Creation date of the activity\n     * @type {number}\n     */\n    this.createdTimestamp = new Date(data.created_at).getTime();\n  }\n\n  /**\n   * Whether this activity is equal to another activity.\n   * @param {Activity} activity The activity to compare with\n   * @returns {boolean}\n   */\n  equals(activity) {\n    return this === activity || activity && this.name === activity.name && this.type === activity.type && this.url === activity.url;\n  }\n\n  /**\n   * The time the activity was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the activities' name instead of the Activity object.\n   * @returns {string}\n   */\n  toString() {\n    return this.name;\n  }\n  _clone() {\n    return Object.assign(Object.create(this), this);\n  }\n}\n\n/**\n * Assets for a rich presence\n */\nclass RichPresenceAssets {\n  constructor(activity, assets) {\n    Object.defineProperty(this, 'activity', {\n      value: activity\n    });\n\n    /**\n     * Hover text for the large image\n     * @type {?string}\n     */\n    this.largeText = assets.large_text || null;\n\n    /**\n     * Hover text for the small image\n     * @type {?string}\n     */\n    this.smallText = assets.small_text || null;\n\n    /**\n     * ID of the large image asset\n     * @type {?Snowflake}\n     */\n    this.largeImage = assets.large_image || null;\n\n    /**\n     * ID of the small image asset\n     * @type {?Snowflake}\n     */\n    this.smallImage = assets.small_image || null;\n  }\n\n  /**\n   * Gets the URL of the small image asset\n   * @param {Object} [options] Options for the image url\n   * @param {string} [options.format] Format of the image\n   * @param {number} [options.size] Size of the image\n   * @returns {?string} The small image URL\n   */\n  smallImageURL() {\n    let {\n      format,\n      size\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.smallImage) return null;\n    return this.activity.presence.client.rest.cdn.AppAsset(this.activity.applicationID, this.smallImage, {\n      format,\n      size\n    });\n  }\n\n  /**\n   * Gets the URL of the large image asset\n   * @param {Object} [options] Options for the image url\n   * @param {string} [options.format] Format of the image\n   * @param {number} [options.size] Size of the image\n   * @returns {?string} The large image URL\n   */\n  largeImageURL() {\n    let {\n      format,\n      size\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.largeImage) return null;\n    if (/^spotify:/.test(this.largeImage)) {\n      return `https://i.scdn.co/image/${this.largeImage.slice(8)}`;\n    } else if (/^twitch:/.test(this.largeImage)) {\n      return `https://static-cdn.jtvnw.net/previews-ttv/live_user_${this.largeImage.slice(7)}.png`;\n    }\n    return this.activity.presence.client.rest.cdn.AppAsset(this.activity.applicationID, this.largeImage, {\n      format,\n      size\n    });\n  }\n}\nexports.Presence = Presence;\nexports.Activity = Activity;\nexports.RichPresenceAssets = RichPresenceAssets;","map":{"version":3,"names":["Emoji","require","ActivityFlags","ActivityTypes","Util","Presence","constructor","client","data","Object","defineProperty","value","userID","user","id","guild","patch","users","cache","get","member","members","status","activities","map","activity","Activity","game","clientStatus","client_status","_clone","clone","assign","create","equals","presence","length","every","index","web","mobile","desktop","toJSON","flatten","name","type","url","details","state","applicationID","application_id","timestamps","start","Date","Number","end","party","assets","RichPresenceAssets","syncID","sync_id","flags","freeze","emoji","createdTimestamp","created_at","getTime","createdAt","toString","largeText","large_text","smallText","small_text","largeImage","large_image","smallImage","small_image","smallImageURL","format","size","rest","cdn","AppAsset","largeImageURL","test","slice","exports"],"sources":["/Users/jessegill/node_modules/discord.js/src/structures/Presence.js"],"sourcesContent":["'use strict';\n\nconst Emoji = require('./Emoji');\nconst ActivityFlags = require('../util/ActivityFlags');\nconst { ActivityTypes } = require('../util/Constants');\nconst Util = require('../util/Util');\n\n/**\n * Activity sent in a message.\n * @typedef {Object} MessageActivity\n * @property {string} [partyID] Id of the party represented in activity\n * @property {number} [type] Type of activity sent\n */\n\n/**\n * The status of this presence:\n * * **`online`** - user is online\n * * **`idle`** - user is AFK\n * * **`offline`** - user is offline or invisible\n * * **`dnd`** - user is in Do Not Disturb\n * @typedef {string} PresenceStatus\n */\n\n/**\n * The status of this presence:\n * * **`online`** - user is online\n * * **`idle`** - user is AFK\n * * **`dnd`** - user is in Do Not Disturb\n * @typedef {string} ClientPresenceStatus\n */\n\n/**\n * Represents a user's presence.\n */\nclass Presence {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {Object} [data={}] The data for the presence\n   */\n  constructor(client, data = {}) {\n    /**\n     * The client that instantiated this\n     * @name Presence#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n    /**\n     * The user ID of this presence\n     * @type {Snowflake}\n     */\n    this.userID = data.user.id;\n\n    /**\n     * The guild of this presence\n     * @type {?Guild}\n     */\n    this.guild = data.guild || null;\n\n    this.patch(data);\n  }\n\n  /**\n   * The user of this presence\n   * @type {?User}\n   * @readonly\n   */\n  get user() {\n    return this.client.users.cache.get(this.userID) || null;\n  }\n\n  /**\n   * The member of this presence\n   * @type {?GuildMember}\n   * @readonly\n   */\n  get member() {\n    return this.guild.members.cache.get(this.userID) || null;\n  }\n\n  patch(data) {\n    /**\n     * The status of this presence\n     * @type {PresenceStatus}\n     */\n    this.status = data.status || this.status || 'offline';\n\n    if (data.activities) {\n      /**\n       * The activities of this presence\n       * @type {Activity[]}\n       */\n      this.activities = data.activities.map(activity => new Activity(this, activity));\n    } else if (data.activity || data.game) {\n      this.activities = [new Activity(this, data.game || data.activity)];\n    } else {\n      this.activities = [];\n    }\n\n    /**\n     * The devices this presence is on\n     * @type {?Object}\n     * @property {?ClientPresenceStatus} web The current presence in the web application\n     * @property {?ClientPresenceStatus} mobile The current presence in the mobile application\n     * @property {?ClientPresenceStatus} desktop The current presence in the desktop application\n     */\n    this.clientStatus = data.client_status || null;\n\n    return this;\n  }\n\n  _clone() {\n    const clone = Object.assign(Object.create(this), this);\n    if (this.activities) clone.activities = this.activities.map(activity => activity._clone());\n    return clone;\n  }\n\n  /**\n   * Whether this presence is equal to another.\n   * @param {Presence} presence The presence to compare with\n   * @returns {boolean}\n   */\n  equals(presence) {\n    return (\n      this === presence ||\n      (presence &&\n        this.status === presence.status &&\n        this.activities.length === presence.activities.length &&\n        this.activities.every((activity, index) => activity.equals(presence.activities[index])) &&\n        this.clientStatus.web === presence.clientStatus.web &&\n        this.clientStatus.mobile === presence.clientStatus.mobile &&\n        this.clientStatus.desktop === presence.clientStatus.desktop)\n    );\n  }\n\n  toJSON() {\n    return Util.flatten(this);\n  }\n}\n\n/**\n * Represents an activity that is part of a user's presence.\n */\nclass Activity {\n  constructor(presence, data) {\n    Object.defineProperty(this, 'presence', { value: presence });\n\n    /**\n     * The name of the activity being played\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The type of the activity status\n     * @type {ActivityType}\n     */\n    this.type = ActivityTypes[data.type];\n\n    /**\n     * If the activity is being streamed, a link to the stream\n     * @type {?string}\n     */\n    this.url = data.url || null;\n\n    /**\n     * Details about the activity\n     * @type {?string}\n     */\n    this.details = data.details || null;\n\n    /**\n     * State of the activity\n     * @type {?string}\n     */\n    this.state = data.state || null;\n\n    /**\n     * Application ID associated with this activity\n     * @type {?Snowflake}\n     */\n    this.applicationID = data.application_id || null;\n\n    /**\n     * Timestamps for the activity\n     * @type {?Object}\n     * @property {?Date} start When the activity started\n     * @property {?Date} end When the activity will end\n     */\n    this.timestamps = data.timestamps\n      ? {\n          start: data.timestamps.start ? new Date(Number(data.timestamps.start)) : null,\n          end: data.timestamps.end ? new Date(Number(data.timestamps.end)) : null,\n        }\n      : null;\n\n    /**\n     * Party of the activity\n     * @type {?Object}\n     * @property {?string} id ID of the party\n     * @property {number[]} size Size of the party as `[current, max]`\n     */\n    this.party = data.party || null;\n\n    /**\n     * Assets for rich presence\n     * @type {?RichPresenceAssets}\n     */\n    this.assets = data.assets ? new RichPresenceAssets(this, data.assets) : null;\n\n    this.syncID = data.sync_id;\n\n    /**\n     * Flags that describe the activity\n     * @type {Readonly<ActivityFlags>}\n     */\n    this.flags = new ActivityFlags(data.flags).freeze();\n\n    /**\n     * Emoji for a custom activity\n     * @type {?Emoji}\n     */\n    this.emoji = data.emoji ? new Emoji(presence.client, data.emoji) : null;\n\n    /**\n     * Creation date of the activity\n     * @type {number}\n     */\n    this.createdTimestamp = new Date(data.created_at).getTime();\n  }\n\n  /**\n   * Whether this activity is equal to another activity.\n   * @param {Activity} activity The activity to compare with\n   * @returns {boolean}\n   */\n  equals(activity) {\n    return (\n      this === activity ||\n      (activity && this.name === activity.name && this.type === activity.type && this.url === activity.url)\n    );\n  }\n\n  /**\n   * The time the activity was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the activities' name instead of the Activity object.\n   * @returns {string}\n   */\n  toString() {\n    return this.name;\n  }\n\n  _clone() {\n    return Object.assign(Object.create(this), this);\n  }\n}\n\n/**\n * Assets for a rich presence\n */\nclass RichPresenceAssets {\n  constructor(activity, assets) {\n    Object.defineProperty(this, 'activity', { value: activity });\n\n    /**\n     * Hover text for the large image\n     * @type {?string}\n     */\n    this.largeText = assets.large_text || null;\n\n    /**\n     * Hover text for the small image\n     * @type {?string}\n     */\n    this.smallText = assets.small_text || null;\n\n    /**\n     * ID of the large image asset\n     * @type {?Snowflake}\n     */\n    this.largeImage = assets.large_image || null;\n\n    /**\n     * ID of the small image asset\n     * @type {?Snowflake}\n     */\n    this.smallImage = assets.small_image || null;\n  }\n\n  /**\n   * Gets the URL of the small image asset\n   * @param {Object} [options] Options for the image url\n   * @param {string} [options.format] Format of the image\n   * @param {number} [options.size] Size of the image\n   * @returns {?string} The small image URL\n   */\n  smallImageURL({ format, size } = {}) {\n    if (!this.smallImage) return null;\n    return this.activity.presence.client.rest.cdn.AppAsset(this.activity.applicationID, this.smallImage, {\n      format,\n      size,\n    });\n  }\n\n  /**\n   * Gets the URL of the large image asset\n   * @param {Object} [options] Options for the image url\n   * @param {string} [options.format] Format of the image\n   * @param {number} [options.size] Size of the image\n   * @returns {?string} The large image URL\n   */\n  largeImageURL({ format, size } = {}) {\n    if (!this.largeImage) return null;\n    if (/^spotify:/.test(this.largeImage)) {\n      return `https://i.scdn.co/image/${this.largeImage.slice(8)}`;\n    } else if (/^twitch:/.test(this.largeImage)) {\n      return `https://static-cdn.jtvnw.net/previews-ttv/live_user_${this.largeImage.slice(7)}.png`;\n    }\n    return this.activity.presence.client.rest.cdn.AppAsset(this.activity.applicationID, this.largeImage, {\n      format,\n      size,\n    });\n  }\n}\n\nexports.Presence = Presence;\nexports.Activity = Activity;\nexports.RichPresenceAssets = RichPresenceAssets;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}