{"ast":null,"code":"'use strict';\n\nconst Collection = require('../util/Collection');\nlet Structures;\n\n/**\n * Manages the API methods of a data model and holds its cache.\n * @abstract\n */\nclass BaseManager {\n  constructor(client, iterable, holds) {\n    let cacheType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Collection;\n    if (!Structures) Structures = require('../util/Structures');\n    /**\n     * The data structure belonging to this manager\n     * @name BaseManager#holds\n     * @type {Function}\n     * @private\n     * @readonly\n     */\n    Object.defineProperty(this, 'holds', {\n      value: Structures.get(holds.name) || holds\n    });\n\n    /**\n     * The client that instantiated this Manager\n     * @name BaseManager#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', {\n      value: client\n    });\n\n    /**\n     * The type of Collection of the Manager\n     * @type {Collection}\n     */\n    this.cacheType = cacheType;\n\n    /**\n     * Holds the cache for the data model\n     * @type {Collection}\n     */\n    for (var _len = arguments.length, cacheOptions = new Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {\n      cacheOptions[_key - 4] = arguments[_key];\n    }\n    this.cache = new cacheType(...cacheOptions);\n    if (iterable) for (const i of iterable) this.add(i);\n  }\n  add(data) {\n    let cache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let {\n      id,\n      extras = []\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const existing = this.cache.get(id || data.id);\n    if (existing && existing._patch && cache) existing._patch(data);\n    if (existing) return existing;\n    const entry = this.holds ? new this.holds(this.client, data, ...extras) : data;\n    if (cache) this.cache.set(id || entry.id, entry);\n    return entry;\n  }\n\n  /**\n   * Resolves a data entry to a data Object.\n   * @param {string|Object} idOrInstance The id or instance of something in this Manager\n   * @returns {?Object} An instance from this Manager\n   */\n  resolve(idOrInstance) {\n    if (idOrInstance instanceof this.holds) return idOrInstance;\n    if (typeof idOrInstance === 'string') return this.cache.get(idOrInstance) || null;\n    return null;\n  }\n\n  /**\n   * Resolves a data entry to a instance ID.\n   * @param {string|Object} idOrInstance The id or instance of something in this Manager\n   * @returns {?Snowflake}\n   */\n  resolveID(idOrInstance) {\n    if (idOrInstance instanceof this.holds) return idOrInstance.id;\n    if (typeof idOrInstance === 'string') return idOrInstance;\n    return null;\n  }\n  valueOf() {\n    return this.cache;\n  }\n}\nmodule.exports = BaseManager;","map":{"version":3,"names":["Collection","require","Structures","BaseManager","constructor","client","iterable","holds","cacheType","Object","defineProperty","value","get","name","cacheOptions","cache","i","add","data","id","extras","existing","_patch","entry","set","resolve","idOrInstance","resolveID","valueOf","module","exports"],"sources":["/Users/jessegill/node_modules/discord.js/src/managers/BaseManager.js"],"sourcesContent":["'use strict';\n\nconst Collection = require('../util/Collection');\nlet Structures;\n\n/**\n * Manages the API methods of a data model and holds its cache.\n * @abstract\n */\nclass BaseManager {\n  constructor(client, iterable, holds, cacheType = Collection, ...cacheOptions) {\n    if (!Structures) Structures = require('../util/Structures');\n    /**\n     * The data structure belonging to this manager\n     * @name BaseManager#holds\n     * @type {Function}\n     * @private\n     * @readonly\n     */\n    Object.defineProperty(this, 'holds', { value: Structures.get(holds.name) || holds });\n\n    /**\n     * The client that instantiated this Manager\n     * @name BaseManager#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n\n    /**\n     * The type of Collection of the Manager\n     * @type {Collection}\n     */\n    this.cacheType = cacheType;\n\n    /**\n     * Holds the cache for the data model\n     * @type {Collection}\n     */\n    this.cache = new cacheType(...cacheOptions);\n    if (iterable) for (const i of iterable) this.add(i);\n  }\n\n  add(data, cache = true, { id, extras = [] } = {}) {\n    const existing = this.cache.get(id || data.id);\n    if (existing && existing._patch && cache) existing._patch(data);\n    if (existing) return existing;\n\n    const entry = this.holds ? new this.holds(this.client, data, ...extras) : data;\n    if (cache) this.cache.set(id || entry.id, entry);\n    return entry;\n  }\n\n  /**\n   * Resolves a data entry to a data Object.\n   * @param {string|Object} idOrInstance The id or instance of something in this Manager\n   * @returns {?Object} An instance from this Manager\n   */\n  resolve(idOrInstance) {\n    if (idOrInstance instanceof this.holds) return idOrInstance;\n    if (typeof idOrInstance === 'string') return this.cache.get(idOrInstance) || null;\n    return null;\n  }\n\n  /**\n   * Resolves a data entry to a instance ID.\n   * @param {string|Object} idOrInstance The id or instance of something in this Manager\n   * @returns {?Snowflake}\n   */\n  resolveID(idOrInstance) {\n    if (idOrInstance instanceof this.holds) return idOrInstance.id;\n    if (typeof idOrInstance === 'string') return idOrInstance;\n    return null;\n  }\n\n  valueOf() {\n    return this.cache;\n  }\n}\n\nmodule.exports = BaseManager;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,UAAU,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAChD,IAAIC,UAAU;;AAEd;AACA;AACA;AACA;AACA,MAAMC,WAAW,CAAC;EAChBC,WAAW,CAACC,MAAM,EAAEC,QAAQ,EAAEC,KAAK,EAA2C;IAAA,IAAzCC,SAAS,uEAAGR,UAAU;IACzD,IAAI,CAACE,UAAU,EAAEA,UAAU,GAAGD,OAAO,CAAC,oBAAoB,CAAC;IAC3D;AACJ;AACA;AACA;AACA;AACA;AACA;IACIQ,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,OAAO,EAAE;MAAEC,KAAK,EAAET,UAAU,CAACU,GAAG,CAACL,KAAK,CAACM,IAAI,CAAC,IAAIN;IAAM,CAAC,CAAC;;IAEpF;AACJ;AACA;AACA;AACA;AACA;IACIE,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE;MAAEC,KAAK,EAAEN;IAAO,CAAC,CAAC;;IAExD;AACJ;AACA;AACA;IACI,IAAI,CAACG,SAAS,GAAGA,SAAS;;IAE1B;AACJ;AACA;AACA;IAHI,kCAzB8DM,YAAY;MAAZA,YAAY;IAAA;IA6B1E,IAAI,CAACC,KAAK,GAAG,IAAIP,SAAS,CAAC,GAAGM,YAAY,CAAC;IAC3C,IAAIR,QAAQ,EAAE,KAAK,MAAMU,CAAC,IAAIV,QAAQ,EAAE,IAAI,CAACW,GAAG,CAACD,CAAC,CAAC;EACrD;EAEAC,GAAG,CAACC,IAAI,EAA0C;IAAA,IAAxCH,KAAK,uEAAG,IAAI;IAAA,IAAE;MAAEI,EAAE;MAAEC,MAAM,GAAG;IAAG,CAAC,uEAAG,CAAC,CAAC;IAC9C,MAAMC,QAAQ,GAAG,IAAI,CAACN,KAAK,CAACH,GAAG,CAACO,EAAE,IAAID,IAAI,CAACC,EAAE,CAAC;IAC9C,IAAIE,QAAQ,IAAIA,QAAQ,CAACC,MAAM,IAAIP,KAAK,EAAEM,QAAQ,CAACC,MAAM,CAACJ,IAAI,CAAC;IAC/D,IAAIG,QAAQ,EAAE,OAAOA,QAAQ;IAE7B,MAAME,KAAK,GAAG,IAAI,CAAChB,KAAK,GAAG,IAAI,IAAI,CAACA,KAAK,CAAC,IAAI,CAACF,MAAM,EAAEa,IAAI,EAAE,GAAGE,MAAM,CAAC,GAAGF,IAAI;IAC9E,IAAIH,KAAK,EAAE,IAAI,CAACA,KAAK,CAACS,GAAG,CAACL,EAAE,IAAII,KAAK,CAACJ,EAAE,EAAEI,KAAK,CAAC;IAChD,OAAOA,KAAK;EACd;;EAEA;AACF;AACA;AACA;AACA;EACEE,OAAO,CAACC,YAAY,EAAE;IACpB,IAAIA,YAAY,YAAY,IAAI,CAACnB,KAAK,EAAE,OAAOmB,YAAY;IAC3D,IAAI,OAAOA,YAAY,KAAK,QAAQ,EAAE,OAAO,IAAI,CAACX,KAAK,CAACH,GAAG,CAACc,YAAY,CAAC,IAAI,IAAI;IACjF,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;EACEC,SAAS,CAACD,YAAY,EAAE;IACtB,IAAIA,YAAY,YAAY,IAAI,CAACnB,KAAK,EAAE,OAAOmB,YAAY,CAACP,EAAE;IAC9D,IAAI,OAAOO,YAAY,KAAK,QAAQ,EAAE,OAAOA,YAAY;IACzD,OAAO,IAAI;EACb;EAEAE,OAAO,GAAG;IACR,OAAO,IAAI,CAACb,KAAK;EACnB;AACF;AAEAc,MAAM,CAACC,OAAO,GAAG3B,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}