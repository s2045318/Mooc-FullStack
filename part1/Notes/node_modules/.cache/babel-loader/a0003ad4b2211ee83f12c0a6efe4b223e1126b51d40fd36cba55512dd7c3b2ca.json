{"ast":null,"code":"'use strict';\n\nconst BaseManager = require('./BaseManager');\nconst {\n  Error\n} = require('../errors');\nconst Collection = require('../util/Collection');\n\n/**\n * Manages API methods for users who reacted to a reaction and stores their cache.\n * @extends {BaseManager}\n */\nclass ReactionUserManager extends BaseManager {\n  constructor(client, iterable, reaction) {\n    super(client, iterable, {\n      name: 'User'\n    });\n    /**\n     * The reaction that this manager belongs to\n     * @type {MessageReaction}\n     */\n    this.reaction = reaction;\n  }\n\n  /**\n   * The cache of this manager\n   * @type {Collection<Snowflake, User>}\n   * @name ReactionUserManager#cache\n   */\n\n  /**\n   * Fetches all the users that gave this reaction. Resolves with a collection of users, mapped by their IDs.\n   * @param {Object} [options] Options for fetching the users\n   * @param {number} [options.limit=100] The maximum amount of users to fetch, defaults to 100\n   * @param {Snowflake} [options.before] Limit fetching users to those with an id lower than the supplied id\n   * @param {Snowflake} [options.after] Limit fetching users to those with an id greater than the supplied id\n   * @returns {Promise<Collection<Snowflake, User>>}\n   */\n  async fetch() {\n    let {\n      limit = 100,\n      after,\n      before\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const message = this.reaction.message;\n    const data = await this.client.api.channels[message.channel.id].messages[message.id].reactions[this.reaction.emoji.identifier].get({\n      query: {\n        limit,\n        before,\n        after\n      }\n    });\n    const users = new Collection();\n    for (const rawUser of data) {\n      const user = this.client.users.add(rawUser);\n      this.cache.set(user.id, user);\n      users.set(user.id, user);\n    }\n    return users;\n  }\n\n  /**\n   * Removes a user from this reaction.\n   * @param {UserResolvable} [user=this.client.user] The user to remove the reaction of\n   * @returns {Promise<MessageReaction>}\n   */\n  remove() {\n    let user = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.client.user;\n    const userID = this.client.users.resolveID(user);\n    if (!userID) return Promise.reject(new Error('REACTION_RESOLVE_USER'));\n    const message = this.reaction.message;\n    return this.client.api.channels[message.channel.id].messages[message.id].reactions[this.reaction.emoji.identifier][userID === this.client.user.id ? '@me' : userID].delete().then(() => this.reaction);\n  }\n}\nmodule.exports = ReactionUserManager;","map":{"version":3,"names":["BaseManager","require","Error","Collection","ReactionUserManager","constructor","client","iterable","reaction","name","fetch","limit","after","before","message","data","api","channels","channel","id","messages","reactions","emoji","identifier","get","query","users","rawUser","user","add","cache","set","remove","userID","resolveID","Promise","reject","delete","then","module","exports"],"sources":["/Users/jessegill/node_modules/discord.js/src/managers/ReactionUserManager.js"],"sourcesContent":["'use strict';\n\nconst BaseManager = require('./BaseManager');\nconst { Error } = require('../errors');\nconst Collection = require('../util/Collection');\n\n/**\n * Manages API methods for users who reacted to a reaction and stores their cache.\n * @extends {BaseManager}\n */\nclass ReactionUserManager extends BaseManager {\n  constructor(client, iterable, reaction) {\n    super(client, iterable, { name: 'User' });\n    /**\n     * The reaction that this manager belongs to\n     * @type {MessageReaction}\n     */\n    this.reaction = reaction;\n  }\n\n  /**\n   * The cache of this manager\n   * @type {Collection<Snowflake, User>}\n   * @name ReactionUserManager#cache\n   */\n\n  /**\n   * Fetches all the users that gave this reaction. Resolves with a collection of users, mapped by their IDs.\n   * @param {Object} [options] Options for fetching the users\n   * @param {number} [options.limit=100] The maximum amount of users to fetch, defaults to 100\n   * @param {Snowflake} [options.before] Limit fetching users to those with an id lower than the supplied id\n   * @param {Snowflake} [options.after] Limit fetching users to those with an id greater than the supplied id\n   * @returns {Promise<Collection<Snowflake, User>>}\n   */\n  async fetch({ limit = 100, after, before } = {}) {\n    const message = this.reaction.message;\n    const data = await this.client.api.channels[message.channel.id].messages[message.id].reactions[\n      this.reaction.emoji.identifier\n    ].get({ query: { limit, before, after } });\n    const users = new Collection();\n    for (const rawUser of data) {\n      const user = this.client.users.add(rawUser);\n      this.cache.set(user.id, user);\n      users.set(user.id, user);\n    }\n    return users;\n  }\n\n  /**\n   * Removes a user from this reaction.\n   * @param {UserResolvable} [user=this.client.user] The user to remove the reaction of\n   * @returns {Promise<MessageReaction>}\n   */\n  remove(user = this.client.user) {\n    const userID = this.client.users.resolveID(user);\n    if (!userID) return Promise.reject(new Error('REACTION_RESOLVE_USER'));\n    const message = this.reaction.message;\n    return this.client.api.channels[message.channel.id].messages[message.id].reactions[this.reaction.emoji.identifier][\n      userID === this.client.user.id ? '@me' : userID\n    ]\n      .delete()\n      .then(() => this.reaction);\n  }\n}\n\nmodule.exports = ReactionUserManager;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,WAAW,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC5C,MAAM;EAAEC;AAAM,CAAC,GAAGD,OAAO,CAAC,WAAW,CAAC;AACtC,MAAME,UAAU,GAAGF,OAAO,CAAC,oBAAoB,CAAC;;AAEhD;AACA;AACA;AACA;AACA,MAAMG,mBAAmB,SAASJ,WAAW,CAAC;EAC5CK,WAAW,CAACC,MAAM,EAAEC,QAAQ,EAAEC,QAAQ,EAAE;IACtC,KAAK,CAACF,MAAM,EAAEC,QAAQ,EAAE;MAAEE,IAAI,EAAE;IAAO,CAAC,CAAC;IACzC;AACJ;AACA;AACA;IACI,IAAI,CAACD,QAAQ,GAAGA,QAAQ;EAC1B;;EAEA;AACF;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAME,KAAK,GAAsC;IAAA,IAArC;MAAEC,KAAK,GAAG,GAAG;MAAEC,KAAK;MAAEC;IAAO,CAAC,uEAAG,CAAC,CAAC;IAC7C,MAAMC,OAAO,GAAG,IAAI,CAACN,QAAQ,CAACM,OAAO;IACrC,MAAMC,IAAI,GAAG,MAAM,IAAI,CAACT,MAAM,CAACU,GAAG,CAACC,QAAQ,CAACH,OAAO,CAACI,OAAO,CAACC,EAAE,CAAC,CAACC,QAAQ,CAACN,OAAO,CAACK,EAAE,CAAC,CAACE,SAAS,CAC5F,IAAI,CAACb,QAAQ,CAACc,KAAK,CAACC,UAAU,CAC/B,CAACC,GAAG,CAAC;MAAEC,KAAK,EAAE;QAAEd,KAAK;QAAEE,MAAM;QAAED;MAAM;IAAE,CAAC,CAAC;IAC1C,MAAMc,KAAK,GAAG,IAAIvB,UAAU,EAAE;IAC9B,KAAK,MAAMwB,OAAO,IAAIZ,IAAI,EAAE;MAC1B,MAAMa,IAAI,GAAG,IAAI,CAACtB,MAAM,CAACoB,KAAK,CAACG,GAAG,CAACF,OAAO,CAAC;MAC3C,IAAI,CAACG,KAAK,CAACC,GAAG,CAACH,IAAI,CAACT,EAAE,EAAES,IAAI,CAAC;MAC7BF,KAAK,CAACK,GAAG,CAACH,IAAI,CAACT,EAAE,EAAES,IAAI,CAAC;IAC1B;IACA,OAAOF,KAAK;EACd;;EAEA;AACF;AACA;AACA;AACA;EACEM,MAAM,GAA0B;IAAA,IAAzBJ,IAAI,uEAAG,IAAI,CAACtB,MAAM,CAACsB,IAAI;IAC5B,MAAMK,MAAM,GAAG,IAAI,CAAC3B,MAAM,CAACoB,KAAK,CAACQ,SAAS,CAACN,IAAI,CAAC;IAChD,IAAI,CAACK,MAAM,EAAE,OAAOE,OAAO,CAACC,MAAM,CAAC,IAAIlC,KAAK,CAAC,uBAAuB,CAAC,CAAC;IACtE,MAAMY,OAAO,GAAG,IAAI,CAACN,QAAQ,CAACM,OAAO;IACrC,OAAO,IAAI,CAACR,MAAM,CAACU,GAAG,CAACC,QAAQ,CAACH,OAAO,CAACI,OAAO,CAACC,EAAE,CAAC,CAACC,QAAQ,CAACN,OAAO,CAACK,EAAE,CAAC,CAACE,SAAS,CAAC,IAAI,CAACb,QAAQ,CAACc,KAAK,CAACC,UAAU,CAAC,CAChHU,MAAM,KAAK,IAAI,CAAC3B,MAAM,CAACsB,IAAI,CAACT,EAAE,GAAG,KAAK,GAAGc,MAAM,CAChD,CACEI,MAAM,EAAE,CACRC,IAAI,CAAC,MAAM,IAAI,CAAC9B,QAAQ,CAAC;EAC9B;AACF;AAEA+B,MAAM,CAACC,OAAO,GAAGpC,mBAAmB"},"metadata":{},"sourceType":"script","externalDependencies":[]}