{"ast":null,"code":"'use strict';\n\nconst Action = require('./Action');\nconst {\n  Events\n} = require('../../util/Constants');\nclass GuildDeleteAction extends Action {\n  constructor(client) {\n    super(client);\n    this.deleted = new Map();\n  }\n  handle(data) {\n    const client = this.client;\n    let guild = client.guilds.cache.get(data.id);\n    if (guild) {\n      for (const channel of guild.channels.cache.values()) {\n        if (channel.type === 'text') channel.stopTyping(true);\n      }\n      if (data.unavailable) {\n        // Guild is unavailable\n        guild.available = false;\n\n        /**\n         * Emitted whenever a guild becomes unavailable, likely due to a server outage.\n         * @event Client#guildUnavailable\n         * @param {Guild} guild The guild that has become unavailable\n         */\n        client.emit(Events.GUILD_UNAVAILABLE, guild);\n\n        // Stops the GuildDelete packet thinking a guild was actually deleted,\n        // handles emitting of event itself\n        return {\n          guild: null\n        };\n      }\n      for (const channel of guild.channels.cache.values()) this.client.channels.remove(channel.id);\n      if (guild.voice && guild.voice.connection) guild.voice.connection.disconnect();\n\n      // Delete guild\n      client.guilds.cache.delete(guild.id);\n      guild.deleted = true;\n\n      /**\n       * Emitted whenever a guild kicks the client or the guild is deleted/left.\n       * @event Client#guildDelete\n       * @param {Guild} guild The guild that was deleted\n       */\n      client.emit(Events.GUILD_DELETE, guild);\n      this.deleted.set(guild.id, guild);\n      this.scheduleForDeletion(guild.id);\n    } else {\n      guild = this.deleted.get(data.id) || null;\n    }\n    return {\n      guild\n    };\n  }\n  scheduleForDeletion(id) {\n    this.client.setTimeout(() => this.deleted.delete(id), this.client.options.restWsBridgeTimeout);\n  }\n}\nmodule.exports = GuildDeleteAction;","map":{"version":3,"names":["Action","require","Events","GuildDeleteAction","constructor","client","deleted","Map","handle","data","guild","guilds","cache","get","id","channel","channels","values","type","stopTyping","unavailable","available","emit","GUILD_UNAVAILABLE","remove","voice","connection","disconnect","delete","GUILD_DELETE","set","scheduleForDeletion","setTimeout","options","restWsBridgeTimeout","module","exports"],"sources":["/Users/jessegill/node_modules/discord.js/src/client/actions/GuildDelete.js"],"sourcesContent":["'use strict';\n\nconst Action = require('./Action');\nconst { Events } = require('../../util/Constants');\n\nclass GuildDeleteAction extends Action {\n  constructor(client) {\n    super(client);\n    this.deleted = new Map();\n  }\n\n  handle(data) {\n    const client = this.client;\n\n    let guild = client.guilds.cache.get(data.id);\n    if (guild) {\n      for (const channel of guild.channels.cache.values()) {\n        if (channel.type === 'text') channel.stopTyping(true);\n      }\n\n      if (data.unavailable) {\n        // Guild is unavailable\n        guild.available = false;\n\n        /**\n         * Emitted whenever a guild becomes unavailable, likely due to a server outage.\n         * @event Client#guildUnavailable\n         * @param {Guild} guild The guild that has become unavailable\n         */\n        client.emit(Events.GUILD_UNAVAILABLE, guild);\n\n        // Stops the GuildDelete packet thinking a guild was actually deleted,\n        // handles emitting of event itself\n        return {\n          guild: null,\n        };\n      }\n\n      for (const channel of guild.channels.cache.values()) this.client.channels.remove(channel.id);\n      if (guild.voice && guild.voice.connection) guild.voice.connection.disconnect();\n\n      // Delete guild\n      client.guilds.cache.delete(guild.id);\n      guild.deleted = true;\n\n      /**\n       * Emitted whenever a guild kicks the client or the guild is deleted/left.\n       * @event Client#guildDelete\n       * @param {Guild} guild The guild that was deleted\n       */\n      client.emit(Events.GUILD_DELETE, guild);\n\n      this.deleted.set(guild.id, guild);\n      this.scheduleForDeletion(guild.id);\n    } else {\n      guild = this.deleted.get(data.id) || null;\n    }\n\n    return { guild };\n  }\n\n  scheduleForDeletion(id) {\n    this.client.setTimeout(() => this.deleted.delete(id), this.client.options.restWsBridgeTimeout);\n  }\n}\n\nmodule.exports = GuildDeleteAction;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAU,CAAC;AAClC,MAAM;EAAEC;AAAO,CAAC,GAAGD,OAAO,CAAC,sBAAsB,CAAC;AAElD,MAAME,iBAAiB,SAASH,MAAM,CAAC;EACrCI,WAAW,CAACC,MAAM,EAAE;IAClB,KAAK,CAACA,MAAM,CAAC;IACb,IAAI,CAACC,OAAO,GAAG,IAAIC,GAAG,EAAE;EAC1B;EAEAC,MAAM,CAACC,IAAI,EAAE;IACX,MAAMJ,MAAM,GAAG,IAAI,CAACA,MAAM;IAE1B,IAAIK,KAAK,GAAGL,MAAM,CAACM,MAAM,CAACC,KAAK,CAACC,GAAG,CAACJ,IAAI,CAACK,EAAE,CAAC;IAC5C,IAAIJ,KAAK,EAAE;MACT,KAAK,MAAMK,OAAO,IAAIL,KAAK,CAACM,QAAQ,CAACJ,KAAK,CAACK,MAAM,EAAE,EAAE;QACnD,IAAIF,OAAO,CAACG,IAAI,KAAK,MAAM,EAAEH,OAAO,CAACI,UAAU,CAAC,IAAI,CAAC;MACvD;MAEA,IAAIV,IAAI,CAACW,WAAW,EAAE;QACpB;QACAV,KAAK,CAACW,SAAS,GAAG,KAAK;;QAEvB;AACR;AACA;AACA;AACA;QACQhB,MAAM,CAACiB,IAAI,CAACpB,MAAM,CAACqB,iBAAiB,EAAEb,KAAK,CAAC;;QAE5C;QACA;QACA,OAAO;UACLA,KAAK,EAAE;QACT,CAAC;MACH;MAEA,KAAK,MAAMK,OAAO,IAAIL,KAAK,CAACM,QAAQ,CAACJ,KAAK,CAACK,MAAM,EAAE,EAAE,IAAI,CAACZ,MAAM,CAACW,QAAQ,CAACQ,MAAM,CAACT,OAAO,CAACD,EAAE,CAAC;MAC5F,IAAIJ,KAAK,CAACe,KAAK,IAAIf,KAAK,CAACe,KAAK,CAACC,UAAU,EAAEhB,KAAK,CAACe,KAAK,CAACC,UAAU,CAACC,UAAU,EAAE;;MAE9E;MACAtB,MAAM,CAACM,MAAM,CAACC,KAAK,CAACgB,MAAM,CAAClB,KAAK,CAACI,EAAE,CAAC;MACpCJ,KAAK,CAACJ,OAAO,GAAG,IAAI;;MAEpB;AACN;AACA;AACA;AACA;MACMD,MAAM,CAACiB,IAAI,CAACpB,MAAM,CAAC2B,YAAY,EAAEnB,KAAK,CAAC;MAEvC,IAAI,CAACJ,OAAO,CAACwB,GAAG,CAACpB,KAAK,CAACI,EAAE,EAAEJ,KAAK,CAAC;MACjC,IAAI,CAACqB,mBAAmB,CAACrB,KAAK,CAACI,EAAE,CAAC;IACpC,CAAC,MAAM;MACLJ,KAAK,GAAG,IAAI,CAACJ,OAAO,CAACO,GAAG,CAACJ,IAAI,CAACK,EAAE,CAAC,IAAI,IAAI;IAC3C;IAEA,OAAO;MAAEJ;IAAM,CAAC;EAClB;EAEAqB,mBAAmB,CAACjB,EAAE,EAAE;IACtB,IAAI,CAACT,MAAM,CAAC2B,UAAU,CAAC,MAAM,IAAI,CAAC1B,OAAO,CAACsB,MAAM,CAACd,EAAE,CAAC,EAAE,IAAI,CAACT,MAAM,CAAC4B,OAAO,CAACC,mBAAmB,CAAC;EAChG;AACF;AAEAC,MAAM,CAACC,OAAO,GAAGjC,iBAAiB"},"metadata":{},"sourceType":"script","externalDependencies":[]}