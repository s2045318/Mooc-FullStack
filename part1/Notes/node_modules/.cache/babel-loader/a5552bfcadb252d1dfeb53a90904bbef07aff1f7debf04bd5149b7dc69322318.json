{"ast":null,"code":"'use strict';\n\nconst Action = require('./Action');\nconst {\n  Events\n} = require('../../util/Constants');\nconst Structures = require('../../util/Structures');\nclass VoiceStateUpdate extends Action {\n  handle(data) {\n    const client = this.client;\n    const guild = client.guilds.cache.get(data.guild_id);\n    if (guild) {\n      const VoiceState = Structures.get('VoiceState');\n      // Update the state\n      const oldState = guild.voiceStates.cache.has(data.user_id) ? guild.voiceStates.cache.get(data.user_id)._clone() : new VoiceState(guild, {\n        user_id: data.user_id\n      });\n      const newState = guild.voiceStates.add(data);\n\n      // Get the member\n      let member = guild.members.cache.get(data.user_id);\n      if (member && data.member) {\n        member._patch(data.member);\n      } else if (data.member && data.member.user && data.member.joined_at) {\n        member = guild.members.add(data.member);\n      }\n\n      // Emit event\n      if (member && member.user.id === client.user.id) {\n        client.emit('debug', `[VOICE] received voice state update: ${JSON.stringify(data)}`);\n        client.voice.onVoiceStateUpdate(data);\n      }\n\n      /**\n       * Emitted whenever a member changes voice state - e.g. joins/leaves a channel, mutes/unmutes.\n       * @event Client#voiceStateUpdate\n       * @param {VoiceState} oldState The voice state before the update\n       * @param {VoiceState} newState The voice state after the update\n       */\n      client.emit(Events.VOICE_STATE_UPDATE, oldState, newState);\n    }\n  }\n}\nmodule.exports = VoiceStateUpdate;","map":{"version":3,"names":["Action","require","Events","Structures","VoiceStateUpdate","handle","data","client","guild","guilds","cache","get","guild_id","VoiceState","oldState","voiceStates","has","user_id","_clone","newState","add","member","members","_patch","user","joined_at","id","emit","JSON","stringify","voice","onVoiceStateUpdate","VOICE_STATE_UPDATE","module","exports"],"sources":["/Users/jessegill/node_modules/discord.js/src/client/actions/VoiceStateUpdate.js"],"sourcesContent":["'use strict';\n\nconst Action = require('./Action');\nconst { Events } = require('../../util/Constants');\nconst Structures = require('../../util/Structures');\n\nclass VoiceStateUpdate extends Action {\n  handle(data) {\n    const client = this.client;\n    const guild = client.guilds.cache.get(data.guild_id);\n    if (guild) {\n      const VoiceState = Structures.get('VoiceState');\n      // Update the state\n      const oldState = guild.voiceStates.cache.has(data.user_id)\n        ? guild.voiceStates.cache.get(data.user_id)._clone()\n        : new VoiceState(guild, { user_id: data.user_id });\n\n      const newState = guild.voiceStates.add(data);\n\n      // Get the member\n      let member = guild.members.cache.get(data.user_id);\n      if (member && data.member) {\n        member._patch(data.member);\n      } else if (data.member && data.member.user && data.member.joined_at) {\n        member = guild.members.add(data.member);\n      }\n\n      // Emit event\n      if (member && member.user.id === client.user.id) {\n        client.emit('debug', `[VOICE] received voice state update: ${JSON.stringify(data)}`);\n        client.voice.onVoiceStateUpdate(data);\n      }\n\n      /**\n       * Emitted whenever a member changes voice state - e.g. joins/leaves a channel, mutes/unmutes.\n       * @event Client#voiceStateUpdate\n       * @param {VoiceState} oldState The voice state before the update\n       * @param {VoiceState} newState The voice state after the update\n       */\n      client.emit(Events.VOICE_STATE_UPDATE, oldState, newState);\n    }\n  }\n}\n\nmodule.exports = VoiceStateUpdate;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAU,CAAC;AAClC,MAAM;EAAEC;AAAO,CAAC,GAAGD,OAAO,CAAC,sBAAsB,CAAC;AAClD,MAAME,UAAU,GAAGF,OAAO,CAAC,uBAAuB,CAAC;AAEnD,MAAMG,gBAAgB,SAASJ,MAAM,CAAC;EACpCK,MAAM,CAACC,IAAI,EAAE;IACX,MAAMC,MAAM,GAAG,IAAI,CAACA,MAAM;IAC1B,MAAMC,KAAK,GAAGD,MAAM,CAACE,MAAM,CAACC,KAAK,CAACC,GAAG,CAACL,IAAI,CAACM,QAAQ,CAAC;IACpD,IAAIJ,KAAK,EAAE;MACT,MAAMK,UAAU,GAAGV,UAAU,CAACQ,GAAG,CAAC,YAAY,CAAC;MAC/C;MACA,MAAMG,QAAQ,GAAGN,KAAK,CAACO,WAAW,CAACL,KAAK,CAACM,GAAG,CAACV,IAAI,CAACW,OAAO,CAAC,GACtDT,KAAK,CAACO,WAAW,CAACL,KAAK,CAACC,GAAG,CAACL,IAAI,CAACW,OAAO,CAAC,CAACC,MAAM,EAAE,GAClD,IAAIL,UAAU,CAACL,KAAK,EAAE;QAAES,OAAO,EAAEX,IAAI,CAACW;MAAQ,CAAC,CAAC;MAEpD,MAAME,QAAQ,GAAGX,KAAK,CAACO,WAAW,CAACK,GAAG,CAACd,IAAI,CAAC;;MAE5C;MACA,IAAIe,MAAM,GAAGb,KAAK,CAACc,OAAO,CAACZ,KAAK,CAACC,GAAG,CAACL,IAAI,CAACW,OAAO,CAAC;MAClD,IAAII,MAAM,IAAIf,IAAI,CAACe,MAAM,EAAE;QACzBA,MAAM,CAACE,MAAM,CAACjB,IAAI,CAACe,MAAM,CAAC;MAC5B,CAAC,MAAM,IAAIf,IAAI,CAACe,MAAM,IAAIf,IAAI,CAACe,MAAM,CAACG,IAAI,IAAIlB,IAAI,CAACe,MAAM,CAACI,SAAS,EAAE;QACnEJ,MAAM,GAAGb,KAAK,CAACc,OAAO,CAACF,GAAG,CAACd,IAAI,CAACe,MAAM,CAAC;MACzC;;MAEA;MACA,IAAIA,MAAM,IAAIA,MAAM,CAACG,IAAI,CAACE,EAAE,KAAKnB,MAAM,CAACiB,IAAI,CAACE,EAAE,EAAE;QAC/CnB,MAAM,CAACoB,IAAI,CAAC,OAAO,EAAG,wCAAuCC,IAAI,CAACC,SAAS,CAACvB,IAAI,CAAE,EAAC,CAAC;QACpFC,MAAM,CAACuB,KAAK,CAACC,kBAAkB,CAACzB,IAAI,CAAC;MACvC;;MAEA;AACN;AACA;AACA;AACA;AACA;MACMC,MAAM,CAACoB,IAAI,CAACzB,MAAM,CAAC8B,kBAAkB,EAAElB,QAAQ,EAAEK,QAAQ,CAAC;IAC5D;EACF;AACF;AAEAc,MAAM,CAACC,OAAO,GAAG9B,gBAAgB"},"metadata":{},"sourceType":"script","externalDependencies":[]}