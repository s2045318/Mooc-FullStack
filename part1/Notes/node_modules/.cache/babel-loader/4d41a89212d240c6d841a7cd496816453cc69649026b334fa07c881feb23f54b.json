{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Collection = void 0;\n/**\n * A Map with additional utility methods. This is used throughout discord.js rather than Arrays for anything that has\n * an ID, for significantly improved performance and ease-of-use.\n * @extends {Map}\n * @property {number} size - The amount of elements in this collection.\n */\nclass Collection extends Map {\n  constructor(entries) {\n    super(entries);\n    /**\n     * Cached array for the `array()` method - will be reset to `null` whenever `set()` or `delete()` are called\n     * @name Collection#_array\n     * @type {?Array}\n     * @private\n     */\n    Object.defineProperty(this, '_array', {\n      value: null,\n      writable: true,\n      configurable: true\n    });\n    /**\n     * Cached array for the `keyArray()` method - will be reset to `null` whenever `set()` or `delete()` are called\n     * @name Collection#_keyArray\n     * @type {?Array}\n     * @private\n     */\n    Object.defineProperty(this, '_keyArray', {\n      value: null,\n      writable: true,\n      configurable: true\n    });\n  }\n  /**\n   * Identical to [Map.get()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get).\n   * Gets an element with the specified key, and returns its value, or `undefined` if the element does not exist.\n   * @param {*} key - The key to get from this collection\n   * @returns {* | undefined}\n   */\n  get(key) {\n    return super.get(key);\n  }\n  /**\n   * Identical to [Map.set()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set).\n   * Sets a new element in the collection with the specified key and value.\n   * @param {*} key - The key of the element to add\n   * @param {*} value - The value of the element to add\n   * @returns {Collection}\n   */\n  set(key, value) {\n    this._array = null;\n    this._keyArray = null;\n    return super.set(key, value);\n  }\n  /**\n   * Identical to [Map.has()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has).\n   * Checks if an element exists in the collection.\n   * @param {*} key - The key of the element to check for\n   * @returns {boolean} `true` if the element exists, `false` if it does not exist.\n   */\n  has(key) {\n    return super.has(key);\n  }\n  /**\n   * Identical to [Map.delete()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete).\n   * Deletes an element from the collection.\n   * @param {*} key - The key to delete from the collection\n   * @returns {boolean} `true` if the element was removed, `false` if the element does not exist.\n   */\n  delete(key) {\n    this._array = null;\n    this._keyArray = null;\n    return super.delete(key);\n  }\n  /**\n   * Identical to [Map.clear()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/clear).\n   * Removes all elements from the collection.\n   * @returns {undefined}\n   */\n  clear() {\n    return super.clear();\n  }\n  /**\n   * Creates an ordered array of the values of this collection, and caches it internally. The array will only be\n   * reconstructed if an item is added to or removed from the collection, or if you change the length of the array\n   * itself. If you don't want this caching behavior, use `[...collection.values()]` or\n   * `Array.from(collection.values())` instead.\n   * @returns {Array}\n   */\n  array() {\n    if (!this._array || this._array.length !== this.size) this._array = [...this.values()];\n    return this._array;\n  }\n  /**\n   * Creates an ordered array of the keys of this collection, and caches it internally. The array will only be\n   * reconstructed if an item is added to or removed from the collection, or if you change the length of the array\n   * itself. If you don't want this caching behavior, use `[...collection.keys()]` or\n   * `Array.from(collection.keys())` instead.\n   * @returns {Array}\n   */\n  keyArray() {\n    if (!this._keyArray || this._keyArray.length !== this.size) this._keyArray = [...this.keys()];\n    return this._keyArray;\n  }\n  first(amount) {\n    if (typeof amount === 'undefined') return this.values().next().value;\n    if (amount < 0) return this.last(amount * -1);\n    amount = Math.min(this.size, amount);\n    const iter = this.values();\n    return Array.from({\n      length: amount\n    }, () => iter.next().value);\n  }\n  firstKey(amount) {\n    if (typeof amount === 'undefined') return this.keys().next().value;\n    if (amount < 0) return this.lastKey(amount * -1);\n    amount = Math.min(this.size, amount);\n    const iter = this.keys();\n    return Array.from({\n      length: amount\n    }, () => iter.next().value);\n  }\n  last(amount) {\n    const arr = this.array();\n    if (typeof amount === 'undefined') return arr[arr.length - 1];\n    if (amount < 0) return this.first(amount * -1);\n    if (!amount) return [];\n    return arr.slice(-amount);\n  }\n  lastKey(amount) {\n    const arr = this.keyArray();\n    if (typeof amount === 'undefined') return arr[arr.length - 1];\n    if (amount < 0) return this.firstKey(amount * -1);\n    if (!amount) return [];\n    return arr.slice(-amount);\n  }\n  random(amount) {\n    let arr = this.array();\n    if (typeof amount === 'undefined') return arr[Math.floor(Math.random() * arr.length)];\n    if (arr.length === 0 || !amount) return [];\n    arr = arr.slice();\n    return Array.from({\n      length: amount\n    }, () => arr.splice(Math.floor(Math.random() * arr.length), 1)[0]);\n  }\n  randomKey(amount) {\n    let arr = this.keyArray();\n    if (typeof amount === 'undefined') return arr[Math.floor(Math.random() * arr.length)];\n    if (arr.length === 0 || !amount) return [];\n    arr = arr.slice();\n    return Array.from({\n      length: amount\n    }, () => arr.splice(Math.floor(Math.random() * arr.length), 1)[0]);\n  }\n  find(fn, thisArg) {\n    if (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) return val;\n    }\n    return undefined;\n  }\n  findKey(fn, thisArg) {\n    if (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) return key;\n    }\n    return undefined;\n  }\n  sweep(fn, thisArg) {\n    if (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n    const previousSize = this.size;\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) this.delete(key);\n    }\n    return previousSize - this.size;\n  }\n  filter(fn, thisArg) {\n    if (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n    const results = new this.constructor[Symbol.species]();\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) results.set(key, val);\n    }\n    return results;\n  }\n  partition(fn, thisArg) {\n    if (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n    // TODO: consider removing the <K, V> from the constructors after TS 3.7.0 is released, as it infers it\n    const results = [new this.constructor[Symbol.species](), new this.constructor[Symbol.species]()];\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) {\n        results[0].set(key, val);\n      } else {\n        results[1].set(key, val);\n      }\n    }\n    return results;\n  }\n  flatMap(fn, thisArg) {\n    const collections = this.map(fn, thisArg);\n    return new this.constructor[Symbol.species]().concat(...collections);\n  }\n  map(fn, thisArg) {\n    if (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n    const iter = this.entries();\n    return Array.from({\n      length: this.size\n    }, () => {\n      const [key, value] = iter.next().value;\n      return fn(value, key, this);\n    });\n  }\n  mapValues(fn, thisArg) {\n    if (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n    const coll = new this.constructor[Symbol.species]();\n    for (const [key, val] of this) coll.set(key, fn(val, key, this));\n    return coll;\n  }\n  some(fn, thisArg) {\n    if (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) return true;\n    }\n    return false;\n  }\n  every(fn, thisArg) {\n    if (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n    for (const [key, val] of this) {\n      if (!fn(val, key, this)) return false;\n    }\n    return true;\n  }\n  /**\n   * Applies a function to produce a single value. Identical in behavior to\n   * [Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).\n   * @param {Function} fn Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,\n   * and `collection`\n   * @param {*} [initialValue] Starting value for the accumulator\n   * @returns {*}\n   * @example collection.reduce((acc, guild) => acc + guild.memberCount, 0);\n   */\n  reduce(fn, initialValue) {\n    let accumulator;\n    if (typeof initialValue !== 'undefined') {\n      accumulator = initialValue;\n      for (const [key, val] of this) accumulator = fn(accumulator, val, key, this);\n      return accumulator;\n    }\n    let first = true;\n    for (const [key, val] of this) {\n      if (first) {\n        accumulator = val;\n        first = false;\n        continue;\n      }\n      accumulator = fn(accumulator, val, key, this);\n    }\n    // No items iterated.\n    if (first) {\n      throw new TypeError('Reduce of empty collection with no initial value');\n    }\n    return accumulator;\n  }\n  each(fn, thisArg) {\n    this.forEach(fn, thisArg);\n    return this;\n  }\n  tap(fn, thisArg) {\n    if (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n    fn(this);\n    return this;\n  }\n  /**\n   * Creates an identical shallow copy of this collection.\n   * @returns {Collection}\n   * @example const newColl = someColl.clone();\n   */\n  clone() {\n    return new this.constructor[Symbol.species](this);\n  }\n  /**\n   * Combines this collection with others into a new collection. None of the source collections are modified.\n   * @param {...Collection} collections Collections to merge\n   * @returns {Collection}\n   * @example const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);\n   */\n  concat() {\n    const newColl = this.clone();\n    for (var _len = arguments.length, collections = new Array(_len), _key = 0; _key < _len; _key++) {\n      collections[_key] = arguments[_key];\n    }\n    for (const coll of collections) {\n      for (const [key, val] of coll) newColl.set(key, val);\n    }\n    return newColl;\n  }\n  /**\n   * Checks if this collection shares identical items with another.\n   * This is different to checking for equality using equal-signs, because\n   * the collections may be different objects, but contain the same data.\n   * @param {Collection} collection Collection to compare with\n   * @returns {boolean} Whether the collections have identical contents\n   */\n  equals(collection) {\n    if (!collection) return false;\n    if (this === collection) return true;\n    if (this.size !== collection.size) return false;\n    for (const [key, value] of this) {\n      if (!collection.has(key) || value !== collection.get(key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * The sort method sorts the items of a collection in place and returns it.\n   * The sort is not necessarily stable in Node 10 or older.\n   * The default sort order is according to string Unicode code points.\n   * @param {Function} [compareFunction] Specifies a function that defines the sort order.\n   * If omitted, the collection is sorted according to each character's Unicode code point value,\n   * according to the string conversion of each element.\n   * @returns {Collection}\n   * @example collection.sort((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);\n   */\n  sort() {\n    let compareFunction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (x, y) => Number(x > y) || Number(x === y) - 1;\n    const entries = [...this.entries()];\n    entries.sort((a, b) => compareFunction(a[1], b[1], a[0], b[0]));\n    // Perform clean-up\n    super.clear();\n    this._array = null;\n    this._keyArray = null;\n    // Set the new entries\n    for (const [k, v] of entries) {\n      super.set(k, v);\n    }\n    return this;\n  }\n  /**\n   * The intersect method returns a new structure containing items where the keys are present in both original structures.\n   * @param {Collection} other The other Collection to filter against\n   * @returns {Collection}\n   */\n  intersect(other) {\n    return other.filter((_, k) => this.has(k));\n  }\n  /**\n   * The difference method returns a new structure containing items where the key is present in one of the original structures but not the other.\n   * @param {Collection} other The other Collection to filter against\n   * @returns {Collection}\n   */\n  difference(other) {\n    return other.filter((_, k) => !this.has(k)).concat(this.filter((_, k) => !other.has(k)));\n  }\n  /**\n   * The sorted method sorts the items of a collection and returns it.\n   * The sort is not necessarily stable in Node 10 or older.\n   * The default sort order is according to string Unicode code points.\n   * @param {Function} [compareFunction] Specifies a function that defines the sort order.\n   * If omitted, the collection is sorted according to each character's Unicode code point value,\n   * according to the string conversion of each element.\n   * @returns {Collection}\n   * @example collection.sorted((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);\n   */\n  sorted() {\n    let compareFunction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (x, y) => Number(x > y) || Number(x === y) - 1;\n    return new this.constructor[Symbol.species]([...this.entries()]).sort((av, bv, ak, bk) => compareFunction(av, bv, ak, bk));\n  }\n}\nexports.Collection = Collection;\nCollection.default = Collection;\nmodule.exports = Collection;\nexports.default = Collection;","map":{"version":3,"mappings":"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","names":["Collection","Map","constructor","entries","Object","defineProperty","value","writable","configurable","get","key","set","_array","_keyArray","has","delete","clear","array","length","size","values","keyArray","keys","first","amount","next","last","Math","min","iter","Array","from","firstKey","lastKey","arr","slice","random","floor","splice","randomKey","find","fn","thisArg","bind","val","undefined","findKey","sweep","previousSize","filter","results","Symbol","species","partition","flatMap","collections","map","concat","mapValues","coll","some","every","reduce","initialValue","accumulator","TypeError","each","forEach","tap","clone","newColl","equals","collection","sort","compareFunction","x","y","Number","a","b","k","v","intersect","other","_","difference","sorted","av","bv","ak","bk","exports","module"],"sources":["/index.ts"],"sourcesContent":["export interface CollectionConstructor {\n\tnew(): Collection<unknown, unknown>;\n\tnew<K, V>(entries?: ReadonlyArray<readonly [K, V]> | null): Collection<K, V>;\n\tnew<K, V>(iterable: Iterable<readonly [K, V]>): Collection<K, V>;\n\treadonly prototype: Collection<unknown, unknown>;\n\treadonly [Symbol.species]: CollectionConstructor;\n}\n\n/**\n * A Map with additional utility methods. This is used throughout discord.js rather than Arrays for anything that has\n * an ID, for significantly improved performance and ease-of-use.\n * @extends {Map}\n * @property {number} size - The amount of elements in this collection.\n */\nclass Collection<K, V> extends Map<K, V> {\n\tprivate _array!: V[] | null;\n\tprivate _keyArray!: K[] | null;\n\tpublic static readonly default: typeof Collection = Collection;\n\tpublic ['constructor']: typeof Collection;\n\n\tpublic constructor(entries?: ReadonlyArray<readonly [K, V]> | null) {\n\t\tsuper(entries);\n\n\t\t/**\n\t\t * Cached array for the `array()` method - will be reset to `null` whenever `set()` or `delete()` are called\n\t\t * @name Collection#_array\n\t\t * @type {?Array}\n\t\t * @private\n\t\t */\n\t\tObject.defineProperty(this, '_array', { value: null, writable: true, configurable: true });\n\n\t\t/**\n\t\t * Cached array for the `keyArray()` method - will be reset to `null` whenever `set()` or `delete()` are called\n\t\t * @name Collection#_keyArray\n\t\t * @type {?Array}\n\t\t * @private\n\t\t */\n\t\tObject.defineProperty(this, '_keyArray', { value: null, writable: true, configurable: true });\n\t}\n\n\t/**\n\t * Identical to [Map.get()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get).\n\t * Gets an element with the specified key, and returns its value, or `undefined` if the element does not exist.\n\t * @param {*} key - The key to get from this collection\n\t * @returns {* | undefined}\n\t */\n\tpublic get(key: K): V | undefined {\n\t\treturn super.get(key);\n\t}\n\n\t/**\n\t * Identical to [Map.set()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set).\n\t * Sets a new element in the collection with the specified key and value.\n\t * @param {*} key - The key of the element to add\n\t * @param {*} value - The value of the element to add\n\t * @returns {Collection}\n\t */\n\tpublic set(key: K, value: V): this {\n\t\tthis._array = null;\n\t\tthis._keyArray = null;\n\t\treturn super.set(key, value);\n\t}\n\n\t/**\n\t * Identical to [Map.has()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has).\n\t * Checks if an element exists in the collection.\n\t * @param {*} key - The key of the element to check for\n\t * @returns {boolean} `true` if the element exists, `false` if it does not exist.\n\t */\n\tpublic has(key: K): boolean {\n\t\treturn super.has(key);\n\t}\n\n\t/**\n\t * Identical to [Map.delete()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete).\n\t * Deletes an element from the collection.\n\t * @param {*} key - The key to delete from the collection\n\t * @returns {boolean} `true` if the element was removed, `false` if the element does not exist.\n\t */\n\tpublic delete(key: K): boolean {\n\t\tthis._array = null;\n\t\tthis._keyArray = null;\n\t\treturn super.delete(key);\n\t}\n\n\t/**\n\t * Identical to [Map.clear()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/clear).\n\t * Removes all elements from the collection.\n\t * @returns {undefined}\n\t */\n\tpublic clear(): void {\n\t\treturn super.clear();\n\t}\n\n\t/**\n\t * Creates an ordered array of the values of this collection, and caches it internally. The array will only be\n\t * reconstructed if an item is added to or removed from the collection, or if you change the length of the array\n\t * itself. If you don't want this caching behavior, use `[...collection.values()]` or\n\t * `Array.from(collection.values())` instead.\n\t * @returns {Array}\n\t */\n\tpublic array(): V[] {\n\t\tif (!this._array || this._array.length !== this.size) this._array = [...this.values()];\n\t\treturn this._array;\n\t}\n\n\t/**\n\t * Creates an ordered array of the keys of this collection, and caches it internally. The array will only be\n\t * reconstructed if an item is added to or removed from the collection, or if you change the length of the array\n\t * itself. If you don't want this caching behavior, use `[...collection.keys()]` or\n\t * `Array.from(collection.keys())` instead.\n\t * @returns {Array}\n\t */\n\tpublic keyArray(): K[] {\n\t\tif (!this._keyArray || this._keyArray.length !== this.size) this._keyArray = [...this.keys()];\n\t\treturn this._keyArray;\n\t}\n\n\t/**\n\t * Obtains the first value(s) in this collection.\n\t * @param {number} [amount] Amount of values to obtain from the beginning\n\t * @returns {*|Array<*>} A single value if no amount is provided or an array of values, starting from the end if\n\t * amount is negative\n\t */\n\tpublic first(): V | undefined;\n\tpublic first(amount: number): V[];\n\tpublic first(amount?: number): V | V[] | undefined {\n\t\tif (typeof amount === 'undefined') return this.values().next().value;\n\t\tif (amount < 0) return this.last(amount * -1);\n\t\tamount = Math.min(this.size, amount);\n\t\tconst iter = this.values();\n\t\treturn Array.from({ length: amount }, (): V => iter.next().value);\n\t}\n\n\t/**\n\t * Obtains the first key(s) in this collection.\n\t * @param {number} [amount] Amount of keys to obtain from the beginning\n\t * @returns {*|Array<*>} A single key if no amount is provided or an array of keys, starting from the end if\n\t * amount is negative\n\t */\n\tpublic firstKey(): K | undefined;\n\tpublic firstKey(amount: number): K[];\n\tpublic firstKey(amount?: number): K | K[] | undefined {\n\t\tif (typeof amount === 'undefined') return this.keys().next().value;\n\t\tif (amount < 0) return this.lastKey(amount * -1);\n\t\tamount = Math.min(this.size, amount);\n\t\tconst iter = this.keys();\n\t\treturn Array.from({ length: amount }, (): K => iter.next().value);\n\t}\n\n\t/**\n\t * Obtains the last value(s) in this collection. This relies on {@link Collection#array}, and thus the caching\n\t * mechanism applies here as well.\n\t * @param {number} [amount] Amount of values to obtain from the end\n\t * @returns {*|Array<*>} A single value if no amount is provided or an array of values, starting from the start if\n\t * amount is negative\n\t */\n\tpublic last(): V | undefined;\n\tpublic last(amount: number): V[];\n\tpublic last(amount?: number): V | V[] | undefined {\n\t\tconst arr = this.array();\n\t\tif (typeof amount === 'undefined') return arr[arr.length - 1];\n\t\tif (amount < 0) return this.first(amount * -1);\n\t\tif (!amount) return [];\n\t\treturn arr.slice(-amount);\n\t}\n\n\t/**\n\t * Obtains the last key(s) in this collection. This relies on {@link Collection#keyArray}, and thus the caching\n\t * mechanism applies here as well.\n\t * @param {number} [amount] Amount of keys to obtain from the end\n\t * @returns {*|Array<*>} A single key if no amount is provided or an array of keys, starting from the start if\n\t * amount is negative\n\t */\n\tpublic lastKey(): K | undefined;\n\tpublic lastKey(amount: number): K[];\n\tpublic lastKey(amount?: number): K | K[] | undefined {\n\t\tconst arr = this.keyArray();\n\t\tif (typeof amount === 'undefined') return arr[arr.length - 1];\n\t\tif (amount < 0) return this.firstKey(amount * -1);\n\t\tif (!amount) return [];\n\t\treturn arr.slice(-amount);\n\t}\n\n\t/**\n\t * Obtains unique random value(s) from this collection. This relies on {@link Collection#array}, and thus the caching\n\t * mechanism applies here as well.\n\t * @param {number} [amount] Amount of values to obtain randomly\n\t * @returns {*|Array<*>} A single value if no amount is provided or an array of values\n\t */\n\tpublic random(): V;\n\tpublic random(amount: number): V[];\n\tpublic random(amount?: number): V | V[] {\n\t\tlet arr = this.array();\n\t\tif (typeof amount === 'undefined') return arr[Math.floor(Math.random() * arr.length)];\n\t\tif (arr.length === 0 || !amount) return [];\n\t\tarr = arr.slice();\n\t\treturn Array.from({ length: amount }, (): V => arr.splice(Math.floor(Math.random() * arr.length), 1)[0]);\n\t}\n\n\t/**\n\t * Obtains unique random key(s) from this collection. This relies on {@link Collection#keyArray}, and thus the caching\n\t * mechanism applies here as well.\n\t * @param {number} [amount] Amount of keys to obtain randomly\n\t * @returns {*|Array<*>} A single key if no amount is provided or an array\n\t */\n\tpublic randomKey(): K;\n\tpublic randomKey(amount: number): K[];\n\tpublic randomKey(amount?: number): K | K[] {\n\t\tlet arr = this.keyArray();\n\t\tif (typeof amount === 'undefined') return arr[Math.floor(Math.random() * arr.length)];\n\t\tif (arr.length === 0 || !amount) return [];\n\t\tarr = arr.slice();\n\t\treturn Array.from({ length: amount }, (): K => arr.splice(Math.floor(Math.random() * arr.length), 1)[0]);\n\t}\n\n\t/**\n\t * Searches for a single item where the given function returns a truthy value. This behaves like\n\t * [Array.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).\n\t * <warn>All collections used in Discord.js are mapped using their `id` property, and if you want to find by id you\n\t * should use the `get` method. See\n\t * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get) for details.</warn>\n\t * @param {Function} fn The function to test with (should return boolean)\n\t * @param {*} [thisArg] Value to use as `this` when executing function\n\t * @returns {*}\n\t * @example collection.find(user => user.username === 'Bob');\n\t */\n\tpublic find(fn: (value: V, key: K, collection: this) => boolean): V | undefined;\n\tpublic find<T>(fn: (this: T, value: V, key: K, collection: this) => boolean, thisArg: T): V | undefined;\n\tpublic find(fn: (value: V, key: K, collection: this) => boolean, thisArg?: unknown): V | undefined {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tfor (const [key, val] of this) {\n\t\t\tif (fn(val, key, this)) return val;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Searches for the key of a single item where the given function returns a truthy value. This behaves like\n\t * [Array.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex),\n\t * but returns the key rather than the positional index.\n\t * @param {Function} fn The function to test with (should return boolean)\n\t * @param {*} [thisArg] Value to use as `this` when executing function\n\t * @returns {*}\n\t * @example collection.findKey(user => user.username === 'Bob');\n\t */\n\tpublic findKey(fn: (value: V, key: K, collection: this) => boolean): K | undefined;\n\tpublic findKey<T>(fn: (this: T, value: V, key: K, collection: this) => boolean, thisArg: T): K | undefined;\n\tpublic findKey(fn: (value: V, key: K, collection: this) => boolean, thisArg?: unknown): K | undefined {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tfor (const [key, val] of this) {\n\t\t\tif (fn(val, key, this)) return key;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Removes items that satisfy the provided filter function.\n\t * @param {Function} fn Function used to test (should return a boolean)\n\t * @param {*} [thisArg] Value to use as `this` when executing function\n\t * @returns {number} The number of removed entries\n\t */\n\tpublic sweep(fn: (value: V, key: K, collection: this) => boolean): number;\n\tpublic sweep<T>(fn: (this: T, value: V, key: K, collection: this) => boolean, thisArg: T): number;\n\tpublic sweep(fn: (value: V, key: K, collection: this) => boolean, thisArg?: unknown): number {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tconst previousSize = this.size;\n\t\tfor (const [key, val] of this) {\n\t\t\tif (fn(val, key, this)) this.delete(key);\n\t\t}\n\t\treturn previousSize - this.size;\n\t}\n\n\t/**\n\t * Identical to\n\t * [Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n\t * but returns a Collection instead of an Array.\n\t * @param {Function} fn The function to test with (should return boolean)\n\t * @param {*} [thisArg] Value to use as `this` when executing function\n\t * @returns {Collection}\n\t * @example collection.filter(user => user.username === 'Bob');\n\t */\n\tpublic filter(fn: (value: V, key: K, collection: this) => boolean): this;\n\tpublic filter<T>(fn: (this: T, value: V, key: K, collection: this) => boolean, thisArg: T): this;\n\tpublic filter(fn: (value: V, key: K, collection: this) => boolean, thisArg?: unknown): this {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tconst results = new this.constructor[Symbol.species]<K, V>() as this;\n\t\tfor (const [key, val] of this) {\n\t\t\tif (fn(val, key, this)) results.set(key, val);\n\t\t}\n\t\treturn results;\n\t}\n\n\t/**\n\t * Partitions the collection into two collections where the first collection\n\t * contains the items that passed and the second contains the items that failed.\n\t * @param {Function} fn Function used to test (should return a boolean)\n\t * @param {*} [thisArg] Value to use as `this` when executing function\n\t * @returns {Collection[]}\n\t * @example const [big, small] = collection.partition(guild => guild.memberCount > 250);\n\t */\n\tpublic partition(fn: (value: V, key: K, collection: this) => boolean): [this, this];\n\tpublic partition<T>(fn: (this: T, value: V, key: K, collection: this) => boolean, thisArg: T): [this, this];\n\tpublic partition(fn: (value: V, key: K, collection: this) => boolean, thisArg?: unknown): [this, this] {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\t// TODO: consider removing the <K, V> from the constructors after TS 3.7.0 is released, as it infers it\n\t\tconst results: [this, this] = [new this.constructor[Symbol.species]<K, V>() as this, new this.constructor[Symbol.species]<K, V>() as this];\n\t\tfor (const [key, val] of this) {\n\t\t\tif (fn(val, key, this)) {\n\t\t\t\tresults[0].set(key, val);\n\t\t\t} else {\n\t\t\t\tresults[1].set(key, val);\n\t\t\t}\n\t\t}\n\t\treturn results;\n\t}\n\n\t/**\n\t * Maps each item into a Collection, then joins the results into a single Collection. Identical in behavior to\n\t * [Array.flatMap()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap).\n\t * @param {Function} fn Function that produces a new Collection\n\t * @param {*} [thisArg] Value to use as `this` when executing function\n\t * @returns {Collection}\n\t * @example collection.flatMap(guild => guild.members.cache);\n\t */\n\tpublic flatMap<T>(fn: (value: V, key: K, collection: this) => Collection<K, T>): Collection<K, T>;\n\tpublic flatMap<T, This>(fn: (this: This, value: V, key: K, collection: this) => Collection<K, T>, thisArg: This): Collection<K, T>;\n\tpublic flatMap<T>(fn: (value: V, key: K, collection: this) => Collection<K, T>, thisArg?: unknown): Collection<K, T> {\n\t\tconst collections = this.map(fn, thisArg);\n\t\treturn (new this.constructor[Symbol.species]<K, T>() as Collection<K, T>).concat(...collections);\n\t}\n\n\t/**\n\t * Maps each item to another value into an array. Identical in behavior to\n\t * [Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).\n\t * @param {Function} fn Function that produces an element of the new array, taking three arguments\n\t * @param {*} [thisArg] Value to use as `this` when executing function\n\t * @returns {Array}\n\t * @example collection.map(user => user.tag);\n\t */\n\tpublic map<T>(fn: (value: V, key: K, collection: this) => T): T[];\n\tpublic map<This, T>(fn: (this: This, value: V, key: K, collection: this) => T, thisArg: This): T[];\n\tpublic map<T>(fn: (value: V, key: K, collection: this) => T, thisArg?: unknown): T[] {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tconst iter = this.entries();\n\t\treturn Array.from({ length: this.size }, (): T => {\n\t\t\tconst [key, value] = iter.next().value;\n\t\t\treturn fn(value, key, this);\n\t\t});\n\t}\n\n\t/**\n\t * Maps each item to another value into a collection. Identical in behavior to\n\t * [Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).\n\t * @param {Function} fn Function that produces an element of the new collection, taking three arguments\n\t * @param {*} [thisArg] Value to use as `this` when executing function\n\t * @returns {Collection}\n\t * @example collection.mapValues(user => user.tag);\n\t */\n\tpublic mapValues<T>(fn: (value: V, key: K, collection: this) => T): Collection<K, T>;\n\tpublic mapValues<This, T>(fn: (this: This, value: V, key: K, collection: this) => T, thisArg: This): Collection<K, T>;\n\tpublic mapValues<T>(fn: (value: V, key: K, collection: this) => T, thisArg?: unknown): Collection<K, T> {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tconst coll = new this.constructor[Symbol.species]<K, T>() as Collection<K, T>;\n\t\tfor (const [key, val] of this) coll.set(key, fn(val, key, this));\n\t\treturn coll;\n\t}\n\n\t/**\n\t * Checks if there exists an item that passes a test. Identical in behavior to\n\t * [Array.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).\n\t * @param {Function} fn Function used to test (should return a boolean)\n\t * @param {*} [thisArg] Value to use as `this` when executing function\n\t * @returns {boolean}\n\t * @example collection.some(user => user.discriminator === '0000');\n\t */\n\tpublic some(fn: (value: V, key: K, collection: this) => boolean): boolean;\n\tpublic some<T>(fn: (this: T, value: V, key: K, collection: this) => boolean, thisArg: T): boolean;\n\tpublic some(fn: (value: V, key: K, collection: this) => boolean, thisArg?: unknown): boolean {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tfor (const [key, val] of this) {\n\t\t\tif (fn(val, key, this)) return true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Checks if all items passes a test. Identical in behavior to\n\t * [Array.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).\n\t * @param {Function} fn Function used to test (should return a boolean)\n\t * @param {*} [thisArg] Value to use as `this` when executing function\n\t * @returns {boolean}\n\t * @example collection.every(user => !user.bot);\n\t */\n\tpublic every(fn: (value: V, key: K, collection: this) => boolean): boolean;\n\tpublic every<T>(fn: (this: T, value: V, key: K, collection: this) => boolean, thisArg: T): boolean;\n\tpublic every(fn: (value: V, key: K, collection: this) => boolean, thisArg?: unknown): boolean {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tfor (const [key, val] of this) {\n\t\t\tif (!fn(val, key, this)) return false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Applies a function to produce a single value. Identical in behavior to\n\t * [Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).\n\t * @param {Function} fn Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,\n\t * and `collection`\n\t * @param {*} [initialValue] Starting value for the accumulator\n\t * @returns {*}\n\t * @example collection.reduce((acc, guild) => acc + guild.memberCount, 0);\n\t */\n\tpublic reduce<T>(fn: (accumulator: T, value: V, key: K, collection: this) => T, initialValue?: T): T {\n\t\tlet accumulator!: T;\n\n\t\tif (typeof initialValue !== 'undefined') {\n\t\t\taccumulator = initialValue;\n\t\t\tfor (const [key, val] of this) accumulator = fn(accumulator, val, key, this);\n\t\t\treturn accumulator;\n\t\t}\n\t\tlet first = true;\n\t\tfor (const [key, val] of this) {\n\t\t\tif (first) {\n\t\t\t\taccumulator = val as unknown as T;\n\t\t\t\tfirst = false;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\taccumulator = fn(accumulator, val, key, this);\n\t\t}\n\n\t\t// No items iterated.\n\t\tif (first) {\n\t\t\tthrow new TypeError('Reduce of empty collection with no initial value');\n\t\t}\n\n\t\treturn accumulator;\n\t}\n\n\t/**\n\t * Identical to\n\t * [Map.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach),\n\t * but returns the collection instead of undefined.\n\t * @param {Function} fn Function to execute for each element\n\t * @param {*} [thisArg] Value to use as `this` when executing function\n\t * @returns {Collection}\n\t * @example\n\t * collection\n\t *  .each(user => console.log(user.username))\n\t *  .filter(user => user.bot)\n\t *  .each(user => console.log(user.username));\n\t */\n\tpublic each(fn: (value: V, key: K, collection: this) => void): this;\n\tpublic each<T>(fn: (this: T, value: V, key: K, collection: this) => void, thisArg: T): this;\n\tpublic each(fn: (value: V, key: K, collection: this) => void, thisArg?: unknown): this {\n\t\tthis.forEach(fn as (value: V, key: K, map: Map<K, V>) => void, thisArg);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Runs a function on the collection and returns the collection.\n\t * @param {Function} fn Function to execute\n\t * @param {*} [thisArg] Value to use as `this` when executing function\n\t * @returns {Collection}\n\t * @example\n\t * collection\n\t *  .tap(coll => console.log(coll.size))\n\t *  .filter(user => user.bot)\n\t *  .tap(coll => console.log(coll.size))\n\t */\n\tpublic tap(fn: (collection: this) => void): this;\n\tpublic tap<T>(fn: (this: T, collection: this) => void, thisArg: T): this;\n\tpublic tap(fn: (collection: this) => void, thisArg?: unknown): this {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tfn(this);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Creates an identical shallow copy of this collection.\n\t * @returns {Collection}\n\t * @example const newColl = someColl.clone();\n\t */\n\tpublic clone(): this {\n\t\treturn new this.constructor[Symbol.species](this) as this;\n\t}\n\n\t/**\n\t * Combines this collection with others into a new collection. None of the source collections are modified.\n\t * @param {...Collection} collections Collections to merge\n\t * @returns {Collection}\n\t * @example const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);\n\t */\n\tpublic concat(...collections: Collection<K, V>[]): this {\n\t\tconst newColl = this.clone();\n\t\tfor (const coll of collections) {\n\t\t\tfor (const [key, val] of coll) newColl.set(key, val);\n\t\t}\n\t\treturn newColl;\n\t}\n\n\t/**\n\t * Checks if this collection shares identical items with another.\n\t * This is different to checking for equality using equal-signs, because\n\t * the collections may be different objects, but contain the same data.\n\t * @param {Collection} collection Collection to compare with\n\t * @returns {boolean} Whether the collections have identical contents\n\t */\n\tpublic equals(collection: Collection<K, V>): boolean {\n\t\tif (!collection) return false;\n\t\tif (this === collection) return true;\n\t\tif (this.size !== collection.size) return false;\n\t\tfor (const [key, value] of this) {\n\t\t\tif (!collection.has(key) || value !== collection.get(key)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * The sort method sorts the items of a collection in place and returns it.\n\t * The sort is not necessarily stable in Node 10 or older.\n\t * The default sort order is according to string Unicode code points.\n\t * @param {Function} [compareFunction] Specifies a function that defines the sort order.\n\t * If omitted, the collection is sorted according to each character's Unicode code point value,\n\t * according to the string conversion of each element.\n\t * @returns {Collection}\n\t * @example collection.sort((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);\n\t */\n\tpublic sort(compareFunction: (firstValue: V, secondValue: V, firstKey: K, secondKey: K) => number = (x, y): number => Number(x > y) || Number(x === y) - 1): this {\n\t\tconst entries = [...this.entries()];\n\t\tentries.sort((a, b): number => compareFunction(a[1], b[1], a[0], b[0]));\n\n\t\t// Perform clean-up\n\t\tsuper.clear();\n\t\tthis._array = null;\n\t\tthis._keyArray = null;\n\n\t\t// Set the new entries\n\t\tfor (const [k, v] of entries) {\n\t\t\tsuper.set(k, v);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * The intersect method returns a new structure containing items where the keys are present in both original structures.\n\t * @param {Collection} other The other Collection to filter against\n\t * @returns {Collection}\n\t */\n\tpublic intersect(other: Collection<K, V>): Collection<K, V> {\n\t\treturn other.filter((_, k) => this.has(k));\n\t}\n\n\t/**\n\t * The difference method returns a new structure containing items where the key is present in one of the original structures but not the other.\n\t * @param {Collection} other The other Collection to filter against\n\t * @returns {Collection}\n\t */\n\tpublic difference(other: Collection<K, V>): Collection<K, V> {\n\t\treturn other.filter((_, k) => !this.has(k)).concat(this.filter((_, k) => !other.has(k)));\n\t}\n\n\t/**\n\t * The sorted method sorts the items of a collection and returns it.\n\t * The sort is not necessarily stable in Node 10 or older.\n\t * The default sort order is according to string Unicode code points.\n\t * @param {Function} [compareFunction] Specifies a function that defines the sort order.\n\t * If omitted, the collection is sorted according to each character's Unicode code point value,\n\t * according to the string conversion of each element.\n\t * @returns {Collection}\n\t * @example collection.sorted((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);\n\t */\n\tpublic sorted(compareFunction: (firstValue: V, secondValue: V, firstKey: K, secondKey: K) => number = (x, y): number => Number(x > y) || Number(x === y) - 1): this {\n\t\treturn (new this.constructor[Symbol.species]([...this.entries()]) as this)\n\t\t\t.sort((av, bv, ak, bk) => compareFunction(av, bv, ak, bk));\n\t}\n}\n\nmodule.exports = Collection;\nexport { Collection };\nexport default Collection;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}