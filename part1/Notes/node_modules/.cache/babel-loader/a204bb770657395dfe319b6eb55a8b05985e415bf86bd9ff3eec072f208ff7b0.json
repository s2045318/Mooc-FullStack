{"ast":null,"code":"'use strict';\n\n/**\n * Represents an error from the Discord API.\n * @extends Error\n */\nclass DiscordAPIError extends Error {\n  constructor(path, error, method, status) {\n    super();\n    const flattened = this.constructor.flattenErrors(error.errors || error).join('\\n');\n    this.name = 'DiscordAPIError';\n    this.message = error.message && flattened ? `${error.message}\\n${flattened}` : error.message || flattened;\n\n    /**\n     * The HTTP method used for the request\n     * @type {string}\n     */\n    this.method = method;\n\n    /**\n     * The path of the request relative to the HTTP endpoint\n     * @type {string}\n     */\n    this.path = path;\n\n    /**\n     * HTTP error code returned by Discord\n     * @type {number}\n     */\n    this.code = error.code;\n\n    /**\n     * The HTTP status code\n     * @type {number}\n     */\n    this.httpStatus = status;\n  }\n\n  /**\n   * Flattens an errors object returned from the API into an array.\n   * @param {Object} obj Discord errors object\n   * @param {string} [key] Used internally to determine key names of nested fields\n   * @returns {string[]}\n   * @private\n   */\n  static flattenErrors(obj) {\n    let key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    let messages = [];\n    for (const [k, v] of Object.entries(obj)) {\n      if (k === 'message') continue;\n      const newKey = key ? isNaN(k) ? `${key}.${k}` : `${key}[${k}]` : k;\n      if (v._errors) {\n        messages.push(`${newKey}: ${v._errors.map(e => e.message).join(' ')}`);\n      } else if (v.code || v.message) {\n        messages.push(`${v.code ? `${v.code}: ` : ''}${v.message}`.trim());\n      } else if (typeof v === 'string') {\n        messages.push(v);\n      } else {\n        messages = messages.concat(this.flattenErrors(v, newKey));\n      }\n    }\n    return messages;\n  }\n}\nmodule.exports = DiscordAPIError;","map":{"version":3,"names":["DiscordAPIError","Error","constructor","path","error","method","status","flattened","flattenErrors","errors","join","name","message","code","httpStatus","obj","key","messages","k","v","Object","entries","newKey","isNaN","_errors","push","map","e","trim","concat","module","exports"],"sources":["/Users/jessegill/node_modules/discord.js/src/rest/DiscordAPIError.js"],"sourcesContent":["'use strict';\n\n/**\n * Represents an error from the Discord API.\n * @extends Error\n */\nclass DiscordAPIError extends Error {\n  constructor(path, error, method, status) {\n    super();\n    const flattened = this.constructor.flattenErrors(error.errors || error).join('\\n');\n    this.name = 'DiscordAPIError';\n    this.message = error.message && flattened ? `${error.message}\\n${flattened}` : error.message || flattened;\n\n    /**\n     * The HTTP method used for the request\n     * @type {string}\n     */\n    this.method = method;\n\n    /**\n     * The path of the request relative to the HTTP endpoint\n     * @type {string}\n     */\n    this.path = path;\n\n    /**\n     * HTTP error code returned by Discord\n     * @type {number}\n     */\n    this.code = error.code;\n\n    /**\n     * The HTTP status code\n     * @type {number}\n     */\n    this.httpStatus = status;\n  }\n\n  /**\n   * Flattens an errors object returned from the API into an array.\n   * @param {Object} obj Discord errors object\n   * @param {string} [key] Used internally to determine key names of nested fields\n   * @returns {string[]}\n   * @private\n   */\n  static flattenErrors(obj, key = '') {\n    let messages = [];\n\n    for (const [k, v] of Object.entries(obj)) {\n      if (k === 'message') continue;\n      const newKey = key ? (isNaN(k) ? `${key}.${k}` : `${key}[${k}]`) : k;\n\n      if (v._errors) {\n        messages.push(`${newKey}: ${v._errors.map(e => e.message).join(' ')}`);\n      } else if (v.code || v.message) {\n        messages.push(`${v.code ? `${v.code}: ` : ''}${v.message}`.trim());\n      } else if (typeof v === 'string') {\n        messages.push(v);\n      } else {\n        messages = messages.concat(this.flattenErrors(v, newKey));\n      }\n    }\n\n    return messages;\n  }\n}\n\nmodule.exports = DiscordAPIError;\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA,MAAMA,eAAe,SAASC,KAAK,CAAC;EAClCC,WAAW,CAACC,IAAI,EAAEC,KAAK,EAAEC,MAAM,EAAEC,MAAM,EAAE;IACvC,KAAK,EAAE;IACP,MAAMC,SAAS,GAAG,IAAI,CAACL,WAAW,CAACM,aAAa,CAACJ,KAAK,CAACK,MAAM,IAAIL,KAAK,CAAC,CAACM,IAAI,CAAC,IAAI,CAAC;IAClF,IAAI,CAACC,IAAI,GAAG,iBAAiB;IAC7B,IAAI,CAACC,OAAO,GAAGR,KAAK,CAACQ,OAAO,IAAIL,SAAS,GAAI,GAAEH,KAAK,CAACQ,OAAQ,KAAIL,SAAU,EAAC,GAAGH,KAAK,CAACQ,OAAO,IAAIL,SAAS;;IAEzG;AACJ;AACA;AACA;IACI,IAAI,CAACF,MAAM,GAAGA,MAAM;;IAEpB;AACJ;AACA;AACA;IACI,IAAI,CAACF,IAAI,GAAGA,IAAI;;IAEhB;AACJ;AACA;AACA;IACI,IAAI,CAACU,IAAI,GAAGT,KAAK,CAACS,IAAI;;IAEtB;AACJ;AACA;AACA;IACI,IAAI,CAACC,UAAU,GAAGR,MAAM;EAC1B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,OAAOE,aAAa,CAACO,GAAG,EAAY;IAAA,IAAVC,GAAG,uEAAG,EAAE;IAChC,IAAIC,QAAQ,GAAG,EAAE;IAEjB,KAAK,MAAM,CAACC,CAAC,EAAEC,CAAC,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACN,GAAG,CAAC,EAAE;MACxC,IAAIG,CAAC,KAAK,SAAS,EAAE;MACrB,MAAMI,MAAM,GAAGN,GAAG,GAAIO,KAAK,CAACL,CAAC,CAAC,GAAI,GAAEF,GAAI,IAAGE,CAAE,EAAC,GAAI,GAAEF,GAAI,IAAGE,CAAE,GAAE,GAAIA,CAAC;MAEpE,IAAIC,CAAC,CAACK,OAAO,EAAE;QACbP,QAAQ,CAACQ,IAAI,CAAE,GAAEH,MAAO,KAAIH,CAAC,CAACK,OAAO,CAACE,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACf,OAAO,CAAC,CAACF,IAAI,CAAC,GAAG,CAAE,EAAC,CAAC;MACxE,CAAC,MAAM,IAAIS,CAAC,CAACN,IAAI,IAAIM,CAAC,CAACP,OAAO,EAAE;QAC9BK,QAAQ,CAACQ,IAAI,CAAE,GAAEN,CAAC,CAACN,IAAI,GAAI,GAAEM,CAAC,CAACN,IAAK,IAAG,GAAG,EAAG,GAAEM,CAAC,CAACP,OAAQ,EAAC,CAACgB,IAAI,EAAE,CAAC;MACpE,CAAC,MAAM,IAAI,OAAOT,CAAC,KAAK,QAAQ,EAAE;QAChCF,QAAQ,CAACQ,IAAI,CAACN,CAAC,CAAC;MAClB,CAAC,MAAM;QACLF,QAAQ,GAAGA,QAAQ,CAACY,MAAM,CAAC,IAAI,CAACrB,aAAa,CAACW,CAAC,EAAEG,MAAM,CAAC,CAAC;MAC3D;IACF;IAEA,OAAOL,QAAQ;EACjB;AACF;AAEAa,MAAM,CAACC,OAAO,GAAG/B,eAAe"},"metadata":{},"sourceType":"script","externalDependencies":[]}