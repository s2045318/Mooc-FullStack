{"ast":null,"code":"'use strict';\n\nconst Base = require('./Base');\nconst Snowflake = require('../util/Snowflake');\n\n/**\n * Represents an emoji, see {@link GuildEmoji} and {@link ReactionEmoji}.\n * @extends {Base}\n */\nclass Emoji extends Base {\n  constructor(client, emoji) {\n    super(client);\n    /**\n     * Whether this emoji is animated\n     * @type {boolean}\n     */\n    this.animated = emoji.animated;\n\n    /**\n     * The name of this emoji\n     * @type {string}\n     */\n    this.name = emoji.name;\n\n    /**\n     * The ID of this emoji\n     * @type {?Snowflake}\n     */\n    this.id = emoji.id;\n\n    /**\n     * Whether this emoji has been deleted\n     * @type {boolean}\n     */\n    this.deleted = false;\n  }\n\n  /**\n   * The identifier of this emoji, used for message reactions\n   * @type {string}\n   * @readonly\n   */\n  get identifier() {\n    if (this.id) return `${this.animated ? 'a:' : ''}${this.name}:${this.id}`;\n    return encodeURIComponent(this.name);\n  }\n\n  /**\n   * The URL to the emoji file if its a custom emoji\n   * @type {?string}\n   * @readonly\n   */\n  get url() {\n    if (!this.id) return null;\n    return this.client.rest.cdn.Emoji(this.id, this.animated ? 'gif' : 'png');\n  }\n\n  /**\n   * The timestamp the emoji was created at, or null if unicode\n   * @type {?number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    if (!this.id) return null;\n    return Snowflake.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time the emoji was created at, or null if unicode\n   * @type {?Date}\n   * @readonly\n   */\n  get createdAt() {\n    if (!this.id) return null;\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the text required to form a graphical emoji on Discord\n   * instead of the Emoji object.\n   * @returns {string}\n   * @example\n   * // Send a custom emoji from a guild:\n   * const emoji = guild.emojis.cache.first();\n   * msg.reply(`Hello! ${emoji}`);\n   * @example\n   * // Send the emoji used in a reaction to the channel the reaction is part of\n   * reaction.message.channel.send(`The emoji used was: ${reaction.emoji}`);\n   */\n  toString() {\n    return this.id ? `<${this.animated ? 'a' : ''}:${this.name}:${this.id}>` : this.name;\n  }\n  toJSON() {\n    return super.toJSON({\n      guild: 'guildID',\n      createdTimestamp: true,\n      url: true,\n      identifier: true\n    });\n  }\n}\nmodule.exports = Emoji;","map":{"version":3,"names":["Base","require","Snowflake","Emoji","constructor","client","emoji","animated","name","id","deleted","identifier","encodeURIComponent","url","rest","cdn","createdTimestamp","deconstruct","timestamp","createdAt","Date","toString","toJSON","guild","module","exports"],"sources":["/Users/jessegill/node_modules/discord.js/src/structures/Emoji.js"],"sourcesContent":["'use strict';\n\nconst Base = require('./Base');\nconst Snowflake = require('../util/Snowflake');\n\n/**\n * Represents an emoji, see {@link GuildEmoji} and {@link ReactionEmoji}.\n * @extends {Base}\n */\nclass Emoji extends Base {\n  constructor(client, emoji) {\n    super(client);\n    /**\n     * Whether this emoji is animated\n     * @type {boolean}\n     */\n    this.animated = emoji.animated;\n\n    /**\n     * The name of this emoji\n     * @type {string}\n     */\n    this.name = emoji.name;\n\n    /**\n     * The ID of this emoji\n     * @type {?Snowflake}\n     */\n    this.id = emoji.id;\n\n    /**\n     * Whether this emoji has been deleted\n     * @type {boolean}\n     */\n    this.deleted = false;\n  }\n\n  /**\n   * The identifier of this emoji, used for message reactions\n   * @type {string}\n   * @readonly\n   */\n  get identifier() {\n    if (this.id) return `${this.animated ? 'a:' : ''}${this.name}:${this.id}`;\n    return encodeURIComponent(this.name);\n  }\n\n  /**\n   * The URL to the emoji file if its a custom emoji\n   * @type {?string}\n   * @readonly\n   */\n  get url() {\n    if (!this.id) return null;\n    return this.client.rest.cdn.Emoji(this.id, this.animated ? 'gif' : 'png');\n  }\n\n  /**\n   * The timestamp the emoji was created at, or null if unicode\n   * @type {?number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    if (!this.id) return null;\n    return Snowflake.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time the emoji was created at, or null if unicode\n   * @type {?Date}\n   * @readonly\n   */\n  get createdAt() {\n    if (!this.id) return null;\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the text required to form a graphical emoji on Discord\n   * instead of the Emoji object.\n   * @returns {string}\n   * @example\n   * // Send a custom emoji from a guild:\n   * const emoji = guild.emojis.cache.first();\n   * msg.reply(`Hello! ${emoji}`);\n   * @example\n   * // Send the emoji used in a reaction to the channel the reaction is part of\n   * reaction.message.channel.send(`The emoji used was: ${reaction.emoji}`);\n   */\n  toString() {\n    return this.id ? `<${this.animated ? 'a' : ''}:${this.name}:${this.id}>` : this.name;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      guild: 'guildID',\n      createdTimestamp: true,\n      url: true,\n      identifier: true,\n    });\n  }\n}\n\nmodule.exports = Emoji;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAC9B,MAAMC,SAAS,GAAGD,OAAO,CAAC,mBAAmB,CAAC;;AAE9C;AACA;AACA;AACA;AACA,MAAME,KAAK,SAASH,IAAI,CAAC;EACvBI,WAAW,CAACC,MAAM,EAAEC,KAAK,EAAE;IACzB,KAAK,CAACD,MAAM,CAAC;IACb;AACJ;AACA;AACA;IACI,IAAI,CAACE,QAAQ,GAAGD,KAAK,CAACC,QAAQ;;IAE9B;AACJ;AACA;AACA;IACI,IAAI,CAACC,IAAI,GAAGF,KAAK,CAACE,IAAI;;IAEtB;AACJ;AACA;AACA;IACI,IAAI,CAACC,EAAE,GAAGH,KAAK,CAACG,EAAE;;IAElB;AACJ;AACA;AACA;IACI,IAAI,CAACC,OAAO,GAAG,KAAK;EACtB;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIC,UAAU,GAAG;IACf,IAAI,IAAI,CAACF,EAAE,EAAE,OAAQ,GAAE,IAAI,CAACF,QAAQ,GAAG,IAAI,GAAG,EAAG,GAAE,IAAI,CAACC,IAAK,IAAG,IAAI,CAACC,EAAG,EAAC;IACzE,OAAOG,kBAAkB,CAAC,IAAI,CAACJ,IAAI,CAAC;EACtC;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIK,GAAG,GAAG;IACR,IAAI,CAAC,IAAI,CAACJ,EAAE,EAAE,OAAO,IAAI;IACzB,OAAO,IAAI,CAACJ,MAAM,CAACS,IAAI,CAACC,GAAG,CAACZ,KAAK,CAAC,IAAI,CAACM,EAAE,EAAE,IAAI,CAACF,QAAQ,GAAG,KAAK,GAAG,KAAK,CAAC;EAC3E;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIS,gBAAgB,GAAG;IACrB,IAAI,CAAC,IAAI,CAACP,EAAE,EAAE,OAAO,IAAI;IACzB,OAAOP,SAAS,CAACe,WAAW,CAAC,IAAI,CAACR,EAAE,CAAC,CAACS,SAAS;EACjD;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIC,SAAS,GAAG;IACd,IAAI,CAAC,IAAI,CAACV,EAAE,EAAE,OAAO,IAAI;IACzB,OAAO,IAAIW,IAAI,CAAC,IAAI,CAACJ,gBAAgB,CAAC;EACxC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEK,QAAQ,GAAG;IACT,OAAO,IAAI,CAACZ,EAAE,GAAI,IAAG,IAAI,CAACF,QAAQ,GAAG,GAAG,GAAG,EAAG,IAAG,IAAI,CAACC,IAAK,IAAG,IAAI,CAACC,EAAG,GAAE,GAAG,IAAI,CAACD,IAAI;EACtF;EAEAc,MAAM,GAAG;IACP,OAAO,KAAK,CAACA,MAAM,CAAC;MAClBC,KAAK,EAAE,SAAS;MAChBP,gBAAgB,EAAE,IAAI;MACtBH,GAAG,EAAE,IAAI;MACTF,UAAU,EAAE;IACd,CAAC,CAAC;EACJ;AACF;AAEAa,MAAM,CAACC,OAAO,GAAGtB,KAAK"},"metadata":{},"sourceType":"script","externalDependencies":[]}