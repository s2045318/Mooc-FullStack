{"ast":null,"code":"'use strict';\n\nconst BaseManager = require('./BaseManager');\nconst GuildChannel = require('../structures/GuildChannel');\nconst PermissionOverwrites = require('../structures/PermissionOverwrites');\nconst {\n  ChannelTypes\n} = require('../util/Constants');\n\n/**\n * Manages API methods for GuildChannels and stores their cache.\n * @extends {BaseManager}\n */\nclass GuildChannelManager extends BaseManager {\n  constructor(guild, iterable) {\n    super(guild.client, iterable, GuildChannel);\n\n    /**\n     * The guild this Manager belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n\n  /**\n   * The cache of this Manager\n   * @type {Collection<Snowflake, GuildChannel>}\n   * @name GuildChannelManager#cache\n   */\n\n  add(channel) {\n    const existing = this.cache.get(channel.id);\n    if (existing) return existing;\n    this.cache.set(channel.id, channel);\n    return channel;\n  }\n\n  /**\n   * Data that can be resolved to give a Guild Channel object. This can be:\n   * * A GuildChannel object\n   * * A Snowflake\n   * @typedef {GuildChannel|Snowflake} GuildChannelResolvable\n   */\n\n  /**\n   * Resolves a GuildChannelResolvable to a Channel object.\n   * @method resolve\n   * @memberof GuildChannelManager\n   * @instance\n   * @param {GuildChannelResolvable} channel The GuildChannel resolvable to resolve\n   * @returns {?GuildChannel}\n   */\n\n  /**\n   * Resolves a GuildChannelResolvable to a channel ID string.\n   * @method resolveID\n   * @memberof GuildChannelManager\n   * @instance\n   * @param {GuildChannelResolvable} channel The GuildChannel resolvable to resolve\n   * @returns {?Snowflake}\n   */\n\n  /**\n   * Creates a new channel in the guild.\n   * @param {string} name The name of the new channel\n   * @param {Object} [options] Options\n   * @param {string} [options.type='text'] The type of the new channel, either `text`, `voice`, or `category`\n   * @param {string} [options.topic] The topic for the new channel\n   * @param {boolean} [options.nsfw] Whether the new channel is nsfw\n   * @param {number} [options.bitrate] Bitrate of the new channel in bits (only voice)\n   * @param {number} [options.userLimit] Maximum amount of users allowed in the new channel (only voice)\n   * @param {ChannelResolvable} [options.parent] Parent of the new channel\n   * @param {OverwriteResolvable[]|Collection<Snowflake, OverwriteResolvable>} [options.permissionOverwrites]\n   * Permission overwrites of the new channel\n   * @param {number} [options.position] Position of the new channel\n   * @param {number} [options.rateLimitPerUser] The ratelimit per user for the channel\n   * @param {string} [options.reason] Reason for creating the channel\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Create a new text channel\n   * guild.channels.create('new-general', { reason: 'Needed a cool new channel' })\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Create a new channel with permission overwrites\n   * guild.channels.create('new-voice', {\n   *   type: 'voice',\n   *   permissionOverwrites: [\n   *      {\n   *        id: message.author.id,\n   *        deny: ['VIEW_CHANNEL'],\n   *     },\n   *   ],\n   * })\n   */\n  async create(name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let {\n      type,\n      topic,\n      nsfw,\n      bitrate,\n      userLimit,\n      parent,\n      permissionOverwrites,\n      position,\n      rateLimitPerUser,\n      reason\n    } = options;\n    if (parent) parent = this.client.channels.resolveID(parent);\n    if (permissionOverwrites) {\n      permissionOverwrites = permissionOverwrites.map(o => PermissionOverwrites.resolve(o, this.guild));\n    }\n    const data = await this.client.api.guilds(this.guild.id).channels.post({\n      data: {\n        name,\n        topic,\n        type: type ? ChannelTypes[type.toUpperCase()] : ChannelTypes.TEXT,\n        nsfw,\n        bitrate,\n        user_limit: userLimit,\n        parent_id: parent,\n        position,\n        permission_overwrites: permissionOverwrites,\n        rate_limit_per_user: rateLimitPerUser\n      },\n      reason\n    });\n    return this.client.actions.ChannelCreate.handle(data).channel;\n  }\n}\nmodule.exports = GuildChannelManager;","map":{"version":3,"names":["BaseManager","require","GuildChannel","PermissionOverwrites","ChannelTypes","GuildChannelManager","constructor","guild","iterable","client","add","channel","existing","cache","get","id","set","create","name","options","type","topic","nsfw","bitrate","userLimit","parent","permissionOverwrites","position","rateLimitPerUser","reason","channels","resolveID","map","o","resolve","data","api","guilds","post","toUpperCase","TEXT","user_limit","parent_id","permission_overwrites","rate_limit_per_user","actions","ChannelCreate","handle","module","exports"],"sources":["/Users/jessegill/node_modules/discord.js/src/managers/GuildChannelManager.js"],"sourcesContent":["'use strict';\n\nconst BaseManager = require('./BaseManager');\nconst GuildChannel = require('../structures/GuildChannel');\nconst PermissionOverwrites = require('../structures/PermissionOverwrites');\nconst { ChannelTypes } = require('../util/Constants');\n\n/**\n * Manages API methods for GuildChannels and stores their cache.\n * @extends {BaseManager}\n */\nclass GuildChannelManager extends BaseManager {\n  constructor(guild, iterable) {\n    super(guild.client, iterable, GuildChannel);\n\n    /**\n     * The guild this Manager belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n\n  /**\n   * The cache of this Manager\n   * @type {Collection<Snowflake, GuildChannel>}\n   * @name GuildChannelManager#cache\n   */\n\n  add(channel) {\n    const existing = this.cache.get(channel.id);\n    if (existing) return existing;\n    this.cache.set(channel.id, channel);\n    return channel;\n  }\n\n  /**\n   * Data that can be resolved to give a Guild Channel object. This can be:\n   * * A GuildChannel object\n   * * A Snowflake\n   * @typedef {GuildChannel|Snowflake} GuildChannelResolvable\n   */\n\n  /**\n   * Resolves a GuildChannelResolvable to a Channel object.\n   * @method resolve\n   * @memberof GuildChannelManager\n   * @instance\n   * @param {GuildChannelResolvable} channel The GuildChannel resolvable to resolve\n   * @returns {?GuildChannel}\n   */\n\n  /**\n   * Resolves a GuildChannelResolvable to a channel ID string.\n   * @method resolveID\n   * @memberof GuildChannelManager\n   * @instance\n   * @param {GuildChannelResolvable} channel The GuildChannel resolvable to resolve\n   * @returns {?Snowflake}\n   */\n\n  /**\n   * Creates a new channel in the guild.\n   * @param {string} name The name of the new channel\n   * @param {Object} [options] Options\n   * @param {string} [options.type='text'] The type of the new channel, either `text`, `voice`, or `category`\n   * @param {string} [options.topic] The topic for the new channel\n   * @param {boolean} [options.nsfw] Whether the new channel is nsfw\n   * @param {number} [options.bitrate] Bitrate of the new channel in bits (only voice)\n   * @param {number} [options.userLimit] Maximum amount of users allowed in the new channel (only voice)\n   * @param {ChannelResolvable} [options.parent] Parent of the new channel\n   * @param {OverwriteResolvable[]|Collection<Snowflake, OverwriteResolvable>} [options.permissionOverwrites]\n   * Permission overwrites of the new channel\n   * @param {number} [options.position] Position of the new channel\n   * @param {number} [options.rateLimitPerUser] The ratelimit per user for the channel\n   * @param {string} [options.reason] Reason for creating the channel\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Create a new text channel\n   * guild.channels.create('new-general', { reason: 'Needed a cool new channel' })\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Create a new channel with permission overwrites\n   * guild.channels.create('new-voice', {\n   *   type: 'voice',\n   *   permissionOverwrites: [\n   *      {\n   *        id: message.author.id,\n   *        deny: ['VIEW_CHANNEL'],\n   *     },\n   *   ],\n   * })\n   */\n  async create(name, options = {}) {\n    let {\n      type,\n      topic,\n      nsfw,\n      bitrate,\n      userLimit,\n      parent,\n      permissionOverwrites,\n      position,\n      rateLimitPerUser,\n      reason,\n    } = options;\n    if (parent) parent = this.client.channels.resolveID(parent);\n    if (permissionOverwrites) {\n      permissionOverwrites = permissionOverwrites.map(o => PermissionOverwrites.resolve(o, this.guild));\n    }\n\n    const data = await this.client.api.guilds(this.guild.id).channels.post({\n      data: {\n        name,\n        topic,\n        type: type ? ChannelTypes[type.toUpperCase()] : ChannelTypes.TEXT,\n        nsfw,\n        bitrate,\n        user_limit: userLimit,\n        parent_id: parent,\n        position,\n        permission_overwrites: permissionOverwrites,\n        rate_limit_per_user: rateLimitPerUser,\n      },\n      reason,\n    });\n    return this.client.actions.ChannelCreate.handle(data).channel;\n  }\n}\n\nmodule.exports = GuildChannelManager;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,WAAW,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC5C,MAAMC,YAAY,GAAGD,OAAO,CAAC,4BAA4B,CAAC;AAC1D,MAAME,oBAAoB,GAAGF,OAAO,CAAC,oCAAoC,CAAC;AAC1E,MAAM;EAAEG;AAAa,CAAC,GAAGH,OAAO,CAAC,mBAAmB,CAAC;;AAErD;AACA;AACA;AACA;AACA,MAAMI,mBAAmB,SAASL,WAAW,CAAC;EAC5CM,WAAW,CAACC,KAAK,EAAEC,QAAQ,EAAE;IAC3B,KAAK,CAACD,KAAK,CAACE,MAAM,EAAED,QAAQ,EAAEN,YAAY,CAAC;;IAE3C;AACJ;AACA;AACA;IACI,IAAI,CAACK,KAAK,GAAGA,KAAK;EACpB;;EAEA;AACF;AACA;AACA;AACA;;EAEEG,GAAG,CAACC,OAAO,EAAE;IACX,MAAMC,QAAQ,GAAG,IAAI,CAACC,KAAK,CAACC,GAAG,CAACH,OAAO,CAACI,EAAE,CAAC;IAC3C,IAAIH,QAAQ,EAAE,OAAOA,QAAQ;IAC7B,IAAI,CAACC,KAAK,CAACG,GAAG,CAACL,OAAO,CAACI,EAAE,EAAEJ,OAAO,CAAC;IACnC,OAAOA,OAAO;EAChB;;EAEA;AACF;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMM,MAAM,CAACC,IAAI,EAAgB;IAAA,IAAdC,OAAO,uEAAG,CAAC,CAAC;IAC7B,IAAI;MACFC,IAAI;MACJC,KAAK;MACLC,IAAI;MACJC,OAAO;MACPC,SAAS;MACTC,MAAM;MACNC,oBAAoB;MACpBC,QAAQ;MACRC,gBAAgB;MAChBC;IACF,CAAC,GAAGV,OAAO;IACX,IAAIM,MAAM,EAAEA,MAAM,GAAG,IAAI,CAAChB,MAAM,CAACqB,QAAQ,CAACC,SAAS,CAACN,MAAM,CAAC;IAC3D,IAAIC,oBAAoB,EAAE;MACxBA,oBAAoB,GAAGA,oBAAoB,CAACM,GAAG,CAACC,CAAC,IAAI9B,oBAAoB,CAAC+B,OAAO,CAACD,CAAC,EAAE,IAAI,CAAC1B,KAAK,CAAC,CAAC;IACnG;IAEA,MAAM4B,IAAI,GAAG,MAAM,IAAI,CAAC1B,MAAM,CAAC2B,GAAG,CAACC,MAAM,CAAC,IAAI,CAAC9B,KAAK,CAACQ,EAAE,CAAC,CAACe,QAAQ,CAACQ,IAAI,CAAC;MACrEH,IAAI,EAAE;QACJjB,IAAI;QACJG,KAAK;QACLD,IAAI,EAAEA,IAAI,GAAGhB,YAAY,CAACgB,IAAI,CAACmB,WAAW,EAAE,CAAC,GAAGnC,YAAY,CAACoC,IAAI;QACjElB,IAAI;QACJC,OAAO;QACPkB,UAAU,EAAEjB,SAAS;QACrBkB,SAAS,EAAEjB,MAAM;QACjBE,QAAQ;QACRgB,qBAAqB,EAAEjB,oBAAoB;QAC3CkB,mBAAmB,EAAEhB;MACvB,CAAC;MACDC;IACF,CAAC,CAAC;IACF,OAAO,IAAI,CAACpB,MAAM,CAACoC,OAAO,CAACC,aAAa,CAACC,MAAM,CAACZ,IAAI,CAAC,CAACxB,OAAO;EAC/D;AACF;AAEAqC,MAAM,CAACC,OAAO,GAAG5C,mBAAmB"},"metadata":{},"sourceType":"script","externalDependencies":[]}