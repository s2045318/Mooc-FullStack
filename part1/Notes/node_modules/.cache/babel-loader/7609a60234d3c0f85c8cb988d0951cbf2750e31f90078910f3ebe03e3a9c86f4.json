{"ast":null,"code":"'use strict';\n\nconst DataResolver = require('../util/DataResolver');\nconst Structures = require('../util/Structures');\n\n/**\n * Represents the logged in client's Discord user.\n * @extends {User}\n */\nclass ClientUser extends Structures.get('User') {\n  constructor(client, data) {\n    super(client, data);\n    this._typing = new Map();\n  }\n  _patch(data) {\n    super._patch(data);\n    if ('verified' in data) {\n      /**\n       * Whether or not this account has been verified\n       * @type {boolean}\n       */\n      this.verified = data.verified;\n    }\n    if ('mfa_enabled' in data) {\n      /**\n       * If the bot's {@link ClientApplication#owner Owner} has MFA enabled on their account\n       * @type {?boolean}\n       */\n      this.mfaEnabled = typeof data.mfa_enabled === 'boolean' ? data.mfa_enabled : null;\n    } else if (typeof this.mfaEnabled === 'undefined') {\n      this.mfaEnabled = null;\n    }\n    if (data.token) this.client.token = data.token;\n  }\n\n  /**\n   * ClientUser's presence\n   * @type {Presence}\n   * @readonly\n   */\n  get presence() {\n    return this.client.presence;\n  }\n  edit(data) {\n    return this.client.api.users('@me').patch({\n      data\n    }).then(newData => {\n      this.client.token = newData.token;\n      const {\n        updated\n      } = this.client.actions.UserUpdate.handle(newData);\n      if (updated) return updated;\n      return this;\n    });\n  }\n\n  /**\n   * Sets the username of the logged in client.\n   * <info>Changing usernames in Discord is heavily rate limited, with only 2 requests\n   * every hour. Use this sparingly!</info>\n   * @param {string} username The new username\n   * @returns {Promise<ClientUser>}\n   * @example\n   * // Set username\n   * client.user.setUsername('discordjs')\n   *   .then(user => console.log(`My new username is ${user.username}`))\n   *   .catch(console.error);\n   */\n  setUsername(username) {\n    return this.edit({\n      username\n    });\n  }\n\n  /**\n   * Sets the avatar of the logged in client.\n   * @param {BufferResolvable|Base64Resolvable} avatar The new avatar\n   * @returns {Promise<ClientUser>}\n   * @example\n   * // Set avatar\n   * client.user.setAvatar('./avatar.png')\n   *   .then(user => console.log(`New avatar set!`))\n   *   .catch(console.error);\n   */\n  async setAvatar(avatar) {\n    return this.edit({\n      avatar: await DataResolver.resolveImage(avatar)\n    });\n  }\n\n  /**\n   * Data resembling a raw Discord presence.\n   * @typedef {Object} PresenceData\n   * @property {PresenceStatusData} [status] Status of the user\n   * @property {boolean} [afk] Whether the user is AFK\n   * @property {Object} [activity] Activity the user is playing\n   * @property {string} [activity.name] Name of the activity\n   * @property {ActivityType|number} [activity.type] Type of the activity\n   * @property {string} [activity.url] Twitch / YouTube stream URL\n   * @property {?number|number[]} [shardID] Shard Id(s) to have the activity set on\n   */\n\n  /**\n   * Sets the full presence of the client user.\n   * @param {PresenceData} data Data for the presence\n   * @returns {Promise<Presence>}\n   * @example\n   * // Set the client user's presence\n   * client.user.setPresence({ activity: { name: 'with discord.js' }, status: 'idle' })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  setPresence(data) {\n    return this.client.presence.set(data);\n  }\n\n  /**\n   * A user's status. Must be one of:\n   * * `online`\n   * * `idle`\n   * * `invisible`\n   * * `dnd` (do not disturb)\n   * @typedef {string} PresenceStatusData\n   */\n\n  /**\n   * Sets the status of the client user.\n   * @param {PresenceStatusData} status Status to change to\n   * @param {?number|number[]} [shardID] Shard ID(s) to have the activity set on\n   * @returns {Promise<Presence>}\n   * @example\n   * // Set the client user's status\n   * client.user.setStatus('idle')\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  setStatus(status, shardID) {\n    return this.setPresence({\n      status,\n      shardID\n    });\n  }\n\n  /**\n   * Options for setting an activity.\n   * @typedef ActivityOptions\n   * @type {Object}\n   * @property {string} [url] Twitch / YouTube stream URL\n   * @property {ActivityType|number} [type] Type of the activity\n   * @property {?number|number[]} [shardID] Shard Id(s) to have the activity set on\n   */\n\n  /**\n   * Sets the activity the client user is playing.\n   * @param {string|ActivityOptions} [name] Activity being played, or options for setting the activity\n   * @param {ActivityOptions} [options] Options for setting the activity\n   * @returns {Promise<Presence>}\n   * @example\n   * // Set the client user's activity\n   * client.user.setActivity('discord.js', { type: 'WATCHING' })\n   *   .then(presence => console.log(`Activity set to ${presence.activities[0].name}`))\n   *   .catch(console.error);\n   */\n  setActivity(name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!name) return this.setPresence({\n      activity: null,\n      shardID: options.shardID\n    });\n    const activity = Object.assign({}, options, typeof name === 'object' ? name : {\n      name\n    });\n    return this.setPresence({\n      activity,\n      shardID: activity.shardID\n    });\n  }\n\n  /**\n   * Sets/removes the AFK flag for the client user.\n   * @param {boolean} afk Whether or not the user is AFK\n   * @returns {Promise<Presence>}\n   */\n  setAFK(afk) {\n    return this.setPresence({\n      afk\n    });\n  }\n}\nmodule.exports = ClientUser;","map":{"version":3,"names":["DataResolver","require","Structures","ClientUser","get","constructor","client","data","_typing","Map","_patch","verified","mfaEnabled","mfa_enabled","token","presence","edit","api","users","patch","then","newData","updated","actions","UserUpdate","handle","setUsername","username","setAvatar","avatar","resolveImage","setPresence","set","setStatus","status","shardID","setActivity","name","options","activity","Object","assign","setAFK","afk","module","exports"],"sources":["/Users/jessegill/node_modules/discord.js/src/structures/ClientUser.js"],"sourcesContent":["'use strict';\n\nconst DataResolver = require('../util/DataResolver');\nconst Structures = require('../util/Structures');\n\n/**\n * Represents the logged in client's Discord user.\n * @extends {User}\n */\nclass ClientUser extends Structures.get('User') {\n  constructor(client, data) {\n    super(client, data);\n    this._typing = new Map();\n  }\n\n  _patch(data) {\n    super._patch(data);\n\n    if ('verified' in data) {\n      /**\n       * Whether or not this account has been verified\n       * @type {boolean}\n       */\n      this.verified = data.verified;\n    }\n\n    if ('mfa_enabled' in data) {\n      /**\n       * If the bot's {@link ClientApplication#owner Owner} has MFA enabled on their account\n       * @type {?boolean}\n       */\n      this.mfaEnabled = typeof data.mfa_enabled === 'boolean' ? data.mfa_enabled : null;\n    } else if (typeof this.mfaEnabled === 'undefined') {\n      this.mfaEnabled = null;\n    }\n\n    if (data.token) this.client.token = data.token;\n  }\n\n  /**\n   * ClientUser's presence\n   * @type {Presence}\n   * @readonly\n   */\n  get presence() {\n    return this.client.presence;\n  }\n\n  edit(data) {\n    return this.client.api\n      .users('@me')\n      .patch({ data })\n      .then(newData => {\n        this.client.token = newData.token;\n        const { updated } = this.client.actions.UserUpdate.handle(newData);\n        if (updated) return updated;\n        return this;\n      });\n  }\n\n  /**\n   * Sets the username of the logged in client.\n   * <info>Changing usernames in Discord is heavily rate limited, with only 2 requests\n   * every hour. Use this sparingly!</info>\n   * @param {string} username The new username\n   * @returns {Promise<ClientUser>}\n   * @example\n   * // Set username\n   * client.user.setUsername('discordjs')\n   *   .then(user => console.log(`My new username is ${user.username}`))\n   *   .catch(console.error);\n   */\n  setUsername(username) {\n    return this.edit({ username });\n  }\n\n  /**\n   * Sets the avatar of the logged in client.\n   * @param {BufferResolvable|Base64Resolvable} avatar The new avatar\n   * @returns {Promise<ClientUser>}\n   * @example\n   * // Set avatar\n   * client.user.setAvatar('./avatar.png')\n   *   .then(user => console.log(`New avatar set!`))\n   *   .catch(console.error);\n   */\n  async setAvatar(avatar) {\n    return this.edit({ avatar: await DataResolver.resolveImage(avatar) });\n  }\n\n  /**\n   * Data resembling a raw Discord presence.\n   * @typedef {Object} PresenceData\n   * @property {PresenceStatusData} [status] Status of the user\n   * @property {boolean} [afk] Whether the user is AFK\n   * @property {Object} [activity] Activity the user is playing\n   * @property {string} [activity.name] Name of the activity\n   * @property {ActivityType|number} [activity.type] Type of the activity\n   * @property {string} [activity.url] Twitch / YouTube stream URL\n   * @property {?number|number[]} [shardID] Shard Id(s) to have the activity set on\n   */\n\n  /**\n   * Sets the full presence of the client user.\n   * @param {PresenceData} data Data for the presence\n   * @returns {Promise<Presence>}\n   * @example\n   * // Set the client user's presence\n   * client.user.setPresence({ activity: { name: 'with discord.js' }, status: 'idle' })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  setPresence(data) {\n    return this.client.presence.set(data);\n  }\n\n  /**\n   * A user's status. Must be one of:\n   * * `online`\n   * * `idle`\n   * * `invisible`\n   * * `dnd` (do not disturb)\n   * @typedef {string} PresenceStatusData\n   */\n\n  /**\n   * Sets the status of the client user.\n   * @param {PresenceStatusData} status Status to change to\n   * @param {?number|number[]} [shardID] Shard ID(s) to have the activity set on\n   * @returns {Promise<Presence>}\n   * @example\n   * // Set the client user's status\n   * client.user.setStatus('idle')\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  setStatus(status, shardID) {\n    return this.setPresence({ status, shardID });\n  }\n\n  /**\n   * Options for setting an activity.\n   * @typedef ActivityOptions\n   * @type {Object}\n   * @property {string} [url] Twitch / YouTube stream URL\n   * @property {ActivityType|number} [type] Type of the activity\n   * @property {?number|number[]} [shardID] Shard Id(s) to have the activity set on\n   */\n\n  /**\n   * Sets the activity the client user is playing.\n   * @param {string|ActivityOptions} [name] Activity being played, or options for setting the activity\n   * @param {ActivityOptions} [options] Options for setting the activity\n   * @returns {Promise<Presence>}\n   * @example\n   * // Set the client user's activity\n   * client.user.setActivity('discord.js', { type: 'WATCHING' })\n   *   .then(presence => console.log(`Activity set to ${presence.activities[0].name}`))\n   *   .catch(console.error);\n   */\n  setActivity(name, options = {}) {\n    if (!name) return this.setPresence({ activity: null, shardID: options.shardID });\n\n    const activity = Object.assign({}, options, typeof name === 'object' ? name : { name });\n    return this.setPresence({ activity, shardID: activity.shardID });\n  }\n\n  /**\n   * Sets/removes the AFK flag for the client user.\n   * @param {boolean} afk Whether or not the user is AFK\n   * @returns {Promise<Presence>}\n   */\n  setAFK(afk) {\n    return this.setPresence({ afk });\n  }\n}\n\nmodule.exports = ClientUser;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}