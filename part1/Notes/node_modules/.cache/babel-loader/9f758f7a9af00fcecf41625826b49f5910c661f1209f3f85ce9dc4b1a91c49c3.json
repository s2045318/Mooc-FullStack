{"ast":null,"code":"'use strict';\n\nconst Action = require('./Action');\nconst {\n  Events\n} = require('../../util/Constants');\nconst {\n  PartialTypes\n} = require('../../util/Constants');\n\n/*\n{ user_id: 'id',\n     message_id: 'id',\n     emoji: { name: '�', id: null },\n     channel_id: 'id',\n     // If originating from a guild\n     guild_id: 'id',\n     member: { ..., user: { ... } } }\n*/\n\nclass MessageReactionAdd extends Action {\n  handle(data) {\n    if (!data.emoji) return false;\n    const user = this.getUserFromMember(data);\n    if (!user) return false;\n\n    // Verify channel\n    const channel = this.getChannel(data);\n    if (!channel || channel.type === 'voice') return false;\n\n    // Verify message\n    const message = this.getMessage(data, channel);\n    if (!message) return false;\n\n    // Verify reaction\n    if (message.partial && !this.client.options.partials.includes(PartialTypes.REACTION)) return false;\n    const existing = message.reactions.cache.get(data.emoji.id || data.emoji.name);\n    if (existing && existing.users.cache.has(user.id)) return {\n      message,\n      reaction: existing,\n      user\n    };\n    const reaction = message.reactions.add({\n      emoji: data.emoji,\n      count: message.partial ? null : 0,\n      me: user.id === this.client.user.id\n    });\n    if (!reaction) return false;\n    reaction._add(user);\n    /**\n     * Emitted whenever a reaction is added to a cached message.\n     * @event Client#messageReactionAdd\n     * @param {MessageReaction} messageReaction The reaction object\n     * @param {User} user The user that applied the guild or reaction emoji\n     */\n    this.client.emit(Events.MESSAGE_REACTION_ADD, reaction, user);\n    return {\n      message,\n      reaction,\n      user\n    };\n  }\n}\nmodule.exports = MessageReactionAdd;","map":{"version":3,"names":["Action","require","Events","PartialTypes","MessageReactionAdd","handle","data","emoji","user","getUserFromMember","channel","getChannel","type","message","getMessage","partial","client","options","partials","includes","REACTION","existing","reactions","cache","get","id","name","users","has","reaction","add","count","me","_add","emit","MESSAGE_REACTION_ADD","module","exports"],"sources":["/Users/jessegill/node_modules/discord.js/src/client/actions/MessageReactionAdd.js"],"sourcesContent":["'use strict';\n\nconst Action = require('./Action');\nconst { Events } = require('../../util/Constants');\nconst { PartialTypes } = require('../../util/Constants');\n\n/*\n{ user_id: 'id',\n     message_id: 'id',\n     emoji: { name: '�', id: null },\n     channel_id: 'id',\n     // If originating from a guild\n     guild_id: 'id',\n     member: { ..., user: { ... } } }\n*/\n\nclass MessageReactionAdd extends Action {\n  handle(data) {\n    if (!data.emoji) return false;\n\n    const user = this.getUserFromMember(data);\n    if (!user) return false;\n\n    // Verify channel\n    const channel = this.getChannel(data);\n    if (!channel || channel.type === 'voice') return false;\n\n    // Verify message\n    const message = this.getMessage(data, channel);\n    if (!message) return false;\n\n    // Verify reaction\n    if (message.partial && !this.client.options.partials.includes(PartialTypes.REACTION)) return false;\n    const existing = message.reactions.cache.get(data.emoji.id || data.emoji.name);\n    if (existing && existing.users.cache.has(user.id)) return { message, reaction: existing, user };\n    const reaction = message.reactions.add({\n      emoji: data.emoji,\n      count: message.partial ? null : 0,\n      me: user.id === this.client.user.id,\n    });\n    if (!reaction) return false;\n    reaction._add(user);\n    /**\n     * Emitted whenever a reaction is added to a cached message.\n     * @event Client#messageReactionAdd\n     * @param {MessageReaction} messageReaction The reaction object\n     * @param {User} user The user that applied the guild or reaction emoji\n     */\n    this.client.emit(Events.MESSAGE_REACTION_ADD, reaction, user);\n\n    return { message, reaction, user };\n  }\n}\n\nmodule.exports = MessageReactionAdd;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAU,CAAC;AAClC,MAAM;EAAEC;AAAO,CAAC,GAAGD,OAAO,CAAC,sBAAsB,CAAC;AAClD,MAAM;EAAEE;AAAa,CAAC,GAAGF,OAAO,CAAC,sBAAsB,CAAC;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMG,kBAAkB,SAASJ,MAAM,CAAC;EACtCK,MAAM,CAACC,IAAI,EAAE;IACX,IAAI,CAACA,IAAI,CAACC,KAAK,EAAE,OAAO,KAAK;IAE7B,MAAMC,IAAI,GAAG,IAAI,CAACC,iBAAiB,CAACH,IAAI,CAAC;IACzC,IAAI,CAACE,IAAI,EAAE,OAAO,KAAK;;IAEvB;IACA,MAAME,OAAO,GAAG,IAAI,CAACC,UAAU,CAACL,IAAI,CAAC;IACrC,IAAI,CAACI,OAAO,IAAIA,OAAO,CAACE,IAAI,KAAK,OAAO,EAAE,OAAO,KAAK;;IAEtD;IACA,MAAMC,OAAO,GAAG,IAAI,CAACC,UAAU,CAACR,IAAI,EAAEI,OAAO,CAAC;IAC9C,IAAI,CAACG,OAAO,EAAE,OAAO,KAAK;;IAE1B;IACA,IAAIA,OAAO,CAACE,OAAO,IAAI,CAAC,IAAI,CAACC,MAAM,CAACC,OAAO,CAACC,QAAQ,CAACC,QAAQ,CAAChB,YAAY,CAACiB,QAAQ,CAAC,EAAE,OAAO,KAAK;IAClG,MAAMC,QAAQ,GAAGR,OAAO,CAACS,SAAS,CAACC,KAAK,CAACC,GAAG,CAAClB,IAAI,CAACC,KAAK,CAACkB,EAAE,IAAInB,IAAI,CAACC,KAAK,CAACmB,IAAI,CAAC;IAC9E,IAAIL,QAAQ,IAAIA,QAAQ,CAACM,KAAK,CAACJ,KAAK,CAACK,GAAG,CAACpB,IAAI,CAACiB,EAAE,CAAC,EAAE,OAAO;MAAEZ,OAAO;MAAEgB,QAAQ,EAAER,QAAQ;MAAEb;IAAK,CAAC;IAC/F,MAAMqB,QAAQ,GAAGhB,OAAO,CAACS,SAAS,CAACQ,GAAG,CAAC;MACrCvB,KAAK,EAAED,IAAI,CAACC,KAAK;MACjBwB,KAAK,EAAElB,OAAO,CAACE,OAAO,GAAG,IAAI,GAAG,CAAC;MACjCiB,EAAE,EAAExB,IAAI,CAACiB,EAAE,KAAK,IAAI,CAACT,MAAM,CAACR,IAAI,CAACiB;IACnC,CAAC,CAAC;IACF,IAAI,CAACI,QAAQ,EAAE,OAAO,KAAK;IAC3BA,QAAQ,CAACI,IAAI,CAACzB,IAAI,CAAC;IACnB;AACJ;AACA;AACA;AACA;AACA;IACI,IAAI,CAACQ,MAAM,CAACkB,IAAI,CAAChC,MAAM,CAACiC,oBAAoB,EAAEN,QAAQ,EAAErB,IAAI,CAAC;IAE7D,OAAO;MAAEK,OAAO;MAAEgB,QAAQ;MAAErB;IAAK,CAAC;EACpC;AACF;AAEA4B,MAAM,CAACC,OAAO,GAAGjC,kBAAkB"},"metadata":{},"sourceType":"script","externalDependencies":[]}