{"ast":null,"code":"'use strict';\n\nconst {\n  Events\n} = require('../../../util/Constants');\nmodule.exports = (client, _ref) => {\n  let {\n    d: data\n  } = _ref;\n  const channel = client.channels.cache.get(data.channel_id);\n  const time = new Date(data.last_pin_timestamp);\n  if (channel && !Number.isNaN(time.getTime())) {\n    // Discord sends null for last_pin_timestamp if the last pinned message was removed\n    channel.lastPinTimestamp = time.getTime() || null;\n\n    /**\n     * Emitted whenever the pins of a channel are updated. Due to the nature of the WebSocket event,\n     * not much information can be provided easily here - you need to manually check the pins yourself.\n     * @event Client#channelPinsUpdate\n     * @param {DMChannel|TextChannel} channel The channel that the pins update occurred in\n     * @param {Date} time The time of the pins update\n     */\n    client.emit(Events.CHANNEL_PINS_UPDATE, channel, time);\n  }\n};","map":{"version":3,"names":["Events","require","module","exports","client","d","data","channel","channels","cache","get","channel_id","time","Date","last_pin_timestamp","Number","isNaN","getTime","lastPinTimestamp","emit","CHANNEL_PINS_UPDATE"],"sources":["/Users/jessegill/node_modules/discord.js/src/client/websocket/handlers/CHANNEL_PINS_UPDATE.js"],"sourcesContent":["'use strict';\n\nconst { Events } = require('../../../util/Constants');\n\nmodule.exports = (client, { d: data }) => {\n  const channel = client.channels.cache.get(data.channel_id);\n  const time = new Date(data.last_pin_timestamp);\n\n  if (channel && !Number.isNaN(time.getTime())) {\n    // Discord sends null for last_pin_timestamp if the last pinned message was removed\n    channel.lastPinTimestamp = time.getTime() || null;\n\n    /**\n     * Emitted whenever the pins of a channel are updated. Due to the nature of the WebSocket event,\n     * not much information can be provided easily here - you need to manually check the pins yourself.\n     * @event Client#channelPinsUpdate\n     * @param {DMChannel|TextChannel} channel The channel that the pins update occurred in\n     * @param {Date} time The time of the pins update\n     */\n    client.emit(Events.CHANNEL_PINS_UPDATE, channel, time);\n  }\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAO,CAAC,GAAGC,OAAO,CAAC,yBAAyB,CAAC;AAErDC,MAAM,CAACC,OAAO,GAAG,CAACC,MAAM,WAAkB;EAAA,IAAhB;IAAEC,CAAC,EAAEC;EAAK,CAAC;EACnC,MAAMC,OAAO,GAAGH,MAAM,CAACI,QAAQ,CAACC,KAAK,CAACC,GAAG,CAACJ,IAAI,CAACK,UAAU,CAAC;EAC1D,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACP,IAAI,CAACQ,kBAAkB,CAAC;EAE9C,IAAIP,OAAO,IAAI,CAACQ,MAAM,CAACC,KAAK,CAACJ,IAAI,CAACK,OAAO,EAAE,CAAC,EAAE;IAC5C;IACAV,OAAO,CAACW,gBAAgB,GAAGN,IAAI,CAACK,OAAO,EAAE,IAAI,IAAI;;IAEjD;AACJ;AACA;AACA;AACA;AACA;AACA;IACIb,MAAM,CAACe,IAAI,CAACnB,MAAM,CAACoB,mBAAmB,EAAEb,OAAO,EAAEK,IAAI,CAAC;EACxD;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}