{"ast":null,"code":"'use strict';\n\n/**\n * An extendable structure:\n * * **`GuildEmoji`**\n * * **`DMChannel`**\n * * **`TextChannel`**\n * * **`VoiceChannel`**\n * * **`CategoryChannel`**\n * * **`NewsChannel`**\n * * **`StoreChannel`**\n * * **`GuildMember`**\n * * **`Guild`**\n * * **`Message`**\n * * **`MessageReaction`**\n * * **`Presence`**\n * * **`ClientPresence`**\n * * **`VoiceState`**\n * * **`Role`**\n * * **`User`**\n * @typedef {string} ExtendableStructure\n */\n\n/**\n * Allows for the extension of built-in Discord.js structures that are instantiated by {@link BaseManager Managers}.\n */\nclass Structures {\n  constructor() {\n    throw new Error(`The ${this.constructor.name} class may not be instantiated.`);\n  }\n\n  /**\n   * Retrieves a structure class.\n   * @param {string} structure Name of the structure to retrieve\n   * @returns {Function}\n   */\n  static get(structure) {\n    if (typeof structure === 'string') return structures[structure];\n    throw new TypeError(`\"structure\" argument must be a string (received ${typeof structure})`);\n  }\n\n  /**\n   * Extends a structure.\n   * <warn> Make sure to extend all structures before instantiating your client.\n   * Extending after doing so may not work as expected. </warn>\n   * @param {ExtendableStructure} structure Name of the structure class to extend\n   * @param {Function} extender Function that takes the base class to extend as its only parameter and returns the\n   * extended class/prototype\n   * @returns {Function} Extended class/prototype returned from the extender\n   * @example\n   * const { Structures } = require('discord.js');\n   *\n   * Structures.extend('Guild', Guild => {\n   *   class CoolGuild extends Guild {\n   *     constructor(client, data) {\n   *       super(client, data);\n   *       this.cool = true;\n   *     }\n   *   }\n   *\n   *   return CoolGuild;\n   * });\n   */\n  static extend(structure, extender) {\n    if (!structures[structure]) throw new RangeError(`\"${structure}\" is not a valid extensible structure.`);\n    if (typeof extender !== 'function') {\n      const received = `(received ${typeof extender})`;\n      throw new TypeError(`\"extender\" argument must be a function that returns the extended structure class/prototype ${received}.`);\n    }\n    const extended = extender(structures[structure]);\n    if (typeof extended !== 'function') {\n      const received = `(received ${typeof extended})`;\n      throw new TypeError(`The extender function must return the extended structure class/prototype ${received}.`);\n    }\n    if (!(extended.prototype instanceof structures[structure])) {\n      const prototype = Object.getPrototypeOf(extended);\n      const received = `${extended.name || 'unnamed'}${prototype.name ? ` extends ${prototype.name}` : ''}`;\n      throw new Error('The class/prototype returned from the extender function must extend the existing structure class/prototype' + ` (received function ${received}; expected extension of ${structures[structure].name}).`);\n    }\n    structures[structure] = extended;\n    return extended;\n  }\n}\nconst structures = {\n  GuildEmoji: require('../structures/GuildEmoji'),\n  DMChannel: require('../structures/DMChannel'),\n  TextChannel: require('../structures/TextChannel'),\n  VoiceChannel: require('../structures/VoiceChannel'),\n  CategoryChannel: require('../structures/CategoryChannel'),\n  NewsChannel: require('../structures/NewsChannel'),\n  StoreChannel: require('../structures/StoreChannel'),\n  GuildMember: require('../structures/GuildMember'),\n  Guild: require('../structures/Guild'),\n  Message: require('../structures/Message'),\n  MessageReaction: require('../structures/MessageReaction'),\n  Presence: require('../structures/Presence').Presence,\n  ClientPresence: require('../structures/ClientPresence'),\n  VoiceState: require('../structures/VoiceState'),\n  Role: require('../structures/Role'),\n  User: require('../structures/User')\n};\nmodule.exports = Structures;","map":{"version":3,"names":["Structures","constructor","Error","name","get","structure","structures","TypeError","extend","extender","RangeError","received","extended","prototype","Object","getPrototypeOf","GuildEmoji","require","DMChannel","TextChannel","VoiceChannel","CategoryChannel","NewsChannel","StoreChannel","GuildMember","Guild","Message","MessageReaction","Presence","ClientPresence","VoiceState","Role","User","module","exports"],"sources":["/Users/jessegill/node_modules/discord.js/src/util/Structures.js"],"sourcesContent":["'use strict';\n\n/**\n * An extendable structure:\n * * **`GuildEmoji`**\n * * **`DMChannel`**\n * * **`TextChannel`**\n * * **`VoiceChannel`**\n * * **`CategoryChannel`**\n * * **`NewsChannel`**\n * * **`StoreChannel`**\n * * **`GuildMember`**\n * * **`Guild`**\n * * **`Message`**\n * * **`MessageReaction`**\n * * **`Presence`**\n * * **`ClientPresence`**\n * * **`VoiceState`**\n * * **`Role`**\n * * **`User`**\n * @typedef {string} ExtendableStructure\n */\n\n/**\n * Allows for the extension of built-in Discord.js structures that are instantiated by {@link BaseManager Managers}.\n */\nclass Structures {\n  constructor() {\n    throw new Error(`The ${this.constructor.name} class may not be instantiated.`);\n  }\n\n  /**\n   * Retrieves a structure class.\n   * @param {string} structure Name of the structure to retrieve\n   * @returns {Function}\n   */\n  static get(structure) {\n    if (typeof structure === 'string') return structures[structure];\n    throw new TypeError(`\"structure\" argument must be a string (received ${typeof structure})`);\n  }\n\n  /**\n   * Extends a structure.\n   * <warn> Make sure to extend all structures before instantiating your client.\n   * Extending after doing so may not work as expected. </warn>\n   * @param {ExtendableStructure} structure Name of the structure class to extend\n   * @param {Function} extender Function that takes the base class to extend as its only parameter and returns the\n   * extended class/prototype\n   * @returns {Function} Extended class/prototype returned from the extender\n   * @example\n   * const { Structures } = require('discord.js');\n   *\n   * Structures.extend('Guild', Guild => {\n   *   class CoolGuild extends Guild {\n   *     constructor(client, data) {\n   *       super(client, data);\n   *       this.cool = true;\n   *     }\n   *   }\n   *\n   *   return CoolGuild;\n   * });\n   */\n  static extend(structure, extender) {\n    if (!structures[structure]) throw new RangeError(`\"${structure}\" is not a valid extensible structure.`);\n    if (typeof extender !== 'function') {\n      const received = `(received ${typeof extender})`;\n      throw new TypeError(\n        `\"extender\" argument must be a function that returns the extended structure class/prototype ${received}.`,\n      );\n    }\n\n    const extended = extender(structures[structure]);\n    if (typeof extended !== 'function') {\n      const received = `(received ${typeof extended})`;\n      throw new TypeError(`The extender function must return the extended structure class/prototype ${received}.`);\n    }\n\n    if (!(extended.prototype instanceof structures[structure])) {\n      const prototype = Object.getPrototypeOf(extended);\n      const received = `${extended.name || 'unnamed'}${prototype.name ? ` extends ${prototype.name}` : ''}`;\n      throw new Error(\n        'The class/prototype returned from the extender function must extend the existing structure class/prototype' +\n          ` (received function ${received}; expected extension of ${structures[structure].name}).`,\n      );\n    }\n\n    structures[structure] = extended;\n    return extended;\n  }\n}\n\nconst structures = {\n  GuildEmoji: require('../structures/GuildEmoji'),\n  DMChannel: require('../structures/DMChannel'),\n  TextChannel: require('../structures/TextChannel'),\n  VoiceChannel: require('../structures/VoiceChannel'),\n  CategoryChannel: require('../structures/CategoryChannel'),\n  NewsChannel: require('../structures/NewsChannel'),\n  StoreChannel: require('../structures/StoreChannel'),\n  GuildMember: require('../structures/GuildMember'),\n  Guild: require('../structures/Guild'),\n  Message: require('../structures/Message'),\n  MessageReaction: require('../structures/MessageReaction'),\n  Presence: require('../structures/Presence').Presence,\n  ClientPresence: require('../structures/ClientPresence'),\n  VoiceState: require('../structures/VoiceState'),\n  Role: require('../structures/Role'),\n  User: require('../structures/User'),\n};\n\nmodule.exports = Structures;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}