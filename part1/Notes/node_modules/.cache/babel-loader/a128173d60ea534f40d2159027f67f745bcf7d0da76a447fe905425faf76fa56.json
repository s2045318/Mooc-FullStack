{"ast":null,"code":"'use strict';\n\n// Heavily inspired by node's `internal/errors` module\nconst kCode = Symbol('code');\nconst messages = new Map();\n\n/**\n * Extend an error of some sort into a DiscordjsError.\n * @param {Error} Base Base error to extend\n * @returns {DiscordjsError}\n */\nfunction makeDiscordjsError(Base) {\n  return class DiscordjsError extends Base {\n    constructor(key) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      super(message(key, args));\n      this[kCode] = key;\n      if (Error.captureStackTrace) Error.captureStackTrace(this, DiscordjsError);\n    }\n    get name() {\n      return `${super.name} [${this[kCode]}]`;\n    }\n    get code() {\n      return this[kCode];\n    }\n  };\n}\n\n/**\n * Format the message for an error.\n * @param {string} key Error key\n * @param {Array<*>} args Arguments to pass for util format or as function args\n * @returns {string} Formatted string\n */\nfunction message(key, args) {\n  if (typeof key !== 'string') throw new Error('Error message key must be a string');\n  const msg = messages.get(key);\n  if (!msg) throw new Error(`An invalid error message key was used: ${key}.`);\n  if (typeof msg === 'function') return msg(...args);\n  if (args === undefined || args.length === 0) return msg;\n  args.unshift(msg);\n  return String(...args);\n}\n\n/**\n * Register an error code and message.\n * @param {string} sym Unique name for the error\n * @param {*} val Value of the error\n */\nfunction register(sym, val) {\n  messages.set(sym, typeof val === 'function' ? val : String(val));\n}\nmodule.exports = {\n  register,\n  Error: makeDiscordjsError(Error),\n  TypeError: makeDiscordjsError(TypeError),\n  RangeError: makeDiscordjsError(RangeError)\n};","map":{"version":3,"names":["kCode","Symbol","messages","Map","makeDiscordjsError","Base","DiscordjsError","constructor","key","args","message","Error","captureStackTrace","name","code","msg","get","undefined","length","unshift","String","register","sym","val","set","module","exports","TypeError","RangeError"],"sources":["/Users/jessegill/node_modules/discord.js/src/errors/DJSError.js"],"sourcesContent":["'use strict';\n\n// Heavily inspired by node's `internal/errors` module\n\nconst kCode = Symbol('code');\nconst messages = new Map();\n\n/**\n * Extend an error of some sort into a DiscordjsError.\n * @param {Error} Base Base error to extend\n * @returns {DiscordjsError}\n */\nfunction makeDiscordjsError(Base) {\n  return class DiscordjsError extends Base {\n    constructor(key, ...args) {\n      super(message(key, args));\n      this[kCode] = key;\n      if (Error.captureStackTrace) Error.captureStackTrace(this, DiscordjsError);\n    }\n\n    get name() {\n      return `${super.name} [${this[kCode]}]`;\n    }\n\n    get code() {\n      return this[kCode];\n    }\n  };\n}\n\n/**\n * Format the message for an error.\n * @param {string} key Error key\n * @param {Array<*>} args Arguments to pass for util format or as function args\n * @returns {string} Formatted string\n */\nfunction message(key, args) {\n  if (typeof key !== 'string') throw new Error('Error message key must be a string');\n  const msg = messages.get(key);\n  if (!msg) throw new Error(`An invalid error message key was used: ${key}.`);\n  if (typeof msg === 'function') return msg(...args);\n  if (args === undefined || args.length === 0) return msg;\n  args.unshift(msg);\n  return String(...args);\n}\n\n/**\n * Register an error code and message.\n * @param {string} sym Unique name for the error\n * @param {*} val Value of the error\n */\nfunction register(sym, val) {\n  messages.set(sym, typeof val === 'function' ? val : String(val));\n}\n\nmodule.exports = {\n  register,\n  Error: makeDiscordjsError(Error),\n  TypeError: makeDiscordjsError(TypeError),\n  RangeError: makeDiscordjsError(RangeError),\n};\n"],"mappings":"AAAA,YAAY;;AAEZ;AAEA,MAAMA,KAAK,GAAGC,MAAM,CAAC,MAAM,CAAC;AAC5B,MAAMC,QAAQ,GAAG,IAAIC,GAAG,EAAE;;AAE1B;AACA;AACA;AACA;AACA;AACA,SAASC,kBAAkB,CAACC,IAAI,EAAE;EAChC,OAAO,MAAMC,cAAc,SAASD,IAAI,CAAC;IACvCE,WAAW,CAACC,GAAG,EAAW;MAAA,kCAANC,IAAI;QAAJA,IAAI;MAAA;MACtB,KAAK,CAACC,OAAO,CAACF,GAAG,EAAEC,IAAI,CAAC,CAAC;MACzB,IAAI,CAACT,KAAK,CAAC,GAAGQ,GAAG;MACjB,IAAIG,KAAK,CAACC,iBAAiB,EAAED,KAAK,CAACC,iBAAiB,CAAC,IAAI,EAAEN,cAAc,CAAC;IAC5E;IAEA,IAAIO,IAAI,GAAG;MACT,OAAQ,GAAE,KAAK,CAACA,IAAK,KAAI,IAAI,CAACb,KAAK,CAAE,GAAE;IACzC;IAEA,IAAIc,IAAI,GAAG;MACT,OAAO,IAAI,CAACd,KAAK,CAAC;IACpB;EACF,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASU,OAAO,CAACF,GAAG,EAAEC,IAAI,EAAE;EAC1B,IAAI,OAAOD,GAAG,KAAK,QAAQ,EAAE,MAAM,IAAIG,KAAK,CAAC,oCAAoC,CAAC;EAClF,MAAMI,GAAG,GAAGb,QAAQ,CAACc,GAAG,CAACR,GAAG,CAAC;EAC7B,IAAI,CAACO,GAAG,EAAE,MAAM,IAAIJ,KAAK,CAAE,0CAAyCH,GAAI,GAAE,CAAC;EAC3E,IAAI,OAAOO,GAAG,KAAK,UAAU,EAAE,OAAOA,GAAG,CAAC,GAAGN,IAAI,CAAC;EAClD,IAAIA,IAAI,KAAKQ,SAAS,IAAIR,IAAI,CAACS,MAAM,KAAK,CAAC,EAAE,OAAOH,GAAG;EACvDN,IAAI,CAACU,OAAO,CAACJ,GAAG,CAAC;EACjB,OAAOK,MAAM,CAAC,GAAGX,IAAI,CAAC;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASY,QAAQ,CAACC,GAAG,EAAEC,GAAG,EAAE;EAC1BrB,QAAQ,CAACsB,GAAG,CAACF,GAAG,EAAE,OAAOC,GAAG,KAAK,UAAU,GAAGA,GAAG,GAAGH,MAAM,CAACG,GAAG,CAAC,CAAC;AAClE;AAEAE,MAAM,CAACC,OAAO,GAAG;EACfL,QAAQ;EACRV,KAAK,EAAEP,kBAAkB,CAACO,KAAK,CAAC;EAChCgB,SAAS,EAAEvB,kBAAkB,CAACuB,SAAS,CAAC;EACxCC,UAAU,EAAExB,kBAAkB,CAACwB,UAAU;AAC3C,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}