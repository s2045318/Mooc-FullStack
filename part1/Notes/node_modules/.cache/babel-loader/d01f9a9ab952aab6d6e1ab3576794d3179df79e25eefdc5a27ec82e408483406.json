{"ast":null,"code":"'use strict';\n\nconst Role = require('./Role');\nconst {\n  TypeError\n} = require('../errors');\nconst Permissions = require('../util/Permissions');\nconst Util = require('../util/Util');\n\n/**\n * Represents a permission overwrite for a role or member in a guild channel.\n */\nclass PermissionOverwrites {\n  constructor(guildChannel, data) {\n    /**\n     * The GuildChannel this overwrite is for\n     * @name PermissionOverwrites#channel\n     * @type {GuildChannel}\n     * @readonly\n     */\n    Object.defineProperty(this, 'channel', {\n      value: guildChannel\n    });\n    if (data) this._patch(data);\n  }\n  _patch(data) {\n    /**\n     * The ID of this overwrite, either a user ID or a role ID\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The type of a permission overwrite. It can be one of:\n     * * member\n     * * role\n     * @typedef {string} OverwriteType\n     */\n\n    /**\n     * The type of this overwrite\n     * @type {OverwriteType}\n     */\n    this.type = data.type;\n\n    /**\n     * The permissions that are denied for the user or role.\n     * @type {Readonly<Permissions>}\n     */\n    this.deny = new Permissions(data.deny).freeze();\n\n    /**\n     * The permissions that are allowed for the user or role.\n     * @type {Readonly<Permissions>}\n     */\n    this.allow = new Permissions(data.allow).freeze();\n  }\n\n  /**\n   * Updates this permissionOverwrites.\n   * @param {PermissionOverwriteOptions} options The options for the update\n   * @param {string} [reason] Reason for creating/editing this overwrite\n   * @returns {Promise<PermissionOverwrites>}\n   * @example\n   * // Update permission overwrites\n   * permissionOverwrites.update({\n   *   SEND_MESSAGES: false\n   * })\n   *   .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n   *   .catch(console.error);\n   */\n  update(options, reason) {\n    const {\n      allow,\n      deny\n    } = this.constructor.resolveOverwriteOptions(options, this);\n    return this.channel.client.api.channels(this.channel.id).permissions[this.id].put({\n      data: {\n        id: this.id,\n        type: this.type,\n        allow: allow.bitfield,\n        deny: deny.bitfield\n      },\n      reason\n    }).then(() => this);\n  }\n\n  /**\n   * Deletes this Permission Overwrite.\n   * @param {string} [reason] Reason for deleting this overwrite\n   * @returns {Promise<PermissionOverwrites>}\n   */\n  delete(reason) {\n    return this.channel.client.api.channels[this.channel.id].permissions[this.id].delete({\n      reason\n    }).then(() => this);\n  }\n  toJSON() {\n    return Util.flatten(this);\n  }\n\n  /**\n   * An object mapping permission flags to `true` (enabled), `null` (unset) or `false` (disabled).\n   * ```js\n   * {\n   *  'SEND_MESSAGES': true,\n   *  'EMBED_LINKS': null,\n   *  'ATTACH_FILES': false,\n   * }\n   * ```\n   * @typedef {Object} PermissionOverwriteOptions\n   */\n\n  /**\n   * @typedef {object} ResolvedOverwriteOptions\n   * @property {Permissions} allow The allowed permissions\n   * @property {Permissions} deny The denied permissions\n   */\n\n  /**\n   * Resolves bitfield permissions overwrites from an object.\n   * @param {PermissionOverwriteOptions} options The options for the update\n   * @param {Object} initialPermissions The initial permissions\n   * @param {PermissionResolvable} initialPermissions.allow Initial allowed permissions\n   * @param {PermissionResolvable} initialPermissions.deny Initial denied permissions\n   * @returns {ResolvedOverwriteOptions}\n   */\n  static resolveOverwriteOptions(options) {\n    let {\n      allow,\n      deny\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    allow = new Permissions(allow);\n    deny = new Permissions(deny);\n    for (const [perm, value] of Object.entries(options)) {\n      if (value === true) {\n        allow.add(Permissions.FLAGS[perm]);\n        deny.remove(Permissions.FLAGS[perm]);\n      } else if (value === false) {\n        allow.remove(Permissions.FLAGS[perm]);\n        deny.add(Permissions.FLAGS[perm]);\n      } else if (value === null) {\n        allow.remove(Permissions.FLAGS[perm]);\n        deny.remove(Permissions.FLAGS[perm]);\n      }\n    }\n    return {\n      allow,\n      deny\n    };\n  }\n\n  /**\n   * The raw data for a permission overwrite\n   * @typedef {Object} RawOverwriteData\n   * @property {Snowflake} id The id of the overwrite\n   * @property {number} allow The permissions to allow\n   * @property {number} deny The permissions to deny\n   * @property {OverwriteType} type The type of this OverwriteData\n   */\n\n  /**\n   * Data that can be resolved into {@link RawOverwriteData}\n   * @typedef {PermissionOverwrites|OverwriteData} OverwriteResolvable\n   */\n\n  /**\n   * Data that can be used for a permission overwrite\n   * @typedef {Object} OverwriteData\n   * @property {GuildMemberResolvable|RoleResolvable} id Member or role this overwrite is for\n   * @property {PermissionResolvable} [allow] The permissions to allow\n   * @property {PermissionResolvable} [deny] The permissions to deny\n   * @property {OverwriteType} [type] The type of this OverwriteData\n   */\n\n  /**\n   * Resolves an overwrite into {@link RawOverwriteData}.\n   * @param {OverwriteResolvable} overwrite The overwrite-like data to resolve\n   * @param {Guild} guild The guild to resolve from\n   * @returns {RawOverwriteData}\n   */\n  static resolve(overwrite, guild) {\n    if (overwrite instanceof this) return overwrite.toJSON();\n    if (typeof overwrite.id === 'string' && ['role', 'member'].includes(overwrite.type)) {\n      return {\n        ...overwrite,\n        allow: Permissions.resolve(overwrite.allow),\n        deny: Permissions.resolve(overwrite.deny)\n      };\n    }\n    const userOrRole = guild.roles.resolve(overwrite.id) || guild.client.users.resolve(overwrite.id);\n    if (!userOrRole) throw new TypeError('INVALID_TYPE', 'parameter', 'User nor a Role');\n    const type = userOrRole instanceof Role ? 'role' : 'member';\n    return {\n      id: userOrRole.id,\n      type,\n      allow: Permissions.resolve(overwrite.allow),\n      deny: Permissions.resolve(overwrite.deny)\n    };\n  }\n}\nmodule.exports = PermissionOverwrites;","map":{"version":3,"names":["Role","require","TypeError","Permissions","Util","PermissionOverwrites","constructor","guildChannel","data","Object","defineProperty","value","_patch","id","type","deny","freeze","allow","update","options","reason","resolveOverwriteOptions","channel","client","api","channels","permissions","put","bitfield","then","delete","toJSON","flatten","perm","entries","add","FLAGS","remove","resolve","overwrite","guild","includes","userOrRole","roles","users","module","exports"],"sources":["/Users/jessegill/node_modules/discord.js/src/structures/PermissionOverwrites.js"],"sourcesContent":["'use strict';\n\nconst Role = require('./Role');\nconst { TypeError } = require('../errors');\nconst Permissions = require('../util/Permissions');\nconst Util = require('../util/Util');\n\n/**\n * Represents a permission overwrite for a role or member in a guild channel.\n */\nclass PermissionOverwrites {\n  constructor(guildChannel, data) {\n    /**\n     * The GuildChannel this overwrite is for\n     * @name PermissionOverwrites#channel\n     * @type {GuildChannel}\n     * @readonly\n     */\n    Object.defineProperty(this, 'channel', { value: guildChannel });\n\n    if (data) this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The ID of this overwrite, either a user ID or a role ID\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The type of a permission overwrite. It can be one of:\n     * * member\n     * * role\n     * @typedef {string} OverwriteType\n     */\n\n    /**\n     * The type of this overwrite\n     * @type {OverwriteType}\n     */\n    this.type = data.type;\n\n    /**\n     * The permissions that are denied for the user or role.\n     * @type {Readonly<Permissions>}\n     */\n    this.deny = new Permissions(data.deny).freeze();\n\n    /**\n     * The permissions that are allowed for the user or role.\n     * @type {Readonly<Permissions>}\n     */\n    this.allow = new Permissions(data.allow).freeze();\n  }\n\n  /**\n   * Updates this permissionOverwrites.\n   * @param {PermissionOverwriteOptions} options The options for the update\n   * @param {string} [reason] Reason for creating/editing this overwrite\n   * @returns {Promise<PermissionOverwrites>}\n   * @example\n   * // Update permission overwrites\n   * permissionOverwrites.update({\n   *   SEND_MESSAGES: false\n   * })\n   *   .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n   *   .catch(console.error);\n   */\n  update(options, reason) {\n    const { allow, deny } = this.constructor.resolveOverwriteOptions(options, this);\n\n    return this.channel.client.api\n      .channels(this.channel.id)\n      .permissions[this.id].put({\n        data: { id: this.id, type: this.type, allow: allow.bitfield, deny: deny.bitfield },\n        reason,\n      })\n      .then(() => this);\n  }\n\n  /**\n   * Deletes this Permission Overwrite.\n   * @param {string} [reason] Reason for deleting this overwrite\n   * @returns {Promise<PermissionOverwrites>}\n   */\n  delete(reason) {\n    return this.channel.client.api.channels[this.channel.id].permissions[this.id].delete({ reason }).then(() => this);\n  }\n\n  toJSON() {\n    return Util.flatten(this);\n  }\n\n  /**\n   * An object mapping permission flags to `true` (enabled), `null` (unset) or `false` (disabled).\n   * ```js\n   * {\n   *  'SEND_MESSAGES': true,\n   *  'EMBED_LINKS': null,\n   *  'ATTACH_FILES': false,\n   * }\n   * ```\n   * @typedef {Object} PermissionOverwriteOptions\n   */\n\n  /**\n   * @typedef {object} ResolvedOverwriteOptions\n   * @property {Permissions} allow The allowed permissions\n   * @property {Permissions} deny The denied permissions\n   */\n\n  /**\n   * Resolves bitfield permissions overwrites from an object.\n   * @param {PermissionOverwriteOptions} options The options for the update\n   * @param {Object} initialPermissions The initial permissions\n   * @param {PermissionResolvable} initialPermissions.allow Initial allowed permissions\n   * @param {PermissionResolvable} initialPermissions.deny Initial denied permissions\n   * @returns {ResolvedOverwriteOptions}\n   */\n  static resolveOverwriteOptions(options, { allow, deny } = {}) {\n    allow = new Permissions(allow);\n    deny = new Permissions(deny);\n\n    for (const [perm, value] of Object.entries(options)) {\n      if (value === true) {\n        allow.add(Permissions.FLAGS[perm]);\n        deny.remove(Permissions.FLAGS[perm]);\n      } else if (value === false) {\n        allow.remove(Permissions.FLAGS[perm]);\n        deny.add(Permissions.FLAGS[perm]);\n      } else if (value === null) {\n        allow.remove(Permissions.FLAGS[perm]);\n        deny.remove(Permissions.FLAGS[perm]);\n      }\n    }\n\n    return { allow, deny };\n  }\n\n  /**\n   * The raw data for a permission overwrite\n   * @typedef {Object} RawOverwriteData\n   * @property {Snowflake} id The id of the overwrite\n   * @property {number} allow The permissions to allow\n   * @property {number} deny The permissions to deny\n   * @property {OverwriteType} type The type of this OverwriteData\n   */\n\n  /**\n   * Data that can be resolved into {@link RawOverwriteData}\n   * @typedef {PermissionOverwrites|OverwriteData} OverwriteResolvable\n   */\n\n  /**\n   * Data that can be used for a permission overwrite\n   * @typedef {Object} OverwriteData\n   * @property {GuildMemberResolvable|RoleResolvable} id Member or role this overwrite is for\n   * @property {PermissionResolvable} [allow] The permissions to allow\n   * @property {PermissionResolvable} [deny] The permissions to deny\n   * @property {OverwriteType} [type] The type of this OverwriteData\n   */\n\n  /**\n   * Resolves an overwrite into {@link RawOverwriteData}.\n   * @param {OverwriteResolvable} overwrite The overwrite-like data to resolve\n   * @param {Guild} guild The guild to resolve from\n   * @returns {RawOverwriteData}\n   */\n  static resolve(overwrite, guild) {\n    if (overwrite instanceof this) return overwrite.toJSON();\n    if (typeof overwrite.id === 'string' && ['role', 'member'].includes(overwrite.type)) {\n      return { ...overwrite, allow: Permissions.resolve(overwrite.allow), deny: Permissions.resolve(overwrite.deny) };\n    }\n\n    const userOrRole = guild.roles.resolve(overwrite.id) || guild.client.users.resolve(overwrite.id);\n    if (!userOrRole) throw new TypeError('INVALID_TYPE', 'parameter', 'User nor a Role');\n    const type = userOrRole instanceof Role ? 'role' : 'member';\n\n    return {\n      id: userOrRole.id,\n      type,\n      allow: Permissions.resolve(overwrite.allow),\n      deny: Permissions.resolve(overwrite.deny),\n    };\n  }\n}\n\nmodule.exports = PermissionOverwrites;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}