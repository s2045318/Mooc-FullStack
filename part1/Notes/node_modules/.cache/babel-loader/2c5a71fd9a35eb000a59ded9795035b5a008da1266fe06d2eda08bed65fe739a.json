{"ast":null,"code":"'use strict';\n\nconst {\n  RangeError\n} = require('../errors');\nconst Util = require('../util/Util');\n\n/**\n * Represents an embed in a message (image/video preview, rich embed, etc.)\n */\nclass MessageEmbed {\n  /**\n   * @name MessageEmbed\n   * @kind constructor\n   * @memberof MessageEmbed\n   * @param {MessageEmbed|Object} [data={}] MessageEmbed to clone or raw embed data\n   */\n\n  constructor() {\n    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let skipValidation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    this.setup(data, skipValidation);\n  }\n  setup(data, skipValidation) {\n    /**\n     * The type of this embed, either:\n     * * `rich` - a rich embed\n     * * `image` - an image embed\n     * * `video` - a video embed\n     * * `gifv` - a gifv embed\n     * * `article` - an article embed\n     * * `link` - a link embed\n     * @type {string}\n     */\n    this.type = data.type || 'rich';\n\n    /**\n     * The title of this embed\n     * @type {?string}\n     */\n    this.title = 'title' in data ? data.title : null;\n\n    /**\n     * The description of this embed\n     * @type {?string}\n     */\n    this.description = 'description' in data ? data.description : null;\n\n    /**\n     * The URL of this embed\n     * @type {?string}\n     */\n    this.url = 'url' in data ? data.url : null;\n\n    /**\n     * The color of this embed\n     * @type {?number}\n     */\n    this.color = 'color' in data ? Util.resolveColor(data.color) : null;\n\n    /**\n     * The timestamp of this embed\n     * @type {?number}\n     */\n    this.timestamp = 'timestamp' in data ? new Date(data.timestamp).getTime() : null;\n\n    /**\n     * Represents a field of a MessageEmbed\n     * @typedef {Object} EmbedField\n     * @property {string} name The name of this field\n     * @property {string} value The value of this field\n     * @property {boolean} inline If this field will be displayed inline\n     */\n\n    /**\n     * The fields of this embed\n     * @type {EmbedField[]}\n     */\n    this.fields = [];\n    if (data.fields) {\n      this.fields = skipValidation ? data.fields.map(Util.cloneObject) : this.constructor.normalizeFields(data.fields);\n    }\n\n    /**\n     * Represents the thumbnail of a MessageEmbed\n     * @typedef {Object} MessageEmbedThumbnail\n     * @property {string} url URL for this thumbnail\n     * @property {string} proxyURL ProxyURL for this thumbnail\n     * @property {number} height Height of this thumbnail\n     * @property {number} width Width of this thumbnail\n     */\n\n    /**\n     * The thumbnail of this embed (if there is one)\n     * @type {?MessageEmbedThumbnail}\n     */\n    this.thumbnail = data.thumbnail ? {\n      url: data.thumbnail.url,\n      proxyURL: data.thumbnail.proxyURL || data.thumbnail.proxy_url,\n      height: data.thumbnail.height,\n      width: data.thumbnail.width\n    } : null;\n\n    /**\n     * Represents the image of a MessageEmbed\n     * @typedef {Object} MessageEmbedImage\n     * @property {string} url URL for this image\n     * @property {string} proxyURL ProxyURL for this image\n     * @property {number} height Height of this image\n     * @property {number} width Width of this image\n     */\n\n    /**\n     * The image of this embed, if there is one\n     * @type {?MessageEmbedImage}\n     */\n    this.image = data.image ? {\n      url: data.image.url,\n      proxyURL: data.image.proxyURL || data.image.proxy_url,\n      height: data.image.height,\n      width: data.image.width\n    } : null;\n\n    /**\n     * Represents the video of a MessageEmbed\n     * @typedef {Object} MessageEmbedVideo\n     * @property {string} url URL of this video\n     * @property {string} proxyURL ProxyURL for this video\n     * @property {number} height Height of this video\n     * @property {number} width Width of this video\n     */\n\n    /**\n     * The video of this embed (if there is one)\n     * @type {?MessageEmbedVideo}\n     * @readonly\n     */\n    this.video = data.video ? {\n      url: data.video.url,\n      proxyURL: data.video.proxyURL || data.video.proxy_url,\n      height: data.video.height,\n      width: data.video.width\n    } : null;\n\n    /**\n     * Represents the author field of a MessageEmbed\n     * @typedef {Object} MessageEmbedAuthor\n     * @property {string} name The name of this author\n     * @property {string} url URL of this author\n     * @property {string} iconURL URL of the icon for this author\n     * @property {string} proxyIconURL Proxied URL of the icon for this author\n     */\n\n    /**\n     * The author of this embed (if there is one)\n     * @type {?MessageEmbedAuthor}\n     */\n    this.author = data.author ? {\n      name: data.author.name,\n      url: data.author.url,\n      iconURL: data.author.iconURL || data.author.icon_url,\n      proxyIconURL: data.author.proxyIconURL || data.author.proxy_icon_url\n    } : null;\n\n    /**\n     * Represents the provider of a MessageEmbed\n     * @typedef {Object} MessageEmbedProvider\n     * @property {string} name The name of this provider\n     * @property {string} url URL of this provider\n     */\n\n    /**\n     * The provider of this embed (if there is one)\n     * @type {?MessageEmbedProvider}\n     */\n    this.provider = data.provider ? {\n      name: data.provider.name,\n      url: data.provider.name\n    } : null;\n\n    /**\n     * Represents the footer field of a MessageEmbed\n     * @typedef {Object} MessageEmbedFooter\n     * @property {string} text The text of this footer\n     * @property {string} iconURL URL of the icon for this footer\n     * @property {string} proxyIconURL Proxied URL of the icon for this footer\n     */\n\n    /**\n     * The footer of this embed\n     * @type {?MessageEmbedFooter}\n     */\n    this.footer = data.footer ? {\n      text: data.footer.text,\n      iconURL: data.footer.iconURL || data.footer.icon_url,\n      proxyIconURL: data.footer.proxyIconURL || data.footer.proxy_icon_url\n    } : null;\n\n    /**\n     * The files of this embed\n     * @type {Array<FileOptions|string|MessageAttachment>}\n     */\n    this.files = data.files || [];\n  }\n\n  /**\n   * The date displayed on this embed\n   * @type {?Date}\n   * @readonly\n   */\n  get createdAt() {\n    return this.timestamp ? new Date(this.timestamp) : null;\n  }\n\n  /**\n   * The hexadecimal version of the embed color, with a leading hash\n   * @type {?string}\n   * @readonly\n   */\n  get hexColor() {\n    return this.color ? `#${this.color.toString(16).padStart(6, '0')}` : null;\n  }\n\n  /**\n   * The accumulated length for the embed title, description, fields and footer text\n   * @type {number}\n   * @readonly\n   */\n  get length() {\n    return (this.title ? this.title.length : 0) + (this.description ? this.description.length : 0) + (this.fields.length >= 1 ? this.fields.reduce((prev, curr) => prev + curr.name.length + curr.value.length, 0) : 0) + (this.footer ? this.footer.text.length : 0);\n  }\n\n  /**\n   * Adds a field to the embed (max 25).\n   * @param {StringResolvable} name The name of this field\n   * @param {StringResolvable} value The value of this field\n   * @param {boolean} [inline=false] If this field will be displayed inline\n   * @returns {MessageEmbed}\n   */\n  addField(name, value, inline) {\n    return this.addFields({\n      name,\n      value,\n      inline\n    });\n  }\n\n  /**\n   * Adds fields to the embed (max 25).\n   * @param {...EmbedFieldData|EmbedFieldData[]} fields The fields to add\n   * @returns {MessageEmbed}\n   */\n  addFields() {\n    for (var _len = arguments.length, fields = new Array(_len), _key = 0; _key < _len; _key++) {\n      fields[_key] = arguments[_key];\n    }\n    this.fields.push(...this.constructor.normalizeFields(fields));\n    return this;\n  }\n\n  /**\n   * Removes, replaces, and inserts fields in the embed (max 25).\n   * @param {number} index The index to start at\n   * @param {number} deleteCount The number of fields to remove\n   * @param {...EmbedFieldData|EmbedFieldData[]} [fields] The replacing field objects\n   * @returns {MessageEmbed}\n   */\n  spliceFields(index, deleteCount) {\n    for (var _len2 = arguments.length, fields = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      fields[_key2 - 2] = arguments[_key2];\n    }\n    this.fields.splice(index, deleteCount, ...this.constructor.normalizeFields(...fields));\n    return this;\n  }\n\n  /**\n   * Sets the file to upload alongside the embed. This file can be accessed via `attachment://fileName.extension` when\n   * setting an embed image or author/footer icons. Multiple files can be attached.\n   * @param {Array<FileOptions|string|MessageAttachment>} files Files to attach\n   * @returns {MessageEmbed}\n   */\n  attachFiles(files) {\n    this.files = this.files.concat(files);\n    return this;\n  }\n\n  /**\n   * Sets the author of this embed.\n   * @param {StringResolvable} name The name of the author\n   * @param {string} [iconURL] The icon URL of the author\n   * @param {string} [url] The URL of the author\n   * @returns {MessageEmbed}\n   */\n  setAuthor(name, iconURL, url) {\n    this.author = {\n      name: Util.resolveString(name),\n      iconURL,\n      url\n    };\n    return this;\n  }\n\n  /**\n   * Sets the color of this embed.\n   * @param {ColorResolvable} color The color of the embed\n   * @returns {MessageEmbed}\n   */\n  setColor(color) {\n    this.color = Util.resolveColor(color);\n    return this;\n  }\n\n  /**\n   * Sets the description of this embed.\n   * @param {StringResolvable} description The description\n   * @returns {MessageEmbed}\n   */\n  setDescription(description) {\n    description = Util.resolveString(description);\n    this.description = description;\n    return this;\n  }\n\n  /**\n   * Sets the footer of this embed.\n   * @param {StringResolvable} text The text of the footer\n   * @param {string} [iconURL] The icon URL of the footer\n   * @returns {MessageEmbed}\n   */\n  setFooter(text, iconURL) {\n    text = Util.resolveString(text);\n    this.footer = {\n      text,\n      iconURL\n    };\n    return this;\n  }\n\n  /**\n   * Sets the image of this embed.\n   * @param {string} url The URL of the image\n   * @returns {MessageEmbed}\n   */\n  setImage(url) {\n    this.image = {\n      url\n    };\n    return this;\n  }\n\n  /**\n   * Sets the thumbnail of this embed.\n   * @param {string} url The URL of the thumbnail\n   * @returns {MessageEmbed}\n   */\n  setThumbnail(url) {\n    this.thumbnail = {\n      url\n    };\n    return this;\n  }\n\n  /**\n   * Sets the timestamp of this embed.\n   * @param {Date|number} [timestamp=Date.now()] The timestamp or date\n   * @returns {MessageEmbed}\n   */\n  setTimestamp() {\n    let timestamp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n    if (timestamp instanceof Date) timestamp = timestamp.getTime();\n    this.timestamp = timestamp;\n    return this;\n  }\n\n  /**\n   * Sets the title of this embed.\n   * @param {StringResolvable} title The title\n   * @returns {MessageEmbed}\n   */\n  setTitle(title) {\n    title = Util.resolveString(title);\n    this.title = title;\n    return this;\n  }\n\n  /**\n   * Sets the URL of this embed.\n   * @param {string} url The URL\n   * @returns {MessageEmbed}\n   */\n  setURL(url) {\n    this.url = url;\n    return this;\n  }\n\n  /**\n   * Transforms the embed to a plain object.\n   * @returns {Object} The raw data of this embed\n   */\n  toJSON() {\n    return {\n      title: this.title,\n      type: 'rich',\n      description: this.description,\n      url: this.url,\n      timestamp: this.timestamp ? new Date(this.timestamp) : null,\n      color: this.color,\n      fields: this.fields,\n      thumbnail: this.thumbnail,\n      image: this.image,\n      author: this.author ? {\n        name: this.author.name,\n        url: this.author.url,\n        icon_url: this.author.iconURL\n      } : null,\n      footer: this.footer ? {\n        text: this.footer.text,\n        icon_url: this.footer.iconURL\n      } : null\n    };\n  }\n\n  /**\n   * Normalizes field input and resolves strings.\n   * @param {StringResolvable} name The name of the field\n   * @param {StringResolvable} value The value of the field\n   * @param {boolean} [inline=false] Set the field to display inline\n   * @returns {EmbedField}\n   */\n  static normalizeField(name, value) {\n    let inline = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    name = Util.resolveString(name);\n    if (!name) throw new RangeError('EMBED_FIELD_NAME');\n    value = Util.resolveString(value);\n    if (!value) throw new RangeError('EMBED_FIELD_VALUE');\n    return {\n      name,\n      value,\n      inline\n    };\n  }\n\n  /**\n   * @typedef {Object} EmbedFieldData\n   * @property {StringResolvable} name The name of this field\n   * @property {StringResolvable} value The value of this field\n   * @property {boolean} [inline] If this field will be displayed inline\n   */\n\n  /**\n   * Normalizes field input and resolves strings.\n   * @param  {...EmbedFieldData|EmbedFieldData[]} fields Fields to normalize\n   * @returns {EmbedField[]}\n   */\n  static normalizeFields() {\n    for (var _len3 = arguments.length, fields = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      fields[_key3] = arguments[_key3];\n    }\n    return fields.flat(2).map(field => this.normalizeField(field && field.name, field && field.value, field && typeof field.inline === 'boolean' ? field.inline : false));\n  }\n}\nmodule.exports = MessageEmbed;","map":{"version":3,"names":["RangeError","require","Util","MessageEmbed","constructor","data","skipValidation","setup","type","title","description","url","color","resolveColor","timestamp","Date","getTime","fields","map","cloneObject","normalizeFields","thumbnail","proxyURL","proxy_url","height","width","image","video","author","name","iconURL","icon_url","proxyIconURL","proxy_icon_url","provider","footer","text","files","createdAt","hexColor","toString","padStart","length","reduce","prev","curr","value","addField","inline","addFields","push","spliceFields","index","deleteCount","splice","attachFiles","concat","setAuthor","resolveString","setColor","setDescription","setFooter","setImage","setThumbnail","setTimestamp","now","setTitle","setURL","toJSON","normalizeField","flat","field","module","exports"],"sources":["/Users/jessegill/node_modules/discord.js/src/structures/MessageEmbed.js"],"sourcesContent":["'use strict';\n\nconst { RangeError } = require('../errors');\nconst Util = require('../util/Util');\n\n/**\n * Represents an embed in a message (image/video preview, rich embed, etc.)\n */\nclass MessageEmbed {\n  /**\n   * @name MessageEmbed\n   * @kind constructor\n   * @memberof MessageEmbed\n   * @param {MessageEmbed|Object} [data={}] MessageEmbed to clone or raw embed data\n   */\n\n  constructor(data = {}, skipValidation = false) {\n    this.setup(data, skipValidation);\n  }\n\n  setup(data, skipValidation) {\n    /**\n     * The type of this embed, either:\n     * * `rich` - a rich embed\n     * * `image` - an image embed\n     * * `video` - a video embed\n     * * `gifv` - a gifv embed\n     * * `article` - an article embed\n     * * `link` - a link embed\n     * @type {string}\n     */\n    this.type = data.type || 'rich';\n\n    /**\n     * The title of this embed\n     * @type {?string}\n     */\n    this.title = 'title' in data ? data.title : null;\n\n    /**\n     * The description of this embed\n     * @type {?string}\n     */\n    this.description = 'description' in data ? data.description : null;\n\n    /**\n     * The URL of this embed\n     * @type {?string}\n     */\n    this.url = 'url' in data ? data.url : null;\n\n    /**\n     * The color of this embed\n     * @type {?number}\n     */\n    this.color = 'color' in data ? Util.resolveColor(data.color) : null;\n\n    /**\n     * The timestamp of this embed\n     * @type {?number}\n     */\n    this.timestamp = 'timestamp' in data ? new Date(data.timestamp).getTime() : null;\n\n    /**\n     * Represents a field of a MessageEmbed\n     * @typedef {Object} EmbedField\n     * @property {string} name The name of this field\n     * @property {string} value The value of this field\n     * @property {boolean} inline If this field will be displayed inline\n     */\n\n    /**\n     * The fields of this embed\n     * @type {EmbedField[]}\n     */\n    this.fields = [];\n    if (data.fields) {\n      this.fields = skipValidation ? data.fields.map(Util.cloneObject) : this.constructor.normalizeFields(data.fields);\n    }\n\n    /**\n     * Represents the thumbnail of a MessageEmbed\n     * @typedef {Object} MessageEmbedThumbnail\n     * @property {string} url URL for this thumbnail\n     * @property {string} proxyURL ProxyURL for this thumbnail\n     * @property {number} height Height of this thumbnail\n     * @property {number} width Width of this thumbnail\n     */\n\n    /**\n     * The thumbnail of this embed (if there is one)\n     * @type {?MessageEmbedThumbnail}\n     */\n    this.thumbnail = data.thumbnail\n      ? {\n          url: data.thumbnail.url,\n          proxyURL: data.thumbnail.proxyURL || data.thumbnail.proxy_url,\n          height: data.thumbnail.height,\n          width: data.thumbnail.width,\n        }\n      : null;\n\n    /**\n     * Represents the image of a MessageEmbed\n     * @typedef {Object} MessageEmbedImage\n     * @property {string} url URL for this image\n     * @property {string} proxyURL ProxyURL for this image\n     * @property {number} height Height of this image\n     * @property {number} width Width of this image\n     */\n\n    /**\n     * The image of this embed, if there is one\n     * @type {?MessageEmbedImage}\n     */\n    this.image = data.image\n      ? {\n          url: data.image.url,\n          proxyURL: data.image.proxyURL || data.image.proxy_url,\n          height: data.image.height,\n          width: data.image.width,\n        }\n      : null;\n\n    /**\n     * Represents the video of a MessageEmbed\n     * @typedef {Object} MessageEmbedVideo\n     * @property {string} url URL of this video\n     * @property {string} proxyURL ProxyURL for this video\n     * @property {number} height Height of this video\n     * @property {number} width Width of this video\n     */\n\n    /**\n     * The video of this embed (if there is one)\n     * @type {?MessageEmbedVideo}\n     * @readonly\n     */\n    this.video = data.video\n      ? {\n          url: data.video.url,\n          proxyURL: data.video.proxyURL || data.video.proxy_url,\n          height: data.video.height,\n          width: data.video.width,\n        }\n      : null;\n\n    /**\n     * Represents the author field of a MessageEmbed\n     * @typedef {Object} MessageEmbedAuthor\n     * @property {string} name The name of this author\n     * @property {string} url URL of this author\n     * @property {string} iconURL URL of the icon for this author\n     * @property {string} proxyIconURL Proxied URL of the icon for this author\n     */\n\n    /**\n     * The author of this embed (if there is one)\n     * @type {?MessageEmbedAuthor}\n     */\n    this.author = data.author\n      ? {\n          name: data.author.name,\n          url: data.author.url,\n          iconURL: data.author.iconURL || data.author.icon_url,\n          proxyIconURL: data.author.proxyIconURL || data.author.proxy_icon_url,\n        }\n      : null;\n\n    /**\n     * Represents the provider of a MessageEmbed\n     * @typedef {Object} MessageEmbedProvider\n     * @property {string} name The name of this provider\n     * @property {string} url URL of this provider\n     */\n\n    /**\n     * The provider of this embed (if there is one)\n     * @type {?MessageEmbedProvider}\n     */\n    this.provider = data.provider\n      ? {\n          name: data.provider.name,\n          url: data.provider.name,\n        }\n      : null;\n\n    /**\n     * Represents the footer field of a MessageEmbed\n     * @typedef {Object} MessageEmbedFooter\n     * @property {string} text The text of this footer\n     * @property {string} iconURL URL of the icon for this footer\n     * @property {string} proxyIconURL Proxied URL of the icon for this footer\n     */\n\n    /**\n     * The footer of this embed\n     * @type {?MessageEmbedFooter}\n     */\n    this.footer = data.footer\n      ? {\n          text: data.footer.text,\n          iconURL: data.footer.iconURL || data.footer.icon_url,\n          proxyIconURL: data.footer.proxyIconURL || data.footer.proxy_icon_url,\n        }\n      : null;\n\n    /**\n     * The files of this embed\n     * @type {Array<FileOptions|string|MessageAttachment>}\n     */\n    this.files = data.files || [];\n  }\n\n  /**\n   * The date displayed on this embed\n   * @type {?Date}\n   * @readonly\n   */\n  get createdAt() {\n    return this.timestamp ? new Date(this.timestamp) : null;\n  }\n\n  /**\n   * The hexadecimal version of the embed color, with a leading hash\n   * @type {?string}\n   * @readonly\n   */\n  get hexColor() {\n    return this.color ? `#${this.color.toString(16).padStart(6, '0')}` : null;\n  }\n\n  /**\n   * The accumulated length for the embed title, description, fields and footer text\n   * @type {number}\n   * @readonly\n   */\n  get length() {\n    return (\n      (this.title ? this.title.length : 0) +\n      (this.description ? this.description.length : 0) +\n      (this.fields.length >= 1\n        ? this.fields.reduce((prev, curr) => prev + curr.name.length + curr.value.length, 0)\n        : 0) +\n      (this.footer ? this.footer.text.length : 0)\n    );\n  }\n\n  /**\n   * Adds a field to the embed (max 25).\n   * @param {StringResolvable} name The name of this field\n   * @param {StringResolvable} value The value of this field\n   * @param {boolean} [inline=false] If this field will be displayed inline\n   * @returns {MessageEmbed}\n   */\n  addField(name, value, inline) {\n    return this.addFields({ name, value, inline });\n  }\n\n  /**\n   * Adds fields to the embed (max 25).\n   * @param {...EmbedFieldData|EmbedFieldData[]} fields The fields to add\n   * @returns {MessageEmbed}\n   */\n  addFields(...fields) {\n    this.fields.push(...this.constructor.normalizeFields(fields));\n    return this;\n  }\n\n  /**\n   * Removes, replaces, and inserts fields in the embed (max 25).\n   * @param {number} index The index to start at\n   * @param {number} deleteCount The number of fields to remove\n   * @param {...EmbedFieldData|EmbedFieldData[]} [fields] The replacing field objects\n   * @returns {MessageEmbed}\n   */\n  spliceFields(index, deleteCount, ...fields) {\n    this.fields.splice(index, deleteCount, ...this.constructor.normalizeFields(...fields));\n    return this;\n  }\n\n  /**\n   * Sets the file to upload alongside the embed. This file can be accessed via `attachment://fileName.extension` when\n   * setting an embed image or author/footer icons. Multiple files can be attached.\n   * @param {Array<FileOptions|string|MessageAttachment>} files Files to attach\n   * @returns {MessageEmbed}\n   */\n  attachFiles(files) {\n    this.files = this.files.concat(files);\n    return this;\n  }\n\n  /**\n   * Sets the author of this embed.\n   * @param {StringResolvable} name The name of the author\n   * @param {string} [iconURL] The icon URL of the author\n   * @param {string} [url] The URL of the author\n   * @returns {MessageEmbed}\n   */\n  setAuthor(name, iconURL, url) {\n    this.author = { name: Util.resolveString(name), iconURL, url };\n    return this;\n  }\n\n  /**\n   * Sets the color of this embed.\n   * @param {ColorResolvable} color The color of the embed\n   * @returns {MessageEmbed}\n   */\n  setColor(color) {\n    this.color = Util.resolveColor(color);\n    return this;\n  }\n\n  /**\n   * Sets the description of this embed.\n   * @param {StringResolvable} description The description\n   * @returns {MessageEmbed}\n   */\n  setDescription(description) {\n    description = Util.resolveString(description);\n    this.description = description;\n    return this;\n  }\n\n  /**\n   * Sets the footer of this embed.\n   * @param {StringResolvable} text The text of the footer\n   * @param {string} [iconURL] The icon URL of the footer\n   * @returns {MessageEmbed}\n   */\n  setFooter(text, iconURL) {\n    text = Util.resolveString(text);\n    this.footer = { text, iconURL };\n    return this;\n  }\n\n  /**\n   * Sets the image of this embed.\n   * @param {string} url The URL of the image\n   * @returns {MessageEmbed}\n   */\n  setImage(url) {\n    this.image = { url };\n    return this;\n  }\n\n  /**\n   * Sets the thumbnail of this embed.\n   * @param {string} url The URL of the thumbnail\n   * @returns {MessageEmbed}\n   */\n  setThumbnail(url) {\n    this.thumbnail = { url };\n    return this;\n  }\n\n  /**\n   * Sets the timestamp of this embed.\n   * @param {Date|number} [timestamp=Date.now()] The timestamp or date\n   * @returns {MessageEmbed}\n   */\n  setTimestamp(timestamp = Date.now()) {\n    if (timestamp instanceof Date) timestamp = timestamp.getTime();\n    this.timestamp = timestamp;\n    return this;\n  }\n\n  /**\n   * Sets the title of this embed.\n   * @param {StringResolvable} title The title\n   * @returns {MessageEmbed}\n   */\n  setTitle(title) {\n    title = Util.resolveString(title);\n    this.title = title;\n    return this;\n  }\n\n  /**\n   * Sets the URL of this embed.\n   * @param {string} url The URL\n   * @returns {MessageEmbed}\n   */\n  setURL(url) {\n    this.url = url;\n    return this;\n  }\n\n  /**\n   * Transforms the embed to a plain object.\n   * @returns {Object} The raw data of this embed\n   */\n  toJSON() {\n    return {\n      title: this.title,\n      type: 'rich',\n      description: this.description,\n      url: this.url,\n      timestamp: this.timestamp ? new Date(this.timestamp) : null,\n      color: this.color,\n      fields: this.fields,\n      thumbnail: this.thumbnail,\n      image: this.image,\n      author: this.author\n        ? {\n            name: this.author.name,\n            url: this.author.url,\n            icon_url: this.author.iconURL,\n          }\n        : null,\n      footer: this.footer\n        ? {\n            text: this.footer.text,\n            icon_url: this.footer.iconURL,\n          }\n        : null,\n    };\n  }\n\n  /**\n   * Normalizes field input and resolves strings.\n   * @param {StringResolvable} name The name of the field\n   * @param {StringResolvable} value The value of the field\n   * @param {boolean} [inline=false] Set the field to display inline\n   * @returns {EmbedField}\n   */\n  static normalizeField(name, value, inline = false) {\n    name = Util.resolveString(name);\n    if (!name) throw new RangeError('EMBED_FIELD_NAME');\n    value = Util.resolveString(value);\n    if (!value) throw new RangeError('EMBED_FIELD_VALUE');\n    return { name, value, inline };\n  }\n\n  /**\n   * @typedef {Object} EmbedFieldData\n   * @property {StringResolvable} name The name of this field\n   * @property {StringResolvable} value The value of this field\n   * @property {boolean} [inline] If this field will be displayed inline\n   */\n\n  /**\n   * Normalizes field input and resolves strings.\n   * @param  {...EmbedFieldData|EmbedFieldData[]} fields Fields to normalize\n   * @returns {EmbedField[]}\n   */\n  static normalizeFields(...fields) {\n    return fields\n      .flat(2)\n      .map(field =>\n        this.normalizeField(\n          field && field.name,\n          field && field.value,\n          field && typeof field.inline === 'boolean' ? field.inline : false,\n        ),\n      );\n  }\n}\n\nmodule.exports = MessageEmbed;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}